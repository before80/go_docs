<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go中文档集 on Go 中文档集</title><link>https://before80.github.io/go_docs/</link><description>Recent content in Go中文档集 on Go 中文档集</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://before80.github.io/go_docs/index.xml" rel="self" type="application/rss+xml"/><item><title>个人笔记</title><link>https://before80.github.io/go_docs/rod/my/</link><pubDate>Sat, 23 Nov 2024 18:19:37 +0800</pubDate><guid>https://before80.github.io/go_docs/rod/my/</guid><description>默认情况下会自动下载chromium浏览器 设置指定的本地浏览器 ​ 示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 path := &amp;#34;/usr/bin/google-chrome&amp;#34; userDataDir := &amp;#34;/home/lx/.config/google-chrome&amp;#34; u := launcher.New(). Bin(path). Headless(false). Set(&amp;#34;window-size&amp;#34;, &amp;#34;1920,1080&amp;#34;). Set(&amp;#34;user-data-dir&amp;#34;, userDataDir). // 加载用</description></item><item><title>Buy Me A Coffee</title><link>https://before80.github.io/go_docs/comm/coffee/</link><pubDate>Thu, 30 May 2024 22:28:58 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/coffee/</guid><description>咖啡自由 一天的星巴克咖啡 两天的星巴克咖啡 三天的星巴克咖啡 一周的星巴克咖啡 两周的星巴克咖啡 一个月的星巴克咖啡 半年的星巴克咖啡 一年的星巴克咖啡 咖</description></item><item><title>概览</title><link>https://before80.github.io/go_docs/asu/overview/</link><pubDate>Mon, 12 Jun 2023 09:44:48 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/overview/</guid><description>概览 ​ &amp;ldquo;知之为知之，不知为不知，是知也。&amp;quot;——出自《论语·为政》 ​ 知道自己知道的，知道自己不知道的——很聪明的人。 ​ 知</description></item><item><title>技术说明 0</title><link>https://before80.github.io/go_docs/thirdPkg/lua/notes/0/</link><pubDate>Thu, 25 Jan 2024 22:16:29 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/lua/notes/0/</guid><description>原文：https://www.lua.org/notes/ltn000.html Technical Note 0 技术说明 0 Last update: Thu Mar 18 14:03:37 BRT 2004 by lhf. How to write a Lua Technical Note 如何编写 Lua</description></item><item><title>安装、运行代码、卸载</title><link>https://before80.github.io/go_docs/comm/InstallAndRun/</link><pubDate>Fri, 06 Oct 2023 21:15:41 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/InstallAndRun/</guid><description>安装、运行代码、卸载 Go 安装包来源 https://go.dev/dl/ https://mirrors.aliyun.com/golang/ https://github.com/golang/go/tags https://golang.google.cn/dl/ https://studygolang.com/dl 安装 Linux Mac Windows CentOS： （a）下载安装包： ```bash cd /tmp # 请从 https://go.dev/dl/页面中查</description></item><item><title>weak</title><link>https://before80.github.io/go_docs/stdLib/weak/</link><pubDate>Wed, 02 Apr 2025 16:15:43 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/weak/</guid><description>原文：https://pkg.go.dev/weak@go1.24.2 注意 ​ 从go1.24.0开始才可以使用该包。 Overview Package weak provides ways to safely reference memory weakly, that is, without</description></item><item><title>pq</title><link>https://before80.github.io/go_docs/asu/medium/database/pq/</link><pubDate>Sat, 15 Feb 2025 16:47:34 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/medium/database/pq/</guid><description>原文： 收录该文档时间： 2025-02-15T16:47:34+08:00</description></item><item><title>mysql</title><link>https://before80.github.io/go_docs/asu/medium/database/mysql/</link><pubDate>Sat, 15 Feb 2025 16:46:59 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/medium/database/mysql/</guid><description>驱动程序 Go语言中的数据类型与MySQL的数据类型</description></item><item><title>server_api</title><link>https://before80.github.io/go_docs/goconvey/lib/web/server_api/</link><pubDate>Sun, 15 Dec 2024 21:21:34 +0800</pubDate><guid>https://before80.github.io/go_docs/goconvey/lib/web/server_api/</guid><description>原文：https://pkg.go.dev/github.com/smartystreets/goconvey@v1.8.1/web/ser</description></item><item><title>gotest</title><link>https://before80.github.io/go_docs/goconvey/lib/convey/gotest/</link><pubDate>Sun, 15 Dec 2024 21:19:36 +0800</pubDate><guid>https://before80.github.io/go_docs/goconvey/lib/convey/gotest/</guid><description>原文：https://pkg.go.dev/github.com/smartystreets/goconvey@v1.8.1/convey/</description></item><item><title>Home - 首页</title><link>https://before80.github.io/go_docs/goconvey/home/</link><pubDate>Sun, 15 Dec 2024 11:17:39 +0800</pubDate><guid>https://before80.github.io/go_docs/goconvey/home/</guid><description>原文：https://github.com/smartystreets/goconvey/wiki 收录该文档时间： 2024-12-15T11:17:39+08:00 Home - 首页 Elmar Hinz edited this page on Feb 5,</description></item><item><title>assert</title><link>https://before80.github.io/go_docs/testify/assert/</link><pubDate>Sun, 15 Dec 2024 11:07:36 +0800</pubDate><guid>https://before80.github.io/go_docs/testify/assert/</guid><description>原文：https://pkg.go.dev/github.com/stretchr/testify/assert 收录该文档时间： 2024-12-15T11:07:36+08:00 版本：Ve</description></item><item><title>dlv_version</title><link>https://before80.github.io/go_docs/delve/usage/dlv_version/</link><pubDate>Mon, 09 Dec 2024 08:06:54 +0800</pubDate><guid>https://before80.github.io/go_docs/delve/usage/dlv_version/</guid><description>原文：https://github.com/go-delve/delve/blob/master/Documentation/usage/d</description></item><item><title>dlv_trace</title><link>https://before80.github.io/go_docs/delve/usage/dlv_trace/</link><pubDate>Mon, 09 Dec 2024 08:06:45 +0800</pubDate><guid>https://before80.github.io/go_docs/delve/usage/dlv_trace/</guid><description>原文：https://github.com/go-delve/delve/blob/master/Documentation/usage/d</description></item><item><title>dlv_test</title><link>https://before80.github.io/go_docs/delve/usage/dlv_test/</link><pubDate>Mon, 09 Dec 2024 08:06:34 +0800</pubDate><guid>https://before80.github.io/go_docs/delve/usage/dlv_test/</guid><description>原文：https://github.com/go-delve/delve/blob/master/Documentation/usage/d</description></item><item><title>dlv_run</title><link>https://before80.github.io/go_docs/delve/usage/dlv_run/</link><pubDate>Mon, 09 Dec 2024 08:06:27 +0800</pubDate><guid>https://before80.github.io/go_docs/delve/usage/dlv_run/</guid><description>原文：https://github.com/go-delve/delve/blob/master/Documentation/usage/d</description></item><item><title>dlv_relay</title><link>https://before80.github.io/go_docs/delve/usage/dlv_relay/</link><pubDate>Mon, 09 Dec 2024 08:06:19 +0800</pubDate><guid>https://before80.github.io/go_docs/delve/usage/dlv_relay/</guid><description>原文：https://github.com/go-delve/delve/blob/master/Documentation/usage/d</description></item><item><title>dlv_redirect</title><link>https://before80.github.io/go_docs/delve/usage/dlv_redirect/</link><pubDate>Mon, 09 Dec 2024 08:06:10 +0800</pubDate><guid>https://before80.github.io/go_docs/delve/usage/dlv_redirect/</guid><description>原文：https://github.com/go-delve/delve/blob/master/Documentation/usage/d</description></item><item><title>dlv_log</title><link>https://before80.github.io/go_docs/delve/usage/dlv_log/</link><pubDate>Mon, 09 Dec 2024 08:06:01 +0800</pubDate><guid>https://before80.github.io/go_docs/delve/usage/dlv_log/</guid><description>原文：https://github.com/go-delve/delve/blob/master/Documentation/usage/d</description></item><item><title>dlv_exec</title><link>https://before80.github.io/go_docs/delve/usage/dlv_exec/</link><pubDate>Mon, 09 Dec 2024 08:05:52 +0800</pubDate><guid>https://before80.github.io/go_docs/delve/usage/dlv_exec/</guid><description>原文：https://github.com/go-delve/delve/blob/master/Documentation/usage/d</description></item><item><title>dlv_debug</title><link>https://before80.github.io/go_docs/delve/usage/dlv_debug/</link><pubDate>Mon, 09 Dec 2024 08:05:43 +0800</pubDate><guid>https://before80.github.io/go_docs/delve/usage/dlv_debug/</guid><description>原文：https://github.com/go-delve/delve/blob/master/Documentation/usage/d</description></item><item><title>dlv_dap</title><link>https://before80.github.io/go_docs/delve/usage/dlv_dap/</link><pubDate>Mon, 09 Dec 2024 08:05:37 +0800</pubDate><guid>https://before80.github.io/go_docs/delve/usage/dlv_dap/</guid><description>原文：https://github.com/go-delve/delve/blob/master/Documentation/usage/d</description></item><item><title>dlv_core</title><link>https://before80.github.io/go_docs/delve/usage/dlv_core/</link><pubDate>Mon, 09 Dec 2024 08:05:27 +0800</pubDate><guid>https://before80.github.io/go_docs/delve/usage/dlv_core/</guid><description>原文：https://github.com/go-delve/delve/blob/master/Documentation/usage/d</description></item><item><title>dlv_connect</title><link>https://before80.github.io/go_docs/delve/usage/dlv_connect/</link><pubDate>Mon, 09 Dec 2024 08:05:19 +0800</pubDate><guid>https://before80.github.io/go_docs/delve/usage/dlv_connect/</guid><description>原文：https://github.com/go-delve/delve/blob/master/Documentation/usage/d</description></item><item><title>dlv_backend</title><link>https://before80.github.io/go_docs/delve/usage/dlv_backend/</link><pubDate>Mon, 09 Dec 2024 08:05:05 +0800</pubDate><guid>https://before80.github.io/go_docs/delve/usage/dlv_backend/</guid><description>原文：https://github.com/go-delve/delve/blob/master/Documentation/usage/d</description></item><item><title>dlv_attach</title><link>https://before80.github.io/go_docs/delve/usage/dlv_attach/</link><pubDate>Mon, 09 Dec 2024 08:04:55 +0800</pubDate><guid>https://before80.github.io/go_docs/delve/usage/dlv_attach/</guid><description>原文：https://github.com/go-delve/delve/blob/master/Documentation/usage/d</description></item><item><title>dlv</title><link>https://before80.github.io/go_docs/delve/usage/dlv/</link><pubDate>Mon, 09 Dec 2024 08:04:45 +0800</pubDate><guid>https://before80.github.io/go_docs/delve/usage/dlv/</guid><description>原文：https://github.com/go-delve/delve/blob/master/Documentation/usage/d</description></item><item><title>portnotes</title><link>https://before80.github.io/go_docs/delve/internal/portnotes/</link><pubDate>Mon, 09 Dec 2024 08:03:53 +0800</pubDate><guid>https://before80.github.io/go_docs/delve/internal/portnotes/</guid><description>原文：https://github.com/go-delve/delve/blob/master/Documentation/interna</description></item><item><title>路径替换</title><link>https://before80.github.io/go_docs/delve/cli/substitutepath/</link><pubDate>Mon, 09 Dec 2024 08:00:12 +0800</pubDate><guid>https://before80.github.io/go_docs/delve/cli/substitutepath/</guid><description>原文：https://github.com/go-delve/delve/blob/master/Documentation/cli/sub</description></item><item><title>starlark</title><link>https://before80.github.io/go_docs/delve/cli/starlark/</link><pubDate>Mon, 09 Dec 2024 07:59:50 +0800</pubDate><guid>https://before80.github.io/go_docs/delve/cli/starlark/</guid><description>原文：https://github.com/go-delve/delve/blob/master/Documentation/cli/sta</description></item><item><title>位置说明符</title><link>https://before80.github.io/go_docs/delve/cli/locspec/</link><pubDate>Mon, 09 Dec 2024 07:59:34 +0800</pubDate><guid>https://before80.github.io/go_docs/delve/cli/locspec/</guid><description>原文：https://github.com/go-delve/delve/blob/master/Documentation/cli/loc</description></item><item><title>快速入门</title><link>https://before80.github.io/go_docs/delve/cli/getting-started/</link><pubDate>Mon, 09 Dec 2024 07:59:19 +0800</pubDate><guid>https://before80.github.io/go_docs/delve/cli/getting-started/</guid><description>原文：https://github.com/go-delve/delve/blob/master/Documentation/cli/get</description></item><item><title>表达式</title><link>https://before80.github.io/go_docs/delve/cli/expr/</link><pubDate>Mon, 09 Dec 2024 07:59:02 +0800</pubDate><guid>https://before80.github.io/go_docs/delve/cli/expr/</guid><description>原文：https://github.com/go-delve/delve/blob/master/Documentation/cli/exp</description></item><item><title>如何编写 Delve 客户端——非正式指南</title><link>https://before80.github.io/go_docs/delve/api/clienthowto/</link><pubDate>Mon, 09 Dec 2024 07:57:43 +0800</pubDate><guid>https://before80.github.io/go_docs/delve/api/clienthowto/</guid><description>原文：https://github.com/go-delve/delve/blob/master/Documentation/api/Cli</description></item><item><title>arraystack</title><link>https://before80.github.io/go_docs/thirdPkg/gods/stacks/arraystack/</link><pubDate>Sat, 07 Dec 2024 11:55:05 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/gods/stacks/arraystack/</guid><description>原文：https://pkg.go.dev/github.com/emirpasic/gods/v2@v2.0.0-alpha/stacks</description></item><item><title>utils</title><link>https://before80.github.io/go_docs/thirdPkg/gods/utils/</link><pubDate>Sat, 07 Dec 2024 11:10:14 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/gods/utils/</guid><description>原文：https://pkg.go.dev/github.com/emirpasic/gods/v2@v2.0.0-alpha/utils 收</description></item><item><title>avltree</title><link>https://before80.github.io/go_docs/thirdPkg/gods/trees/avltree/</link><pubDate>Sat, 07 Dec 2024 11:09:26 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/gods/trees/avltree/</guid><description>原文：https://pkg.go.dev/github.com/emirpasic/gods/v2@v2.0.0-alpha/trees/</description></item><item><title>testutils</title><link>https://before80.github.io/go_docs/thirdPkg/gods/testutils/</link><pubDate>Sat, 07 Dec 2024 11:08:59 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/gods/testutils/</guid><description>原文：https://pkg.go.dev/github.com/emirpasic/gods/v2@v2.0.0-alpha/testut</description></item><item><title>hashset</title><link>https://before80.github.io/go_docs/thirdPkg/gods/sets/hashset/</link><pubDate>Sat, 07 Dec 2024 11:08:05 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/gods/sets/hashset/</guid><description>原文：https://pkg.go.dev/github.com/emirpasic/gods/v2@v2.0.0-alpha/sets/h</description></item><item><title>arrayqueue</title><link>https://before80.github.io/go_docs/thirdPkg/gods/queues/arrayqueue/</link><pubDate>Sat, 07 Dec 2024 11:06:50 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/gods/queues/arrayqueue/</guid><description>原文：https://pkg.go.dev/github.com/emirpasic/gods/v2@v2.0.0-alpha/queues</description></item><item><title>hashbidimap</title><link>https://before80.github.io/go_docs/thirdPkg/gods/maps/hashbidimap/</link><pubDate>Sat, 07 Dec 2024 11:03:19 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/gods/maps/hashbidimap/</guid><description>原文：https://pkg.go.dev/github.com/emirpasic/gods/v2@v2.0.0-alpha/maps/h</description></item><item><title>arraylist</title><link>https://before80.github.io/go_docs/thirdPkg/gods/lists/arraylist/</link><pubDate>Sat, 07 Dec 2024 11:01:46 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/gods/lists/arraylist/</guid><description>原文：https://pkg.go.dev/github.com/emirpasic/gods/v2@v2.0.0-alpha/lists/</description></item><item><title>常见问题</title><link>https://before80.github.io/go_docs/rod/doc/res/faq/</link><pubDate>Thu, 21 Nov 2024 08:11:50 +0800</pubDate><guid>https://before80.github.io/go_docs/rod/doc/res/faq/</guid><description>原文：https://go-rod.github.io/i18n/zh-CN/#/faq/README 收录该文档时间： 2024-11-21T08:11:50+08:00 常见问题 为什么选择 Rod</description></item><item><title>API 文档</title><link>https://before80.github.io/go_docs/rod/doc/res/api-reference/</link><pubDate>Thu, 21 Nov 2024 08:11:23 +0800</pubDate><guid>https://before80.github.io/go_docs/rod/doc/res/api-reference/</guid><description>原文：https://go-rod.github.io/i18n/zh-CN/#/api-reference 收录该文档时间： 2024-11-21T08:11:23+08:00 API 文档 rod: 主包 defaults:</description></item><item><title>unique</title><link>https://before80.github.io/go_docs/stdLib/unique/</link><pubDate>Fri, 06 Sep 2024 11:48:45 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/unique/</guid><description>原文：https://pkg.go.dev/unique@go1.24.2 注意 ​ 从go1.23.0开始才可以使用该包。 Overview The unique package provides facilities for canonicalizing (&amp;ldquo;interning&amp;rdquo;) comparable values.</description></item><item><title>structs</title><link>https://before80.github.io/go_docs/stdLib/structs/</link><pubDate>Fri, 06 Sep 2024 10:46:23 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/structs/</guid><description>原文：https://pkg.go.dev/structs@go1.24.2 注意 ​ 从go1.23.0开始才可以使用该包。 Overview Package structs defines marker types that can be used</description></item><item><title>iter</title><link>https://before80.github.io/go_docs/stdLib/iter/</link><pubDate>Thu, 05 Sep 2024 11:11:18 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/iter/</guid><description>原文：https://pkg.go.dev/iter@go1.24.2 注意 ​ 从go1.23.0开始才有该包。 Package iter provides basic definitions and operations related to iterators over sequences. ​ iter 包提</description></item><item><title>fuzz</title><link>https://before80.github.io/go_docs/comm/Go/basic/testings/fuzz/</link><pubDate>Tue, 20 Aug 2024 12:56:59 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Go/basic/testings/fuzz/</guid><description/></item><item><title>example</title><link>https://before80.github.io/go_docs/comm/Go/basic/testings/example/</link><pubDate>Tue, 20 Aug 2024 12:56:41 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Go/basic/testings/example/</guid><description/></item><item><title>benchmark</title><link>https://before80.github.io/go_docs/comm/Go/basic/testings/benchmark/</link><pubDate>Tue, 20 Aug 2024 12:56:34 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Go/basic/testings/benchmark/</guid><description/></item><item><title>单元测试</title><link>https://before80.github.io/go_docs/comm/Go/basic/testings/unit/</link><pubDate>Tue, 20 Aug 2024 12:56:24 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Go/basic/testings/unit/</guid><description/></item><item><title>map</title><link>https://before80.github.io/go_docs/comm/Go/basic/datastructures/map/</link><pubDate>Mon, 19 Aug 2024 19:27:33 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Go/basic/datastructures/map/</guid><description>说明 ​ 以下实例代码中： ​ verbs的定义是：var verbs = []string{&amp;quot;T&amp;quot;, &amp;quot;v&amp;quot;, &amp;quot;#v&amp;quot;} ​ mfp来自：&amp;quot;github.com/before80/utils/m</description></item><item><title>codestyle</title><link>https://before80.github.io/go_docs/comm/Cpp/middle/codestyle/</link><pubDate>Mon, 19 Aug 2024 09:53:07 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Cpp/middle/codestyle/</guid><description/></item><item><title>codestyle</title><link>https://before80.github.io/go_docs/comm/Csharp/middle/codestyle/</link><pubDate>Mon, 19 Aug 2024 09:53:07 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Csharp/middle/codestyle/</guid><description/></item><item><title>codestyle</title><link>https://before80.github.io/go_docs/comm/Erlang/middle/codestyle/</link><pubDate>Mon, 19 Aug 2024 09:53:07 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Erlang/middle/codestyle/</guid><description/></item><item><title>codestyle</title><link>https://before80.github.io/go_docs/comm/Go/middle/codestyle/</link><pubDate>Mon, 19 Aug 2024 09:53:07 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Go/middle/codestyle/</guid><description/></item><item><title>codestyle</title><link>https://before80.github.io/go_docs/comm/Java/middle/codestyle/</link><pubDate>Mon, 19 Aug 2024 09:53:07 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Java/middle/codestyle/</guid><description/></item><item><title>codestyle</title><link>https://before80.github.io/go_docs/comm/Js/middle/codestyle/</link><pubDate>Mon, 19 Aug 2024 09:53:07 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Js/middle/codestyle/</guid><description/></item><item><title>codestyle</title><link>https://before80.github.io/go_docs/comm/PHP/middle/codestyle/</link><pubDate>Mon, 19 Aug 2024 09:53:07 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/PHP/middle/codestyle/</guid><description/></item><item><title>codestyle</title><link>https://before80.github.io/go_docs/comm/Python/middle/codestyle/</link><pubDate>Mon, 19 Aug 2024 09:53:07 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Python/middle/codestyle/</guid><description/></item><item><title>codestyle</title><link>https://before80.github.io/go_docs/comm/Ruby/middle/codestyle/</link><pubDate>Mon, 19 Aug 2024 09:53:07 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ruby/middle/codestyle/</guid><description/></item><item><title>codestyle</title><link>https://before80.github.io/go_docs/comm/Rust/middle/codestyle/</link><pubDate>Mon, 19 Aug 2024 09:53:07 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Rust/middle/codestyle/</guid><description/></item><item><title>codestyle</title><link>https://before80.github.io/go_docs/comm/Ts/middle/codestyle/</link><pubDate>Mon, 19 Aug 2024 09:53:07 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ts/middle/codestyle/</guid><description/></item><item><title>types</title><link>https://before80.github.io/go_docs/comm/Cpp/basic/types/</link><pubDate>Mon, 19 Aug 2024 09:31:46 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Cpp/basic/types/</guid><description/></item><item><title>types</title><link>https://before80.github.io/go_docs/comm/Csharp/basic/types/</link><pubDate>Mon, 19 Aug 2024 09:31:46 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Csharp/basic/types/</guid><description/></item><item><title>types</title><link>https://before80.github.io/go_docs/comm/Erlang/basic/types/</link><pubDate>Mon, 19 Aug 2024 09:31:46 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Erlang/basic/types/</guid><description/></item><item><title>types</title><link>https://before80.github.io/go_docs/comm/Java/basic/types/</link><pubDate>Mon, 19 Aug 2024 09:31:46 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Java/basic/types/</guid><description/></item><item><title>types</title><link>https://before80.github.io/go_docs/comm/Js/basic/types/</link><pubDate>Mon, 19 Aug 2024 09:31:46 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Js/basic/types/</guid><description/></item><item><title>types</title><link>https://before80.github.io/go_docs/comm/PHP/basic/types/</link><pubDate>Mon, 19 Aug 2024 09:31:46 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/PHP/basic/types/</guid><description/></item><item><title>types</title><link>https://before80.github.io/go_docs/comm/Python/basic/types/</link><pubDate>Mon, 19 Aug 2024 09:31:46 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Python/basic/types/</guid><description/></item><item><title>types</title><link>https://before80.github.io/go_docs/comm/Ruby/basic/types/</link><pubDate>Mon, 19 Aug 2024 09:31:46 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ruby/basic/types/</guid><description/></item><item><title>types</title><link>https://before80.github.io/go_docs/comm/Rust/basic/types/</link><pubDate>Mon, 19 Aug 2024 09:31:46 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Rust/basic/types/</guid><description/></item><item><title>types</title><link>https://before80.github.io/go_docs/comm/Ts/basic/types/</link><pubDate>Mon, 19 Aug 2024 09:31:46 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ts/basic/types/</guid><description/></item><item><title>MySQL</title><link>https://before80.github.io/go_docs/asu/refs/mysql/</link><pubDate>Mon, 29 Jul 2024 10:13:55 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/refs/mysql/</guid><description>安装MySQL 使用Docker安装 事务的4大特性</description></item><item><title>工具软件</title><link>https://before80.github.io/go_docs/asu/refs/tools/</link><pubDate>Mon, 29 Jul 2024 08:33:05 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/refs/tools/</guid><description>测试 ab 访问 curl docker 命令</description></item><item><title>第三方包</title><link>https://before80.github.io/go_docs/asu/refs/pkgs/</link><pubDate>Mon, 29 Jul 2024 08:05:29 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/refs/pkgs/</guid><description>框架 web框架 gin https://github.com/gin-gonic/gin Gin is a web framework written in Go. It features a martini-like API with performance that is up to 40 times faster thanks to httprouter. If you need performance and good productivity, you will love Gin. 概况型 数据类型 constraints import方式：&amp;ldquo;g</description></item><item><title>protobuf</title><link>https://before80.github.io/go_docs/asu/medium/protobuf/</link><pubDate>Wed, 17 Jul 2024 12:16:14 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/medium/protobuf/</guid><description/></item><item><title>grpc</title><link>https://before80.github.io/go_docs/asu/medium/grpc/</link><pubDate>Wed, 17 Jul 2024 12:15:50 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/medium/grpc/</guid><description/></item><item><title>callCCode</title><link>https://before80.github.io/go_docs/asu/medium/callCCode/</link><pubDate>Wed, 17 Jul 2024 12:14:23 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/medium/callCCode/</guid><description/></item><item><title>goCompiler</title><link>https://before80.github.io/go_docs/asu/advanced/goCompiler/</link><pubDate>Wed, 17 Jul 2024 12:11:26 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/advanced/goCompiler/</guid><description/></item><item><title>stackHeap</title><link>https://before80.github.io/go_docs/asu/advanced/stackHeap/</link><pubDate>Wed, 17 Jul 2024 12:10:54 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/advanced/stackHeap/</guid><description/></item><item><title>memoryLeak</title><link>https://before80.github.io/go_docs/asu/advanced/memoryLeak/</link><pubDate>Wed, 17 Jul 2024 12:10:25 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/advanced/memoryLeak/</guid><description/></item><item><title>gc</title><link>https://before80.github.io/go_docs/asu/advanced/gc/</link><pubDate>Wed, 17 Jul 2024 12:09:35 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/advanced/gc/</guid><description/></item><item><title>nil</title><link>https://before80.github.io/go_docs/asu/basic/types/nil/</link><pubDate>Sat, 13 Jul 2024 14:14:47 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/types/nil/</guid><description>注意 ​ nil并不是类型的一种！ 哪些类型的值的默认值是nil？ slice pointer map channel interface func 共6种预定义类型。</description></item><item><title>channels</title><link>https://before80.github.io/go_docs/asu/advanced/channels/</link><pubDate>Sat, 13 Jul 2024 13:38:18 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/advanced/channels/</guid><description/></item><item><title>greedy</title><link>https://before80.github.io/go_docs/asu/medium/algorithms/greedy/</link><pubDate>Sat, 13 Jul 2024 11:24:47 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/medium/algorithms/greedy/</guid><description/></item><item><title>dynamic</title><link>https://before80.github.io/go_docs/asu/medium/algorithms/dynamic/</link><pubDate>Sat, 13 Jul 2024 11:24:15 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/medium/algorithms/dynamic/</guid><description/></item><item><title>backtrack</title><link>https://before80.github.io/go_docs/asu/medium/algorithms/backtrack/</link><pubDate>Sat, 13 Jul 2024 11:23:43 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/medium/algorithms/backtrack/</guid><description/></item><item><title>divide</title><link>https://before80.github.io/go_docs/asu/medium/algorithms/divide/</link><pubDate>Sat, 13 Jul 2024 11:23:11 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/medium/algorithms/divide/</guid><description/></item><item><title>sort</title><link>https://before80.github.io/go_docs/asu/medium/algorithms/sort/</link><pubDate>Sat, 13 Jul 2024 11:22:47 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/medium/algorithms/sort/</guid><description/></item><item><title>search</title><link>https://before80.github.io/go_docs/asu/medium/algorithms/search/</link><pubDate>Sat, 13 Jul 2024 11:22:34 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/medium/algorithms/search/</guid><description/></item><item><title>graph</title><link>https://before80.github.io/go_docs/asu/medium/datastructure/graph/</link><pubDate>Sat, 13 Jul 2024 11:21:17 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/medium/datastructure/graph/</guid><description/></item><item><title>tree</title><link>https://before80.github.io/go_docs/asu/medium/datastructure/tree/</link><pubDate>Sat, 13 Jul 2024 11:20:57 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/medium/datastructure/tree/</guid><description/></item><item><title>queue</title><link>https://before80.github.io/go_docs/asu/medium/datastructure/queue/</link><pubDate>Sat, 13 Jul 2024 11:20:29 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/medium/datastructure/queue/</guid><description/></item><item><title>stack</title><link>https://before80.github.io/go_docs/asu/medium/datastructure/stack/</link><pubDate>Sat, 13 Jul 2024 11:20:22 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/medium/datastructure/stack/</guid><description/></item><item><title>hash</title><link>https://before80.github.io/go_docs/asu/medium/datastructure/hash/</link><pubDate>Sat, 13 Jul 2024 11:20:04 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/medium/datastructure/hash/</guid><description/></item><item><title>link</title><link>https://before80.github.io/go_docs/asu/medium/datastructure/link/</link><pubDate>Sat, 13 Jul 2024 11:19:58 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/medium/datastructure/link/</guid><description/></item><item><title>array</title><link>https://before80.github.io/go_docs/asu/medium/datastructure/array/</link><pubDate>Sat, 13 Jul 2024 11:19:48 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/medium/datastructure/array/</guid><description/></item><item><title>uploadfiles</title><link>https://before80.github.io/go_docs/asu/medium/uploadfiles/</link><pubDate>Sat, 13 Jul 2024 11:18:16 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/medium/uploadfiles/</guid><description/></item><item><title>files</title><link>https://before80.github.io/go_docs/asu/medium/files/</link><pubDate>Sat, 13 Jul 2024 11:17:58 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/medium/files/</guid><description/></item><item><title>nethttp</title><link>https://before80.github.io/go_docs/asu/medium/nethttp/</link><pubDate>Sat, 13 Jul 2024 11:17:47 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/medium/nethttp/</guid><description/></item><item><title>communication</title><link>https://before80.github.io/go_docs/asu/medium/communication/</link><pubDate>Sat, 13 Jul 2024 11:17:32 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/medium/communication/</guid><description/></item><item><title>concurrency</title><link>https://before80.github.io/go_docs/asu/medium/concurrency/</link><pubDate>Sat, 13 Jul 2024 11:16:20 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/medium/concurrency/</guid><description/></item><item><title>lock</title><link>https://before80.github.io/go_docs/asu/medium/lock/</link><pubDate>Sat, 13 Jul 2024 11:15:51 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/medium/lock/</guid><description/></item><item><title>trace文档</title><link>https://before80.github.io/go_docs/thirdPkg/otel-trace/trace_docs/</link><pubDate>Thu, 28 Mar 2024 15:17:42 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/otel-trace/trace_docs/</guid><description>原文：https://pkg.go.dev/go.opentelemetry.io/otel/trace@v1.24.0 Overview 概述 API Implementations - API 实现 Package</description></item><item><title>gvalid</title><link>https://before80.github.io/go_docs/goframe/v2/util/gvalid/</link><pubDate>Thu, 21 Mar 2024 18:00:16 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/util/gvalid/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/util/gvalid Package gvalid implements powerful and useful data/form validation</description></item><item><title>gutil</title><link>https://before80.github.io/go_docs/goframe/v2/util/gutil/</link><pubDate>Thu, 21 Mar 2024 18:00:04 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/util/gutil/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/util/gutil Overview 概述 Package gutil provides utility functions. ​</description></item><item><title>guid</title><link>https://before80.github.io/go_docs/goframe/v2/util/guid/</link><pubDate>Thu, 21 Mar 2024 17:59:59 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/util/guid/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/util/guid Package guid provides simple and high performance unique id generation</description></item><item><title>gtag</title><link>https://before80.github.io/go_docs/goframe/v2/util/gtag/</link><pubDate>Thu, 21 Mar 2024 17:59:54 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/util/gtag/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/util/gtag Package gtag providing tag content storing for struct. ​ 软</description></item><item><title>grand</title><link>https://before80.github.io/go_docs/goframe/v2/util/grand/</link><pubDate>Thu, 21 Mar 2024 17:59:49 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/util/grand/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/util/grand Package grand provides high performance random bytes/number/string generation functionality.</description></item><item><title>gpage</title><link>https://before80.github.io/go_docs/goframe/v2/util/gpage/</link><pubDate>Thu, 21 Mar 2024 17:59:43 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/util/gpage/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/util/gpage Package gpage provides useful paging functionality for web pages.</description></item><item><title>gmode</title><link>https://before80.github.io/go_docs/goframe/v2/util/gmode/</link><pubDate>Thu, 21 Mar 2024 17:59:37 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/util/gmode/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/util/gmode Package gmode provides release mode management for project. ​</description></item><item><title>gmeta</title><link>https://before80.github.io/go_docs/goframe/v2/util/gmeta/</link><pubDate>Thu, 21 Mar 2024 17:59:27 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/util/gmeta/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/util/gmeta Package gmeta provides embedded meta data feature for struct.</description></item><item><title>gconv</title><link>https://before80.github.io/go_docs/goframe/v2/util/gconv/</link><pubDate>Thu, 21 Mar 2024 17:59:20 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/util/gconv/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/util/gconv Package gconv implements powerful and convenient converting functionality for</description></item><item><title>gstr</title><link>https://before80.github.io/go_docs/goframe/v2/text/gstr/</link><pubDate>Thu, 21 Mar 2024 17:58:55 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/text/gstr/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/text/gstr Package gstr provides functions for string handling. ​ 软件</description></item><item><title>gregex</title><link>https://before80.github.io/go_docs/goframe/v2/text/gregex/</link><pubDate>Thu, 21 Mar 2024 17:58:48 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/text/gregex/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/text/gregex Package gregex provides high performance API for regular</description></item><item><title>gtest</title><link>https://before80.github.io/go_docs/goframe/v2/test/gtest/</link><pubDate>Thu, 21 Mar 2024 17:58:09 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/test/gtest/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/test/gtest Package gtest provides convenient test utilities for unit testing.</description></item><item><title>gview</title><link>https://before80.github.io/go_docs/goframe/v2/os/gview/</link><pubDate>Thu, 21 Mar 2024 17:57:48 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/os/gview/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/os/gview Package gview implements a template engine based on text/template. ​ 软</description></item><item><title>gtimer</title><link>https://before80.github.io/go_docs/goframe/v2/os/gtimer/</link><pubDate>Thu, 21 Mar 2024 17:57:40 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/os/gtimer/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/os/gtimer Package gtimer implements timer for interval/delayed jobs running and management.</description></item><item><title>gtime</title><link>https://before80.github.io/go_docs/goframe/v2/os/gtime/</link><pubDate>Thu, 21 Mar 2024 17:57:36 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/os/gtime/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/os/gtime Package gtime provides functionality for measuring and displaying time. ​ 软</description></item><item><title>gstructs</title><link>https://before80.github.io/go_docs/goframe/v2/os/gstructs/</link><pubDate>Thu, 21 Mar 2024 17:57:28 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/os/gstructs/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/os/gstructs Package gstructs provides functions for struct information retrieving.</description></item><item><title>gspath</title><link>https://before80.github.io/go_docs/goframe/v2/os/gspath/</link><pubDate>Thu, 21 Mar 2024 17:57:18 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/os/gspath/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/os/gspath Package gspath implements file index and search for folders. ​</description></item><item><title>gsession</title><link>https://before80.github.io/go_docs/goframe/v2/os/gsession/</link><pubDate>Thu, 21 Mar 2024 17:57:06 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/os/gsession/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/os/gsession Package gsession implements manager and storage features for</description></item><item><title>grpool</title><link>https://before80.github.io/go_docs/goframe/v2/os/grpool/</link><pubDate>Thu, 21 Mar 2024 17:56:58 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/os/grpool/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/os/grpool Package grpool implements a goroutine reusable pool. ​ 软件</description></item><item><title>gres</title><link>https://before80.github.io/go_docs/goframe/v2/os/gres/</link><pubDate>Thu, 21 Mar 2024 17:56:51 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/os/gres/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/os/gres Package gres provides resource management and packing/unpacking feature between files and bytes.</description></item><item><title>gproc</title><link>https://before80.github.io/go_docs/goframe/v2/os/gproc/</link><pubDate>Thu, 21 Mar 2024 17:56:37 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/os/gproc/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/os/gproc Package gproc implements management and communication for processes. ​ 软件</description></item><item><title>gmutex</title><link>https://before80.github.io/go_docs/goframe/v2/os/gmutex/</link><pubDate>Thu, 21 Mar 2024 17:56:28 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/os/gmutex/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/os/gmutex Package gmutex inherits and extends sync.Mutex and sync.RWMutex with more</description></item><item><title>gmlock</title><link>https://before80.github.io/go_docs/goframe/v2/os/gmlock/</link><pubDate>Thu, 21 Mar 2024 17:56:11 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/os/gmlock/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/os/gmlock Package gmlock implements a concurrent-safe memory-based locker. ​ 软件</description></item><item><title>glog</title><link>https://before80.github.io/go_docs/goframe/v2/os/glog/</link><pubDate>Thu, 21 Mar 2024 17:56:00 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/os/glog/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/os/glog Package glog implements powerful and easy-to-use leveled logging functionality. ​ 软件</description></item><item><title>gfsnotify</title><link>https://before80.github.io/go_docs/goframe/v2/os/gfsnotify/</link><pubDate>Thu, 21 Mar 2024 17:55:52 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/os/gfsnotify/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/os/gfsnotify Package gfsnotify provides a platform-independent interface for</description></item><item><title>gfpool</title><link>https://before80.github.io/go_docs/goframe/v2/os/gfpool/</link><pubDate>Thu, 21 Mar 2024 17:55:35 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/os/gfpool/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/os/gfpool Package gfpool provides io-reusable pool for file pointer. ​ 软</description></item><item><title>gfile</title><link>https://before80.github.io/go_docs/goframe/v2/os/gfile/</link><pubDate>Thu, 21 Mar 2024 17:55:29 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/os/gfile/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/os/gfile Package gfile provides easy-to-use operations for file system. ​ 软件</description></item><item><title>genv</title><link>https://before80.github.io/go_docs/goframe/v2/os/genv/</link><pubDate>Thu, 21 Mar 2024 17:55:23 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/os/genv/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/os/genv Package genv provides operations for environment variables of system. ​ 软件</description></item><item><title>gctx</title><link>https://before80.github.io/go_docs/goframe/v2/os/gctx/</link><pubDate>Thu, 21 Mar 2024 17:55:11 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/os/gctx/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/os/gctx Package gctx wraps context.Context and provides extra context features. ​ 软件</description></item><item><title>gcron</title><link>https://before80.github.io/go_docs/goframe/v2/os/gcron/</link><pubDate>Thu, 21 Mar 2024 17:55:06 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/os/gcron/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/os/gcron Package gcron implements a cron pattern parser and job runner. ​</description></item><item><title>gcmd</title><link>https://before80.github.io/go_docs/goframe/v2/os/gcmd/</link><pubDate>Thu, 21 Mar 2024 17:54:54 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/os/gcmd/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/os/gcmd Package gcmd provides console operations, like options/arguments reading and command running. ​</description></item><item><title>gcfg</title><link>https://before80.github.io/go_docs/goframe/v2/os/gcfg/</link><pubDate>Thu, 21 Mar 2024 17:54:46 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/os/gcfg/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/os/gcfg Package gcfg provides reading, caching and managing for configuration. ​ 软件</description></item><item><title>gcache</title><link>https://before80.github.io/go_docs/goframe/v2/os/gcache/</link><pubDate>Thu, 21 Mar 2024 17:54:37 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/os/gcache/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/os/gcache Package gcache provides kinds of cache management for process. ​</description></item><item><title>gbuild</title><link>https://before80.github.io/go_docs/goframe/v2/os/gbuild/</link><pubDate>Thu, 21 Mar 2024 17:54:25 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/os/gbuild/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/os/gbuild Package gbuild manages the build-in variables from “gf</description></item><item><title>gudp</title><link>https://before80.github.io/go_docs/goframe/v2/net/gudp/</link><pubDate>Thu, 21 Mar 2024 17:53:58 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/net/gudp/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/net/gudp Package gudp provides UDP server and client implementations. ​ 软件</description></item><item><title>gtrace</title><link>https://before80.github.io/go_docs/goframe/v2/net/gtrace/</link><pubDate>Thu, 21 Mar 2024 17:53:48 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/net/gtrace/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/net/gtrace Package gtrace provides convenience wrapping functionality for tracing feature</description></item><item><title>gtcp</title><link>https://before80.github.io/go_docs/goframe/v2/net/gtcp/</link><pubDate>Thu, 21 Mar 2024 17:53:39 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/net/gtcp/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/net/gtcp Package gtcp provides TCP server and client implementations. ​ 软件</description></item><item><title>gsvc</title><link>https://before80.github.io/go_docs/goframe/v2/net/gsvc/</link><pubDate>Thu, 21 Mar 2024 17:53:32 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/net/gsvc/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/net/gsvc Package gsvc provides service registry and discovery definition. ​ 软件</description></item><item><title>gsel</title><link>https://before80.github.io/go_docs/goframe/v2/net/gsel/</link><pubDate>Thu, 21 Mar 2024 17:53:24 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/net/gsel/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/net/gsel Package gsel provides selector definition and implements. ​ 软件包</description></item><item><title>goai</title><link>https://before80.github.io/go_docs/goframe/v2/net/goai/</link><pubDate>Thu, 21 Mar 2024 17:53:15 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/net/goai/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/net/goai Package goai implements and provides document generating for OpenApi specification. ​</description></item><item><title>gipv6</title><link>https://before80.github.io/go_docs/goframe/v2/net/gipv6/</link><pubDate>Thu, 21 Mar 2024 17:53:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/net/gipv6/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/net/gipv6 Package gipv6 provides useful API for IPv6 address handling. ​</description></item><item><title>gipv4</title><link>https://before80.github.io/go_docs/goframe/v2/net/gipv4/</link><pubDate>Thu, 21 Mar 2024 17:53:01 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/net/gipv4/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/net/gipv4 Package gipv4 provides useful API for IPv4 address handling. ​</description></item><item><title>ghttp</title><link>https://before80.github.io/go_docs/goframe/v2/net/ghttp/</link><pubDate>Thu, 21 Mar 2024 17:52:53 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/net/ghttp/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/net/ghttp Package ghttp provides powerful http server and simple client implements.</description></item><item><title>gclient</title><link>https://before80.github.io/go_docs/goframe/v2/net/gclient/</link><pubDate>Thu, 21 Mar 2024 17:52:34 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/net/gclient/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/net/gclient Package gclient provides convenient http client functionalities. ​</description></item><item><title>gi18n</title><link>https://before80.github.io/go_docs/goframe/v2/i18n/gi18n/</link><pubDate>Thu, 21 Mar 2024 17:52:07 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/i18n/gi18n/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/i18n/gi18n Package gi18n implements internationalization and localization. ​ 软件</description></item><item><title>gins</title><link>https://before80.github.io/go_docs/goframe/v2/frame/gins/</link><pubDate>Thu, 21 Mar 2024 17:51:35 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/frame/gins/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/frame/gins Package gins provides instances and core components management. ​</description></item><item><title>g</title><link>https://before80.github.io/go_docs/goframe/v2/frame/g/</link><pubDate>Thu, 21 Mar 2024 17:51:29 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/frame/g/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/frame/g Package g provides commonly used type/function defines and coupled calling for creating</description></item><item><title>gerror</title><link>https://before80.github.io/go_docs/goframe/v2/errors/gerror/</link><pubDate>Thu, 21 Mar 2024 17:51:03 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/errors/gerror/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/errors/gerror Package gerror provides rich functionalities to</description></item><item><title>gcode</title><link>https://before80.github.io/go_docs/goframe/v2/errors/gcode/</link><pubDate>Thu, 21 Mar 2024 17:50:56 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/errors/gcode/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/errors/gcode Package gcode provides universal error code definition</description></item><item><title>gyaml</title><link>https://before80.github.io/go_docs/goframe/v2/encoding/gyaml/</link><pubDate>Thu, 21 Mar 2024 17:50:29 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/encoding/gyaml/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/encoding/gyaml Package gyaml provides accessing and</description></item><item><title>gxml</title><link>https://before80.github.io/go_docs/goframe/v2/encoding/gxml/</link><pubDate>Thu, 21 Mar 2024 17:50:21 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/encoding/gxml/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/encoding/gxml Package gxml provides accessing and converting</description></item><item><title>gurl</title><link>https://before80.github.io/go_docs/goframe/v2/encoding/gurl/</link><pubDate>Thu, 21 Mar 2024 17:50:13 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/encoding/gurl/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/encoding/gurl Package gurl provides useful API for</description></item><item><title>gtoml</title><link>https://before80.github.io/go_docs/goframe/v2/encoding/gtoml/</link><pubDate>Thu, 21 Mar 2024 17:50:06 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/encoding/gtoml/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/encoding/gtoml Package gtoml provides accessing and</description></item><item><title>gproperties</title><link>https://before80.github.io/go_docs/goframe/v2/encoding/gproperties/</link><pubDate>Thu, 21 Mar 2024 17:49:57 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/encoding/gproperties/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/encoding/gpropertie</description></item><item><title>gjson</title><link>https://before80.github.io/go_docs/goframe/v2/encoding/gjson/</link><pubDate>Thu, 21 Mar 2024 17:49:47 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/encoding/gjson/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/encoding/gjson Package gjson provides convenient API</description></item><item><title>gini</title><link>https://before80.github.io/go_docs/goframe/v2/encoding/gini/</link><pubDate>Thu, 21 Mar 2024 17:49:41 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/encoding/gini/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/encoding/gini Package gini provides accessing and converting</description></item><item><title>ghtml</title><link>https://before80.github.io/go_docs/goframe/v2/encoding/ghtml/</link><pubDate>Thu, 21 Mar 2024 17:49:34 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/encoding/ghtml/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/encoding/ghtml Package ghtml provides useful API</description></item><item><title>ghash</title><link>https://before80.github.io/go_docs/goframe/v2/encoding/ghash/</link><pubDate>Thu, 21 Mar 2024 17:49:28 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/encoding/ghash/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/encoding/ghash Package ghash provides some classic</description></item><item><title>gcompress</title><link>https://before80.github.io/go_docs/goframe/v2/encoding/gcompress/</link><pubDate>Thu, 21 Mar 2024 17:49:19 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/encoding/gcompress/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/encoding/gcompress Package</description></item><item><title>gcharset</title><link>https://before80.github.io/go_docs/goframe/v2/encoding/gcharset/</link><pubDate>Thu, 21 Mar 2024 17:49:10 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/encoding/gcharset/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/encoding/gcharset Package gcharset</description></item><item><title>gbinary</title><link>https://before80.github.io/go_docs/goframe/v2/encoding/gbinary/</link><pubDate>Thu, 21 Mar 2024 17:49:00 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/encoding/gbinary/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/encoding/gbinary Package gbinary provides</description></item><item><title>gbase64</title><link>https://before80.github.io/go_docs/goframe/v2/encoding/gbase64/</link><pubDate>Thu, 21 Mar 2024 17:48:52 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/encoding/gbase64/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/encoding/gbase64 Package gbase64 provides</description></item><item><title>gdebug</title><link>https://before80.github.io/go_docs/goframe/v2/debug/gdebug/</link><pubDate>Thu, 21 Mar 2024 17:48:17 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/debug/gdebug/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/debug/gdebug Package gdebug contains facilities for programs to</description></item><item><title>gdebug</title><link>https://before80.github.io/go_docs/goframe/v2/database/gdebug/</link><pubDate>Thu, 21 Mar 2024 17:47:51 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/database/gdebug/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/database/gredis Package gredis provides convenient</description></item><item><title>gredis</title><link>https://before80.github.io/go_docs/goframe/v2/database/gredis/</link><pubDate>Thu, 21 Mar 2024 17:47:42 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/database/gredis/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/debug/gdebug Package gdebug contains facilities for programs to</description></item><item><title>gdb</title><link>https://before80.github.io/go_docs/goframe/v2/database/gdb/</link><pubDate>Thu, 21 Mar 2024 17:47:34 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/database/gdb/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/database/gdb Package gdb provides ORM features for popular</description></item><item><title>gsha1</title><link>https://before80.github.io/go_docs/goframe/v2/crypto/gsha1/</link><pubDate>Thu, 21 Mar 2024 17:47:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/crypto/gsha1/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/crypto/gsha1 Package gsha1 provides useful API for SHA1</description></item><item><title>gmd5</title><link>https://before80.github.io/go_docs/goframe/v2/crypto/gmd5/</link><pubDate>Thu, 21 Mar 2024 17:46:49 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/crypto/gmd5/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/crypto/gmd5 Package gmd5 provides useful API for MD5 encryption</description></item><item><title>gdes</title><link>https://before80.github.io/go_docs/goframe/v2/crypto/gdes/</link><pubDate>Thu, 21 Mar 2024 17:46:43 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/crypto/gdes/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/crypto/gdes Overview 概述 Package gdes provides useful API</description></item><item><title>gcrc32</title><link>https://before80.github.io/go_docs/goframe/v2/crypto/gcrc32/</link><pubDate>Thu, 21 Mar 2024 17:46:34 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/crypto/gcrc32/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/crypto/gcrc32 Overview 概述 Package gcrc32 provides</description></item><item><title>gaes</title><link>https://before80.github.io/go_docs/goframe/v2/crypto/gaes/</link><pubDate>Thu, 21 Mar 2024 17:46:25 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/crypto/gaes/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/crypto/gaes Package gaes provides useful API for AES encryption/decryption</description></item><item><title>gvar</title><link>https://before80.github.io/go_docs/goframe/v2/container/gvar/</link><pubDate>Thu, 21 Mar 2024 17:45:43 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/container/gvar/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/container/gvar Package gvar provides an universal</description></item><item><title>gtype</title><link>https://before80.github.io/go_docs/goframe/v2/container/gtype/</link><pubDate>Thu, 21 Mar 2024 17:45:17 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/container/gtype/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/container/gtype Package gtype provides high</description></item><item><title>gtree</title><link>https://before80.github.io/go_docs/goframe/v2/container/gtree/</link><pubDate>Thu, 21 Mar 2024 17:45:11 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/container/gtree/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/container/gtree Package gtree provides concurrent-safe/unsafe</description></item><item><title>gset</title><link>https://before80.github.io/go_docs/goframe/v2/container/gset/</link><pubDate>Thu, 21 Mar 2024 17:45:04 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/container/gset/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/container/gset Package gset provides kinds of</description></item><item><title>gring</title><link>https://before80.github.io/go_docs/goframe/v2/container/gring/</link><pubDate>Thu, 21 Mar 2024 17:44:58 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/container/gring/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/container/gring Package gring provides a</description></item><item><title>gqueue</title><link>https://before80.github.io/go_docs/goframe/v2/container/gqueue/</link><pubDate>Thu, 21 Mar 2024 17:44:52 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/container/gqueue/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/container/gqueue Package gqueue provides</description></item><item><title>gpool</title><link>https://before80.github.io/go_docs/goframe/v2/container/gpool/</link><pubDate>Thu, 21 Mar 2024 17:44:43 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/container/gpool/</guid><description>原文： Package gpool provides object-reusable concurrent-safe pool. ​ 软件包 gpool 提供对象可重用的并发安全池。 常量 This section is empty. 变量 This section is empty. 函数 This section is empty. 类型 type ExpireFunc 1 type ExpireFunc func(interface{}) ExpireFunc Destruction function for object. ​ ExpireFunc 对象的销毁函数。 type</description></item><item><title>gmap</title><link>https://before80.github.io/go_docs/goframe/v2/container/gmap/</link><pubDate>Thu, 21 Mar 2024 17:44:36 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/container/gmap/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/container/gmap Overview 概述 Package gmap</description></item><item><title>glist</title><link>https://before80.github.io/go_docs/goframe/v2/container/glist/</link><pubDate>Thu, 21 Mar 2024 17:44:28 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/container/glist/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/container/glist Package glist provides most</description></item><item><title>garray</title><link>https://before80.github.io/go_docs/goframe/v2/container/garray/</link><pubDate>Thu, 21 Mar 2024 17:44:22 +0800</pubDate><guid>https://before80.github.io/go_docs/goframe/v2/container/garray/</guid><description>原文：https://pkg.go.dev/github.com/gogf/gf/v2@v2.6.4/container/garray Package garray provides</description></item><item><title>关键字</title><link>https://before80.github.io/go_docs/comm/basic/keywords/</link><pubDate>Thu, 14 Mar 2024 18:33:31 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/basic/keywords/</guid><description>原文： Go ​ Go目前有25个关键字。 ​ 来源：https://go.dev/ref/spec#Keywords 1 2 3 4 5 break default func interface select case defer go map struct chan else</description></item><item><title>Go和Python的基础语法</title><link>https://before80.github.io/go_docs/comm/basic/grammar/</link><pubDate>Fri, 01 Mar 2024 15:08:03 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/basic/grammar/</guid><description>Go和Python的基础语法 数据类型 ​ 既然说，计算机是用来处理人给的数据，那么我们就首先来看看这两种语言各自能处理哪些类型的数据吧。 Go的内</description></item><item><title>Adaptor</title><link>https://before80.github.io/go_docs/fiber/API/Middleware/Adaptor/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/Middleware/Adaptor/</guid><description>原文： https://docs.gofiber.io/api/middleware/adaptor Adaptor 适配器 Converter for net/http handlers to/from Fiber request handlers, special thanks to @arsmn! ​ net/http 处理程序到/从 Fiber 请求处理程序的转换器，特别感谢 @arsmn！ Signatures 签名 Name 名称 Signature 签名 Description 说明 HTTPHandler HTTPHandler(h http.Handler) fiber.Handler http.Handler -&amp;gt;</description></item><item><title>FAQ</title><link>https://before80.github.io/go_docs/fiber/Extra/FAQ/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/Extra/FAQ/</guid><description>原文： https://docs.gofiber.io/extra/faq 🤔 FAQ How should I structure my application? 我应该如何构建我的应用程序？ There is no definitive answer to this question. The answer depends on the scale of your application and the team that is involved. To be as flexible as possible, Fiber makes no assumptions in terms of structure. ​ 这个问题没有</description></item><item><title>Fiber</title><link>https://before80.github.io/go_docs/fiber/API/Fiber/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/Fiber/</guid><description>原文： https://docs.gofiber.io/api/fiber 📦 Fiber New 新 This method creates a new App named instance. You can pass optional config when creating a new instance. ​ 此方法创建一个名为实例的新应用。您可以在创建新实例时传递可选配置。 Signature 签名 1 func New(config ...Config) *App Example 示</description></item><item><title>Routing</title><link>https://before80.github.io/go_docs/fiber/Guide/Routing/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/Guide/Routing/</guid><description>原文： https://docs.gofiber.io/guide/routing 🔌 Routing Handlers 处理程序 Registers a route bound to a specific HTTP method. ​ 注册绑定到特定 HTTP 方法的路由。 Signatures 签名 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // HTTP methods func (app *App) Get(path string, handlers ...Handler) Router func (app *App) Head(path</description></item><item><title>Welcome</title><link>https://before80.github.io/go_docs/fiber/Welcome/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/Welcome/</guid><description>原文： https://docs.gofiber.io/ 👋 Welcome An online API documentation with examples so you can start building web apps with Fiber right away! ​ 一个在线 API 文档，其中包含示例，以便您可以立即开始使用 Fiber 构建 Web 应用！ Fiber is an Express inspired web framework built on top of Fasthttp, the</description></item><item><title>打包</title><link>https://before80.github.io/go_docs/buffalo/deploy/packing/</link><pubDate>Sun, 04 Feb 2024 21:19:27 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/deploy/packing/</guid><description>原文：https://gobuffalo.io/documentation/deploy/packing/ Packing 打包 Now, your project is ready to be deployed. In this section, you will learn</description></item><item><title>API 应用程序</title><link>https://before80.github.io/go_docs/buffalo/guides/APIApplications/</link><pubDate>Sun, 04 Feb 2024 21:16:19 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/guides/APIApplications/</guid><description>原文：https://gobuffalo.io/documentation/guides/apis/ API Applications API 应用程序 Applications that only serve API end-points, typically JSON, are very different from those</description></item><item><title>Pop入门</title><link>https://before80.github.io/go_docs/buffalo/database/gettingStartedWithPop/</link><pubDate>Sun, 04 Feb 2024 21:12:02 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/database/gettingStartedWithPop/</guid><description>原文：https://gobuffalo.io/documentation/database/pop/ Getting Started with Pop Pop入门 The pop package is included with Buffalo by default, but</description></item><item><title>渲染</title><link>https://before80.github.io/go_docs/buffalo/frontend/rendering/</link><pubDate>Sun, 04 Feb 2024 21:09:28 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/frontend/rendering/</guid><description>原文：https://gobuffalo.io/documentation/frontend-layer/rendering/ Rendering 渲染 The https://github.com/gobuffalo/buffalo/render [godoc] package</description></item><item><title>路由</title><link>https://before80.github.io/go_docs/buffalo/requestHandling/routing/</link><pubDate>Sun, 04 Feb 2024 21:07:11 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/requestHandling/routing/</guid><description>原文：https://gobuffalo.io/documentation/request_handling/routing/ Routing 路由 Buffalo uses the github.com/gorilla/mux</description></item><item><title>安装 Buffalo</title><link>https://before80.github.io/go_docs/buffalo/gettingStarted/installBuffalo/</link><pubDate>Sun, 04 Feb 2024 21:05:33 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/gettingStarted/installBuffalo/</guid><description>原文：https://gobuffalo.io/documentation/getting_started/installation/ Install Buffalo In</description></item><item><title>教程</title><link>https://before80.github.io/go_docs/buffalo/tutorials/</link><pubDate>Sun, 04 Feb 2024 21:04:07 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/tutorials/</guid><description>原文：https://gobuffalo.io/documentation/tutorials/ Tutorials 教程 Using Vue.js with Buffalo 使用 Vue.js 与 Buffalo It doesn’t take much</description></item><item><title>全局变量</title><link>https://before80.github.io/go_docs/beego/mvcIntroduction/views/globalVariables/</link><pubDate>Sun, 04 Feb 2024 10:05:01 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/mvcIntroduction/views/globalVariables/</guid><description>原文：https://beego.wiki/docs/mvc/view/global_variables/ Global Variables 全局变量 Global Variables 全局变量 Variables common to all requests</description></item><item><title>模板解析</title><link>https://before80.github.io/go_docs/beego/mvcIntroduction/views/templateParsing/</link><pubDate>Sun, 04 Feb 2024 10:03:09 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/mvcIntroduction/views/templateParsing/</guid><description>原文：https://beego.wiki/docs/mvc/view/view/ Template Parsing 模板解析 Template Parsing 模板解析 Beego uses Go’s built-in package html/template as the template parser. Upon startup, it will</description></item><item><title>overview</title><link>https://before80.github.io/go_docs/beego/mvcIntroduction/models/overview/</link><pubDate>Sun, 04 Feb 2024 09:59:56 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/mvcIntroduction/models/overview/</guid><description>原文：https://beego.wiki/docs/mvc/model/overview/ Overview 概述 Models － Beego ORM 模型 － Beego ORM Beego ORM is a powerful ORM framework written in Go. It is</description></item><item><title>配置</title><link>https://before80.github.io/go_docs/beego/mvcIntroduction/controllers/configuration/</link><pubDate>Sun, 04 Feb 2024 09:55:24 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/mvcIntroduction/controllers/configuration/</guid><description>原文：https://beego.wiki/docs/mvc/controller/config/ Configuration 配置 Configuration 配置 By default the Beego configuration file uses the INI format. Other supported formats include XML,</description></item><item><title>贡献</title><link>https://before80.github.io/go_docs/beego/intro/contributing/</link><pubDate>Sun, 04 Feb 2024 09:35:40 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/intro/contributing/</guid><description>原文：https://beego.wiki/docs/intro/contributing/ Contributing 贡献 Contributing to Beego 对 Beego 的贡献 Introduction 简介 Beego is free and open source software, which means that</description></item><item><title>实时监控</title><link>https://before80.github.io/go_docs/beego/advancedBeego/liveMonitor/</link><pubDate>Sun, 04 Feb 2024 09:33:42 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/advancedBeego/liveMonitor/</guid><description>原文：https://beego.wiki/docs/advantage/monitor/ Live Monitor 实时监控 We discussed the toolbox module before. It will listen on 127.0.0.1:8088 by default when the application is running. It</description></item><item><title>grace 模块</title><link>https://before80.github.io/go_docs/beego/modules/grace/</link><pubDate>Sun, 04 Feb 2024 09:25:05 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/modules/grace/</guid><description>原文：https://beego.wiki/docs/module/grace/ grace 模块 What is Hot Upgrade? 什么是热升级？ What is hot upgrade? Students who know nginx know that nginx supports hot upgrade. It can</description></item><item><title>独立部署</title><link>https://before80.github.io/go_docs/beego/deployment/standAloneDeployment/</link><pubDate>Sun, 04 Feb 2024 09:12:43 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/deployment/standAloneDeployment/</guid><description>原文：https://beego.wiki/docs/deploy/beego/ Stand alone Deployment 独立部署 This will run application in the backend as a daemon. ​ 这将在后台以守护进程的形</description></item><item><title>创建新项目</title><link>https://before80.github.io/go_docs/beego/quickStart/createANewProject/</link><pubDate>Sun, 04 Feb 2024 09:09:54 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/quickStart/createANewProject/</guid><description>原文：https://beego.wiki/docs/quickstart/new/ Create a new project 创建新项目 Requirements 要求 Before starting any Beego project make sure that you have installed the bee tool and the</description></item><item><title>安装 Beego</title><link>https://before80.github.io/go_docs/beego/install/installUpgrade/</link><pubDate>Sun, 04 Feb 2024 09:08:56 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/install/installUpgrade/</guid><description>原文：https://beego.wiki/docs/install/install/ Installing Beego 安装 Beego You can use the classic Go way to install Beego: ​ 您可以使用经典的 Go 方式</description></item><item><title>开始入门</title><link>https://before80.github.io/go_docs/thirdPkg/iris/getStarted/</link><pubDate>Wed, 31 Jan 2024 19:47:27 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/iris/getStarted/</guid><description>原文：https://www.iris-go.com/docs/#/ Installation 安装 Iris is a cross-platform software. ​ Iris 是一个跨平台软件。 The only requirement is the Go Programming Language, version 1.20 and above. ​ 唯一的要</description></item><item><title>custom handler</title><link>https://before80.github.io/go_docs/thirdPkg/chi/examples/customHandler/</link><pubDate>Wed, 31 Jan 2024 19:10:50 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/chi/examples/customHandler/</guid><description>原文：https://github.com/go-chi/chi/blob/master/_examples/custom-handler/</description></item><item><title>测试</title><link>https://before80.github.io/go_docs/thirdPkg/chi/testing/</link><pubDate>Wed, 31 Jan 2024 19:08:51 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/chi/testing/</guid><description>原文：https://go-chi.io/#/pages/testing Testing 🧪 测试 Writing tests for APIs is easy. We can use the inbuilt net/http/httptest lib to test our apis. ​ 为 API 编写测试很容易。我们</description></item><item><title>中间件</title><link>https://before80.github.io/go_docs/thirdPkg/chi/middleware/</link><pubDate>Wed, 31 Jan 2024 19:06:28 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/chi/middleware/</guid><description>原文：https://go-chi.io/#/pages/middleware Middleware 🧬 中间件 Introduction 简介 Middleware performs some specific function on the HTTP request or response at a specific stage in the HTTP pipeline before or after the</description></item><item><title>简介</title><link>https://before80.github.io/go_docs/thirdPkg/chi/introduction/</link><pubDate>Wed, 31 Jan 2024 19:02:59 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/chi/introduction/</guid><description>原文：https://go-chi.io/#/README Introduction 简介 Hi, Let&amp;rsquo;s Get You Started With chi 👋 嗨，让我们开始使用 chi chi is a lightweight, idiomatic and composable router for building Go HTTP services. It&amp;rsquo;s especially good at helping you write</description></item><item><title>技术说明 1</title><link>https://before80.github.io/go_docs/thirdPkg/lua/notes/1/</link><pubDate>Thu, 25 Jan 2024 22:16:34 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/lua/notes/1/</guid><description>原文：https://www.lua.org/notes/ltn001.html Technical Note 1 技术说明 1 Last update: Sun Feb 11 18:45:01 EDT 2001 by lhf. Minimal Lua 3.2 installations 极简 Lua 3.2 安装 This note</description></item><item><title>1 – 简介</title><link>https://before80.github.io/go_docs/thirdPkg/lua/Lua54ReferenceManual/1/</link><pubDate>Thu, 25 Jan 2024 14:34:16 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/lua/Lua54ReferenceManual/1/</guid><description>原文：https://www.lua.org/manual/5.4/manual.html 1 – Introduction – 简介 Lua is a powerful, efficient, lightweight, embeddable scripting language. It supports procedural programming, object-oriented programming, functional programming, data-driven programming,</description></item><item><title>单元测试</title><link>https://before80.github.io/go_docs/asu/test/unit/</link><pubDate>Mon, 12 Jun 2023 17:21:05 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/test/unit/</guid><description>函数参数 ​ 必须是*testing.T，可以用其来记录错误或测试状态。 T结构体 ​ T结构体是传递给Test函数以管理测试状态并支持格式化测试日志</description></item><item><title>gin文档</title><link>https://before80.github.io/go_docs/thirdPkg/gin/gin/</link><pubDate>Mon, 05 Jun 2023 08:55:39 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/gin/gin/</guid><description>Gin Web Framework 原文：https://pkg.go.dev/github.com/gin-gonic/gin 当前版本：1.9.0 发布时间：2023.2</description></item><item><title>2019年的 Go 模块</title><link>https://before80.github.io/go_docs/goBlog/2018/GoModulesIn2019/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2018/GoModulesIn2019/</guid><description>Go Modules in 2019 - 2019年的 go 模块 原文：https://go.dev/blog/modules2019 Russ Cox 19 December 2018 What a year! 多么美好的一年啊 2018 was a great year for</description></item><item><title>Go Playground内部情况</title><link>https://before80.github.io/go_docs/goBlog/2013/InsideTheGoPlayground/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2013/InsideTheGoPlayground/</guid><description>Inside the Go Playground - Go Playground内部情况 原文：https://go.dev/blog/playground Andrew Gerrand 12 December 2013 Introduction 简介 NOTE: This article does not describe the current version</description></item><item><title>Go 六岁了</title><link>https://before80.github.io/go_docs/goBlog/2015/SixYearsOfGo/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2015/SixYearsOfGo/</guid><description>Six years of Go - Go 六岁了 原文：https://go.dev/blog/6years Andrew Gerrand 10 November 2015 Six years ago today the Go language was released as an open source project. Since then, more than 780 contributors have made over 30,000 commits to the</description></item><item><title>Go 三周年</title><link>https://before80.github.io/go_docs/goBlog/2012/GoTurnsThree/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2012/GoTurnsThree/</guid><description>Go turns three - Go 三周年 原文：https://go.dev/blog/3years Russ Cox 10 November 2012 The Go open source project is three years old today. Go开源项目今天已经三岁了。 It’s</description></item><item><title>Go 在ARM和其他</title><link>https://before80.github.io/go_docs/goBlog/2020/GoOnARMAndBeyond/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2020/GoOnARMAndBeyond/</guid><description>Go on ARM and Beyond - go 在ARM和其他 原文：https://go.dev/blog/ports Russ Cox 17 December 2020 The industry is abuzz about non-x86 processors recently, so we thought it would be worth a brief post about Go’s</description></item><item><title>Go: 一年前的今天</title><link>https://before80.github.io/go_docs/goBlog/2010/GoOneYearAgoToday/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2010/GoOneYearAgoToday/</guid><description>Go: one year ago today - Go: 一年前的今天 原文：https://go.dev/blog/1year Andrew Gerrand 10 November 2010 2010年11月10日 ​ 2009年11月10日，</description></item><item><title>参与2016年 Go 用户调查和公司问卷调查</title><link>https://before80.github.io/go_docs/goBlog/2016/ParticipateInThe2016GoUserSurveyAndCompanyQuestionnaire/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2016/ParticipateInThe2016GoUserSurveyAndCompanyQuestionnaire/</guid><description>Participate in the 2016 Go User Survey and Company Questionnaire - 参与2016年 Go 用户调查和公司问卷调查 原文：https://go.dev/blog/survey2016 Steve Francia 13 December 2016 The Go</description></item><item><title>参与2017年 Go 用户调查</title><link>https://before80.github.io/go_docs/goBlog/2017/ParticipateInThe2017GoUserSurvey/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2017/ParticipateInThe2017GoUserSurvey/</guid><description>Participate in the 2017 Go User Survey - 参与2017年 Go 用户调查 原文：https://go.dev/blog/survey2017 Steve Francia 16 November 2017 The Go project wants to hear from you (again)! Go项</description></item><item><title>废弃用于安装可执行文件的 go get</title><link>https://before80.github.io/go_docs/docs/Other/DeprecationOf-go-get-ForInstallingExecutables/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/Other/DeprecationOf-go-get-ForInstallingExecutables/</guid><description>Deprecation of &amp;lsquo;go get&amp;rsquo; for installing executable - 废弃用于安装可执行文件的 &amp;ldquo;go get&amp;rdquo; 原文：https://go.dev/doc/go-get-install-deprecation</description></item><item><title>了解 Go 社区</title><link>https://before80.github.io/go_docs/goBlog/2011/GettingToKnowTheGoCommunity/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2011/GettingToKnowTheGoCommunity/</guid><description>Getting to know the Go community - 了解 Go 社区 原文：https://go.dev/blog/survey2011 Andrew Gerrand 21 December 2011 Over the past couple of years Go has attracted a lot of users and contributors, and I’ve</description></item><item><title>生成代码</title><link>https://before80.github.io/go_docs/goBlog/2014/GeneratingCode/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2014/GeneratingCode/</guid><description>Generating code - 生成代码 原文：https://go.dev/blog/generate Rob Pike 22 December 2014 A property of universal computation—Turing compl</description></item><item><title>宣布2019年Go开发者调查</title><link>https://before80.github.io/go_docs/goBlog/2019/AnnouncingThe2019GoDeveloperSurvey/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2019/AnnouncingThe2019GoDeveloperSurvey/</guid><description>Announcing the 2019 Go Developer Survey - 宣布2019年Go开发者调查 原文：https://go.dev/blog/survey2019 Todd Kulesza 20 November 2019 Help shape the future of Go 帮助塑造G</description></item><item><title>Go 的安全问题</title><link>https://before80.github.io/go_docs/docs/GoSecurity/GoSecurity/</link><pubDate>Thu, 18 May 2023 16:50:08 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/GoSecurity/GoSecurity/</guid><description>Go Security - Go的安全问题 原文：https://go.dev/security/ Overview 概述 本页提供了关于使用Go编写安全可靠的软件的信息。 Go Security Go的安</description></item><item><title>下载并安装 Go</title><link>https://before80.github.io/go_docs/docs/GettingStarted/InstallingGo/</link><pubDate>Thu, 18 May 2023 16:35:08 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/GettingStarted/InstallingGo/</guid><description>Download and install 下载并安装 原文：https://go.dev/doc/install 按照这里描述的步骤，快速下载并安装Go。 对于其他有关安装的内容，您</description></item><item><title>访问关系型数据库</title><link>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/AccessingDatabases/AccessingRelationalDatabases/</link><pubDate>Wed, 17 May 2023 15:03:14 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/AccessingDatabases/AccessingRelationalDatabases/</guid><description>Accessing relational databases - 访问关系型数据库 原文：https://go.dev/doc/database/ ​ 使用 Go，您可以将各种数据库和数据访问方法纳入您的应</description></item><item><title>开发和发布模块</title><link>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/DevelopingModules/DevelopingAndPublishingModules/</link><pubDate>Wed, 17 May 2023 15:03:14 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/DevelopingModules/DevelopingAndPublishingModules/</guid><description>Developing and publishing modules - 开发和发布模块 原文：https://go.dev/doc/modules/developing ​ 您可以将相关的包收集到模块中，然后</description></item><item><title>Packages, variables, and functions</title><link>https://before80.github.io/go_docs/docs/GoTour/Basics/PackagesVariablesAndFunctions/</link><pubDate>Wed, 17 May 2023 12:10:24 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/GoTour/Basics/PackagesVariablesAndFunctions/</guid><description>Packages, variables, and functions Packages 包 原文：https://go.dev/tour/basics/1 ​ 每个Go程序都是由包组成的。 ​ 程序从main包中开始运行。 ​ 本程</description></item><item><title>bzip2</title><link>https://before80.github.io/go_docs/stdLib/compress/bzip2/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/compress/bzip2/</guid><description>原文：https://pkg.go.dev/compress/bzip2@go1.24.2 Package bzip2 implements bzip2 decompression. ​ bzip2 包实现 bzip2 的解压。 常量 This section is empty. 变量 This section</description></item><item><title>Go 内存模型</title><link>https://before80.github.io/go_docs/docs/References/TheGoMemoryModel/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/References/TheGoMemoryModel/</guid><description>The Go Memory Model - Go 内存模型 Version of June 6, 2022 2022年6月6日版本 原文：https://go.dev/ref/mem 简介 ​ Go的内存模型指定了在一个gor</description></item><item><title>heap</title><link>https://before80.github.io/go_docs/stdLib/container/heap/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/container/heap/</guid><description>原文：https://pkg.go.dev/container/heap@go1.24.2 Package heap provides heap operations for any type that implements heap.Interface. A heap is a tree with the property that each node is the minimum-valued</description></item><item><title>tar</title><link>https://before80.github.io/go_docs/stdLib/archive/tar/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/archive/tar/</guid><description>原文：https://pkg.go.dev/archive/tar@go1.24.2 Package tar implements access to tar archives. ​ tar包实现对tar存档的访问。 Tape archives (tar) are</description></item><item><title>zip</title><link>https://before80.github.io/go_docs/stdLib/archive/zip/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/archive/zip/</guid><description>原文：https://pkg.go.dev/archive/zip@go1.24.2 Package zip provides support for reading and writing ZIP archives. ​ zip 包提供对 ZIP 存档的读写支持。 See the ZIP</description></item><item><title>简介</title><link>https://before80.github.io/go_docs/docs/References/GoModulesReference/Introduction/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/References/GoModulesReference/Introduction/</guid><description>Introduction 简介 原文：https://go.dev/ref/mod#introduction ​ 模块是Go管理依赖项的方式。 ​ 本文档是关于 Go 的模块系统的</description></item><item><title>简介</title><link>https://before80.github.io/go_docs/langSpec/Introduction/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/Introduction/</guid><description>The Go Programming Language Specification Version of June 29, 2022 Introduction 简介 原文：https://go.dev/ref/spec#Introduction This is the reference manual for the Go programming language. The pre-Go1.18 version, without generics, can be found</description></item><item><title>全部命令</title><link>https://before80.github.io/go_docs/cmd/FullCommandReference/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/FullCommandReference/</guid><description>原文：https://pkg.go.dev/cmd Name Synopsis 简述 addr2line addr2line是对GNU addr2line工具的最小模拟，刚好足以支持ppr</description></item><item><title>mongodb</title><link>https://before80.github.io/go_docs/asu/medium/database/mongodb/</link><pubDate>Sat, 15 Feb 2025 16:47:09 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/medium/database/mongodb/</guid><description/></item><item><title>server_contract</title><link>https://before80.github.io/go_docs/goconvey/lib/web/server_contract/</link><pubDate>Sun, 15 Dec 2024 21:21:44 +0800</pubDate><guid>https://before80.github.io/go_docs/goconvey/lib/web/server_contract/</guid><description>原文：https://pkg.go.dev/github.com/smartystreets/goconvey@v1.8.1/web/ser</description></item><item><title>examples</title><link>https://before80.github.io/go_docs/goconvey/lib/examples/</link><pubDate>Sun, 15 Dec 2024 21:20:15 +0800</pubDate><guid>https://before80.github.io/go_docs/goconvey/lib/examples/</guid><description>原文：https://pkg.go.dev/github.com/smartystreets/goconvey@v1.8.1/example</description></item><item><title>reporting</title><link>https://before80.github.io/go_docs/goconvey/lib/convey/reporting/</link><pubDate>Sun, 15 Dec 2024 21:19:44 +0800</pubDate><guid>https://before80.github.io/go_docs/goconvey/lib/convey/reporting/</guid><description>原文：https://pkg.go.dev/github.com/smartystreets/goconvey@v1.8.1/convey/</description></item><item><title>Assertions - 断言</title><link>https://before80.github.io/go_docs/goconvey/assertions/</link><pubDate>Sun, 15 Dec 2024 11:17:50 +0800</pubDate><guid>https://before80.github.io/go_docs/goconvey/assertions/</guid><description>原文：https://github.com/smartystreets/goconvey/wiki/Assertions 收录该文档时间： 2024-12-15T11:17:50+08:00 Assertions</description></item><item><title>require</title><link>https://before80.github.io/go_docs/testify/require/</link><pubDate>Sun, 15 Dec 2024 11:07:47 +0800</pubDate><guid>https://before80.github.io/go_docs/testify/require/</guid><description>原文：https://pkg.go.dev/github.com/stretchr/testify/require 收录该文档时间： 2024-12-15T11:07:47+08:00 版本：V</description></item><item><title>linkedliststack</title><link>https://before80.github.io/go_docs/thirdPkg/gods/stacks/linkedliststack/</link><pubDate>Sat, 07 Dec 2024 11:55:20 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/gods/stacks/linkedliststack/</guid><description>原文：https://pkg.go.dev/github.com/emirpasic/gods/v2@v2.0.0-alpha/stacks</description></item><item><title>binaryheap</title><link>https://before80.github.io/go_docs/thirdPkg/gods/trees/binaryheap/</link><pubDate>Sat, 07 Dec 2024 11:09:41 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/gods/trees/binaryheap/</guid><description>原文：https://pkg.go.dev/github.com/emirpasic/gods/v2@v2.0.0-alpha/trees/</description></item><item><title>linkedhashset</title><link>https://before80.github.io/go_docs/thirdPkg/gods/sets/linkedhashset/</link><pubDate>Sat, 07 Dec 2024 11:08:14 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/gods/sets/linkedhashset/</guid><description>原文：https://pkg.go.dev/github.com/emirpasic/gods/v2@v2.0.0-alpha/sets/l</description></item><item><title>circularbuffer</title><link>https://before80.github.io/go_docs/thirdPkg/gods/queues/circularbuffer/</link><pubDate>Sat, 07 Dec 2024 11:07:09 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/gods/queues/circularbuffer/</guid><description>原文：https://pkg.go.dev/github.com/emirpasic/gods/v2@v2.0.0-alpha/queues</description></item><item><title>hashmap</title><link>https://before80.github.io/go_docs/thirdPkg/gods/maps/hashmap/</link><pubDate>Sat, 07 Dec 2024 11:03:32 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/gods/maps/hashmap/</guid><description>原文：https://pkg.go.dev/github.com/emirpasic/gods/v2@v2.0.0-alpha/maps/h</description></item><item><title>doublylinkedlist</title><link>https://before80.github.io/go_docs/thirdPkg/gods/lists/doublylinkedlist/</link><pubDate>Sat, 07 Dec 2024 11:02:08 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/gods/lists/doublylinkedlist/</guid><description>原文：https://pkg.go.dev/github.com/emirpasic/gods/v2@v2.0.0-alpha/lists/</description></item><item><title>func</title><link>https://before80.github.io/go_docs/asu/basic/types/funcs/</link><pubDate>Sat, 13 Jul 2024 14:14:47 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/types/funcs/</guid><description/></item><item><title>交叉编译</title><link>https://before80.github.io/go_docs/buffalo/deploy/crossCompiling/</link><pubDate>Sun, 04 Feb 2024 21:19:43 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/deploy/crossCompiling/</guid><description>原文：https://gobuffalo.io/documentation/deploy/cross-compiling/ Cross-compiling a Buffalo application 交叉编译 Buffalo</description></item><item><title>文件上传</title><link>https://before80.github.io/go_docs/buffalo/guides/fileUploads/</link><pubDate>Sun, 04 Feb 2024 21:16:31 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/guides/fileUploads/</guid><description>原文：https://gobuffalo.io/documentation/guides/file-uploads/ File Uploads 文件上传 Since 0.10.3 自 0.10.3 起 Buffalo</description></item><item><title>Soda CLI</title><link>https://before80.github.io/go_docs/buffalo/database/sodaCLI/</link><pubDate>Sun, 04 Feb 2024 21:12:13 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/database/sodaCLI/</guid><description>原文：https://gobuffalo.io/documentation/database/soda/ Soda CLI Pop helps you to manage database connections, but it also provides soda, a small CLI toolbox</description></item><item><title>模板化</title><link>https://before80.github.io/go_docs/buffalo/frontend/templating/</link><pubDate>Sun, 04 Feb 2024 21:09:47 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/frontend/templating/</guid><description>原文：https://gobuffalo.io/documentation/frontend-layer/templating/ Templating 模板化 Este documento</description></item><item><title>Action Controller</title><link>https://before80.github.io/go_docs/buffalo/requestHandling/actionController/</link><pubDate>Sun, 04 Feb 2024 21:07:40 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/requestHandling/actionController/</guid><description>原文：https://gobuffalo.io/documentation/request_handling/actions/ Action Controller 动作控制器</description></item><item><title>生成新项目</title><link>https://before80.github.io/go_docs/buffalo/gettingStarted/generatingANewProject/</link><pubDate>Sun, 04 Feb 2024 21:05:50 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/gettingStarted/generatingANewProject/</guid><description>原文：https://gobuffalo.io/documentation/getting_started/new-project/ Generating a New Project</description></item><item><title>概述</title><link>https://before80.github.io/go_docs/buffalo/overview/</link><pubDate>Sun, 04 Feb 2024 21:04:20 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/overview/</guid><description>原文：https://gobuffalo.io/documentation/overview/ Overview 概述 Welcome aboard! ​ 欢迎 aboard！ While Buffalo can be considered as a framework,</description></item><item><title>templateFunctions</title><link>https://before80.github.io/go_docs/beego/mvcIntroduction/views/templateFunctions/</link><pubDate>Sun, 04 Feb 2024 10:04:21 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/mvcIntroduction/views/templateFunctions/</guid><description>原文：https://beego.wiki/docs/mvc/view/template/ Template Functions 模板函数 Template Functions 模板函数 Beego supports custom template functions but it must be set as below before</description></item><item><title>ORM 用法</title><link>https://before80.github.io/go_docs/beego/mvcIntroduction/models/ormUsage/</link><pubDate>Sun, 04 Feb 2024 10:00:11 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/mvcIntroduction/models/ormUsage/</guid><description>原文：https://beego.wiki/docs/mvc/model/orm/ ORM Usage - ORM 用法 ORM Usage ORM 用法 An example of beego/orm is set out below. ​ 下面列出了 beego/orm 的一个</description></item><item><title>路由</title><link>https://before80.github.io/go_docs/beego/mvcIntroduction/controllers/routing/</link><pubDate>Sun, 04 Feb 2024 09:56:45 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/mvcIntroduction/controllers/routing/</guid><description>原文：https://beego.wiki/docs/mvc/controller/router/ Routing 路由 Routing 路由 This chapter will cover the three types of routers incorporated into Beego. ​ 本章</description></item><item><title>发行说明</title><link>https://before80.github.io/go_docs/beego/intro/releaseNotes/</link><pubDate>Sun, 04 Feb 2024 09:35:54 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/intro/releaseNotes/</guid><description>原文：https://beego.wiki/docs/intro/releases/ Release Notes 发行说明 beego 2.0.4 Note: now we force the web admin service serving HTTP only. ​ 注意：现在我们强</description></item><item><title>URL 缩短器</title><link>https://before80.github.io/go_docs/beego/demos/urlShortener/</link><pubDate>Sun, 04 Feb 2024 09:34:58 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/demos/urlShortener/</guid><description>原文：https://beego.wiki/docs/examples/shorturl/ URL Shortener - URL缩短器 URL Shortener API service - URL缩短器 API 服务 This sample</description></item><item><title>聊天室</title><link>https://before80.github.io/go_docs/beego/demos/chatRoom/</link><pubDate>Sun, 04 Feb 2024 09:34:42 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/demos/chatRoom/</guid><description>原文：https://beego.wiki/docs/examples/chat/ Chat Room 聊天室 This demo shows two ways of implementing a Web Instant Messaging application: ​ 此演示展示了实现 Web 即时</description></item><item><title>自动 API 文档</title><link>https://before80.github.io/go_docs/beego/advancedBeego/automatedAPI/</link><pubDate>Sun, 04 Feb 2024 09:33:58 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/advancedBeego/automatedAPI/</guid><description>原文：https://beego.wiki/docs/advantage/docs/ Automated API Documentation 自动 API 文档 Automated documentation is a very cool feature that I found to be desirable. Now it became a reality in Beego.</description></item><item><title>session 模块</title><link>https://before80.github.io/go_docs/beego/modules/session/</link><pubDate>Sun, 04 Feb 2024 09:25:40 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/modules/session/</guid><description>原文：https://beego.wiki/docs/module/session/ Session Module 会话模块 Notes: 备注： This document is for using session as a standalone module in other projects. If you are using session</description></item><item><title>使用 Supervisord 进行部署</title><link>https://before80.github.io/go_docs/beego/deployment/deploymentWithSupervisord/</link><pubDate>Sun, 04 Feb 2024 09:13:06 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/deployment/deploymentWithSupervisord/</guid><description>原文：https://beego.wiki/docs/deploy/supervisor/ Deployment with Supervisord 使用 Supervisord 进行部署 Supervisord is a very useful process manager implemented in Python. Supervisord can change your non-daemon</description></item><item><title>路由设置</title><link>https://before80.github.io/go_docs/beego/quickStart/routingSettings/</link><pubDate>Sun, 04 Feb 2024 09:10:13 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/quickStart/routingSettings/</guid><description>原文：https://beego.wiki/docs/quickstart/router/ Routing settings 路由设置 Project routing settings 项目路由设置 The previous section covered creating and running a Beego project.</description></item><item><title>bee 工具简介</title><link>https://before80.github.io/go_docs/beego/install/beegoToolUsage/</link><pubDate>Sun, 04 Feb 2024 09:09:09 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/install/beegoToolUsage/</guid><description>原文：https://beego.wiki/docs/install/bee/ Introduction to bee tool - bee 工具简介 Bee tool is a project for rapid Beego development. With bee tool developers can create, auto compile and reload, develop, test,</description></item><item><title>Iris在pkg.go.dev上的文档</title><link>https://before80.github.io/go_docs/thirdPkg/iris/iris/</link><pubDate>Thu, 01 Feb 2024 10:14:33 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/iris/iris/</guid><description>原文：https://pkg.go.dev/github.com/kataras/iris/v12 版本：v12.2.10 发布日期：2024.</description></item><item><title>custom method</title><link>https://before80.github.io/go_docs/thirdPkg/chi/examples/customMethod/</link><pubDate>Wed, 31 Jan 2024 19:11:07 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/chi/examples/customMethod/</guid><description>原文：https://github.com/go-chi/chi/blob/master/_examples/custom-method/m</description></item><item><title>开始入门</title><link>https://before80.github.io/go_docs/thirdPkg/chi/getStarted/</link><pubDate>Wed, 31 Jan 2024 19:04:19 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/chi/getStarted/</guid><description>原文：https://go-chi.io/#/pages/getting_started Installation 安装 go get -u github.com/go-chi/chi/v5 Running a Simple Server 运行一个简单的服务器 The simplest Hello World Api</description></item><item><title>技术说明 2</title><link>https://before80.github.io/go_docs/thirdPkg/lua/notes/2/</link><pubDate>Thu, 25 Jan 2024 22:16:39 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/lua/notes/2/</guid><description>原文：https://www.lua.org/notes/ltn002.html Technical Note 2 技术说明 2 Last update: Mon Aug 20 14:35:00 EST 2001 Minimal Lua 4.0 installations - Lua 4.0 最小安装 This note explains</description></item><item><title>2 – 基本概念</title><link>https://before80.github.io/go_docs/thirdPkg/lua/Lua54ReferenceManual/2/</link><pubDate>Thu, 25 Jan 2024 14:34:24 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/lua/Lua54ReferenceManual/2/</guid><description>原文：https://www.lua.org/manual/5.4/manual.html 2 – Basic Concepts – 基本概念 This section describes the basic concepts of the language. ​ 本节介绍该语</description></item><item><title>DBResolver</title><link>https://before80.github.io/go_docs/gorm/AdancedTopics/databaseResolver/</link><pubDate>Sat, 28 Oct 2023 14:34:34 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/AdancedTopics/databaseResolver/</guid><description>原文：https://gorm.io/docs/dbresolver.html DBResolver adds multiple databases support to GORM, the following features are supported: ​ DBResolver为GORM提供了</description></item><item><title>Context</title><link>https://before80.github.io/go_docs/gorm/Tutorials/context/</link><pubDate>Sat, 28 Oct 2023 14:29:31 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/Tutorials/context/</guid><description>原文：https://gorm.io/docs/context.html GORM provides Context support, you can use it with method WithContext ​ GORM提供了Context支持，你可以使用</description></item><item><title>属于关系</title><link>https://before80.github.io/go_docs/gorm/Associations/belongsTo/</link><pubDate>Sat, 28 Oct 2023 14:27:48 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/Associations/belongsTo/</guid><description>原文：https://gorm.io/docs/belongs_to.html 属于关系 Belongs To A belongs to association sets up a one-to-one connection with another model, such that each instance of the declaring model “belo</description></item><item><title>创建</title><link>https://before80.github.io/go_docs/gorm/CRUDInterface/create/</link><pubDate>Sat, 28 Oct 2023 14:25:34 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/CRUDInterface/create/</guid><description>原文：https://gorm.io/docs/create.html 创建记录 Create Record 1 2 3 4 5 6 7 user := User{Name: &amp;#34;Jinzhu&amp;#34;, Age: 18, Birthday: time.Now()} result := db.Create(&amp;amp;user) // 将数据指针传递给Cr</description></item><item><title>概述</title><link>https://before80.github.io/go_docs/gorm/GettingStarted/overview/</link><pubDate>Sat, 28 Oct 2023 14:24:01 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/GettingStarted/overview/</guid><description>原文：https://gorm.io/docs/index.html The fantastic ORM library for Golang aims to be developer friendly. Full-Featured ORM 功能齐全的ORM Associations (Has One, Has Many, Belongs To, Many To Many, Polymorphism, Single-table inheritance) 关联</description></item><item><title>Hello World</title><link>https://before80.github.io/go_docs/example/hello-world/</link><pubDate>Mon, 07 Aug 2023 13:31:05 +0800</pubDate><guid>https://before80.github.io/go_docs/example/hello-world/</guid><description>Hello World 1 2 3 4 5 6 7 8 9 package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;Hello World&amp;#34;) } // Output: // Hello World</description></item><item><title>性能测试</title><link>https://before80.github.io/go_docs/asu/test/benchmark/</link><pubDate>Mon, 12 Jun 2023 17:21:27 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/test/benchmark/</guid><description/></item><item><title>httprouter文档</title><link>https://before80.github.io/go_docs/thirdPkg/httprouter/httprouter/</link><pubDate>Mon, 05 Jun 2023 09:12:08 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/httprouter/httprouter/</guid><description>HttpRouter 原文：https://pkg.go.dev/github.com/julienschmidt/httprouter 版本：v1.3.0 发布日</description></item><item><title>gin快速入门</title><link>https://before80.github.io/go_docs/thirdPkg/gin/ginQuickStart/</link><pubDate>Mon, 05 Jun 2023 08:55:39 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/gin/ginQuickStart/</guid><description>Gin Quick Start - gin快速入门 原文：https://github.com/gin-gonic/gin/blob/master/docs/doc.md</description></item><item><title>关于 go 命令</title><link>https://before80.github.io/go_docs/docs/AboutTheGoCommand/</link><pubDate>Thu, 18 May 2023 17:31:23 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/AboutTheGoCommand/</guid><description>About the go command - 关于 go 命令 原文：https://go.dev/doc/articles/go_command ​ Go 发行版包含一个名为 &amp;ldquo;g</description></item><item><title>2015年英国Golang展会</title><link>https://before80.github.io/go_docs/goBlog/2015/GolangUK2015/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2015/GolangUK2015/</guid><description>Golang UK 2015 - 2015年英国Golang展会 原文：https://go.dev/blog/gouk15 Francesc Campoy 9 October 2015 On August 21st the Go community gathered in London for the first edition of Golang UK. The</description></item><item><title>App Engine 1.7.1中的 Go 更新</title><link>https://before80.github.io/go_docs/goBlog/2012/GoUpdatesInAppEngine1_7_1/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2012/GoUpdatesInAppEngine1_7_1/</guid><description>Go updates in App Engine 1.7.1 - App Engine 1.7.1中的 Go 更新 原文：https://go.dev/blog/appengine-171 Andrew Gerrand 22 August 2012 This week we released version 1.7.1 of the App Engine</description></item><item><title>Go 1.4发布了</title><link>https://before80.github.io/go_docs/goBlog/2014/Go1_4IsReleased/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2014/Go1_4IsReleased/</guid><description>Go 1.4 is released - Go 1.4发布了 原文：https://go.dev/blog/go1.4 Andrew Gerrand 10 December 2014 Today we announce Go 1.4, the fifth major stable release of Go, arriving six months after our previous major release Go 1.3. It contains a</description></item><item><title>Go 2, here we come!</title><link>https://before80.github.io/go_docs/goBlog/2018/Go2HereWeCome/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2018/Go2HereWeCome/</guid><description>Go 2, here we come! 原文：https://go.dev/blog/go2-here-we-come Robert Griesemer 29 November 2018 Background 背景介绍 At GopherCon 2017, Russ Cox officially started the thought process on the next big version of</description></item><item><title>Go 8 岁了</title><link>https://before80.github.io/go_docs/goBlog/2017/EightYearsOfGo/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2017/EightYearsOfGo/</guid><description>Eight years of Go - Go 8 岁了 原文：https://go.dev/blog/8years Steve Francia 10 November 2017 Today we celebrate 8 years since Go was released as an open source project. During Go’s 4th anniversary, Andrew finished the post with &amp;</description></item><item><title>Go 字体</title><link>https://before80.github.io/go_docs/goBlog/2016/GoFonts/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2016/GoFonts/</guid><description>Go fonts - Go 字体 原文：https://go.dev/blog/go-fonts Nigel Tao, Chuck Bigelow, and Rob Pike 16 November 2016 An Announcement 一个公告 The experimental user interface toolkit being built at golang.org/x/exp/shiny includes several text elements, but there is a</description></item><item><title>go.dev：go开发者的新中心</title><link>https://before80.github.io/go_docs/goBlog/2019/GodevANewHubForGoDevelopers/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2019/GodevANewHubForGoDevelopers/</guid><description>Go.dev: a new hub for Go developers - go.dev：go开发者的新中心 原文：https://go.dev/blog/go.dev Steve Francia and Julie Qiu 13 November 2019 Over the last two years, as we’</description></item><item><title>Pre-Go 1 Release History</title><link>https://before80.github.io/go_docs/docs/Other/Pre-Go1ReleaseHistory/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/Other/Pre-Go1ReleaseHistory/</guid><description>Pre-Go 1 Release History 原文：https://go.dev/doc/devel/pre_go1 This page summarizes the changes between stable releases of Go prior to Go 1. See the Release History page for notes on recent releases. r60 (released 2011/09/07) The r60 release corresponds</description></item><item><title>调试 Go 代码（状态报告）</title><link>https://before80.github.io/go_docs/goBlog/2010/DebuggingGoCodeAStatusReport/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2010/DebuggingGoCodeAStatusReport/</guid><description>Debugging Go code (a status report) - 调试 Go 代码（状态报告） 原文：https://go.dev/blog/debug-status Luuk van Dijk 2 November 2010 2010 年 11 月 2 日 ​ 在调试方</description></item><item><title>封面故事</title><link>https://before80.github.io/go_docs/goBlog/2013/TheCoverStory/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2013/TheCoverStory/</guid><description>The cover story - 封面故事 原文：https://go.dev/blog/cover Rob Pike 2 December 2013 Introduction 简介 From the beginning of the project, Go was designed with tools in mind. Those tools include some of the most iconic pieces of Go technology such</description></item><item><title>将godoc.org的请求重定向到pkg.go.dev</title><link>https://before80.github.io/go_docs/goBlog/2020/RedirectingGodoc.orgRequestsToPkg.go.dev/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2020/RedirectingGodoc.orgRequestsToPkg.go.dev/</guid><description>Redirecting godoc.org requests to pkg.go.dev - 将godoc.org的请求重定向到pkg.go.dev 原文：https://go.dev/blog/godoc.org-redi</description></item><item><title>用 Go 构建StatHat</title><link>https://before80.github.io/go_docs/goBlog/2011/BuildingStatHatWithGo/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2011/BuildingStatHatWithGo/</guid><description>Building StatHat with Go - 用 Go 构建StatHat 原文：https://go.dev/blog/stathat Patrick Crosby 19 December 2011 Introduction 简介 My name is Patrick Crosby and I’m the founder of a company called Numerotron.</description></item><item><title>管理 Go 安装</title><link>https://before80.github.io/go_docs/docs/GettingStarted/ManagingGoInstallations/</link><pubDate>Thu, 18 May 2023 16:35:08 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/GettingStarted/ManagingGoInstallations/</guid><description>Managing Go installations - 管理 Go 安装 原文：https://go.dev/doc/manage-install ​ 本主题介绍如何在同一台计算机上安装多个版本的 Go</description></item><item><title>打开数据库句柄</title><link>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/AccessingDatabases/OpeningADatabaseHandle/</link><pubDate>Wed, 17 May 2023 15:03:14 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/AccessingDatabases/OpeningADatabaseHandle/</guid><description>Opening a database handle - 打开数据库句柄 原文：https://go.dev/doc/database/open-handle ​ database/sql包通过</description></item><item><title>模块发布和版本管理的工作流程</title><link>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/DevelopingModules/ModuleReleaseAndVersioningWorkflow/</link><pubDate>Wed, 17 May 2023 15:03:14 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/DevelopingModules/ModuleReleaseAndVersioningWorkflow/</guid><description>Module release and versioning workflow - 模块发布和版本管理的工作流程 原文：https://go.dev/doc/modules/release-workflow ​ 当您开</description></item><item><title>Flow control statements: for, if, else, switch and defer</title><link>https://before80.github.io/go_docs/docs/GoTour/Basics/FlowControlStatements_ForIfElseSwitchAndDefer/</link><pubDate>Wed, 17 May 2023 12:10:24 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/GoTour/Basics/FlowControlStatements_ForIfElseSwitchAndDefer/</guid><description>Flow control statements: for, if, else, switch and defer For 原文：https://go.dev/tour/flowcontrol/1 ​ Go 只有一个循环结构：for 循环。 ​ 基本的for</description></item><item><title>flate</title><link>https://before80.github.io/go_docs/stdLib/compress/flate/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/compress/flate/</guid><description>原文：https://pkg.go.dev/compress/flate@go1.24.2 Package flate implements the DEFLATE compressed data format, described in RFC 1951. The gzip and zlib packages implement access to DEFLATE-based file formats. ​ flate</description></item><item><title>go 命令首页表格</title><link>https://before80.github.io/go_docs/cmd/first_index_table/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/first_index_table/</guid><description>Command Documentation - 命令文档 原文：https://go.dev/doc/cmd There is a suite of programs to build and process Go source code. Instead of being run directly, programs in the suite are usually invoked by the go program. ​ 有一套程序用于构</description></item><item><title>go.mod 文件参考</title><link>https://before80.github.io/go_docs/docs/References/gomodFileReference/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/References/gomodFileReference/</guid><description>go.mod file reference - go.mod文件参考 原文：https://go.dev/doc/modules/gomod-ref ​ 每个 Go 模块都由一个 go.mod 文件定义，该</description></item><item><title>list</title><link>https://before80.github.io/go_docs/stdLib/container/list/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/container/list/</guid><description>原文：https://pkg.go.dev/container/list@go1.24.2 Package list implements a doubly linked list. ​ list包实现了一个双链表（a doubly linked</description></item><item><title>标记法</title><link>https://before80.github.io/go_docs/langSpec/Notation/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/Notation/</guid><description>Notation 标记法 原文：https://go.dev/ref/spec#Notation The syntax is specified using a variant of Extended Backus-Naur Form (EBNF): ​ （标记法的）语法是用 Extended Backus-Naur Form (EBNF) 的一个变</description></item><item><title>模块、包和版本</title><link>https://before80.github.io/go_docs/docs/References/GoModulesReference/ModulesPackagesAndVersions/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/References/GoModulesReference/ModulesPackagesAndVersions/</guid><description>Modules, packages, and versions 模块、包和版本 原文：https://go.dev/ref/mod#modules-overview ​ 模块是发布、版本化和一起分发的包</description></item><item><title>redis</title><link>https://before80.github.io/go_docs/asu/medium/database/redis/</link><pubDate>Sat, 15 Feb 2025 16:47:18 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/medium/database/redis/</guid><description/></item><item><title>server_executor</title><link>https://before80.github.io/go_docs/goconvey/lib/web/server_executor/</link><pubDate>Sun, 15 Dec 2024 21:22:01 +0800</pubDate><guid>https://before80.github.io/go_docs/goconvey/lib/web/server_executor/</guid><description>原文：https://pkg.go.dev/github.com/smartystreets/goconvey@v1.8.1/web/ser</description></item><item><title>Auto test</title><link>https://before80.github.io/go_docs/goconvey/autotest/</link><pubDate>Sun, 15 Dec 2024 11:17:59 +0800</pubDate><guid>https://before80.github.io/go_docs/goconvey/autotest/</guid><description>原文：https://github.com/smartystreets/goconvey/wiki/Auto-test 收录该文档时间： 2024-12-15T11:17:59+08:00 Auto test</description></item><item><title>mock</title><link>https://before80.github.io/go_docs/testify/mock/</link><pubDate>Sun, 15 Dec 2024 11:07:54 +0800</pubDate><guid>https://before80.github.io/go_docs/testify/mock/</guid><description>原文：https://pkg.go.dev/github.com/stretchr/testify/mock 收录该文档时间： 2024-12-15T11:07:54+08:00 版本：Vers</description></item><item><title>btree</title><link>https://before80.github.io/go_docs/thirdPkg/gods/trees/btree/</link><pubDate>Sat, 07 Dec 2024 11:09:51 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/gods/trees/btree/</guid><description>原文：https://pkg.go.dev/github.com/emirpasic/gods/v2@v2.0.0-alpha/trees/</description></item><item><title>treeset</title><link>https://before80.github.io/go_docs/thirdPkg/gods/sets/treeset/</link><pubDate>Sat, 07 Dec 2024 11:08:25 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/gods/sets/treeset/</guid><description>原文：https://pkg.go.dev/github.com/emirpasic/gods/v2@v2.0.0-alpha/sets/t</description></item><item><title>linkedlistqueue</title><link>https://before80.github.io/go_docs/thirdPkg/gods/queues/linkedlistqueue/</link><pubDate>Sat, 07 Dec 2024 11:07:24 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/gods/queues/linkedlistqueue/</guid><description>原文：https://pkg.go.dev/github.com/emirpasic/gods/v2@v2.0.0-alpha/queues</description></item><item><title>linkedhashmap</title><link>https://before80.github.io/go_docs/thirdPkg/gods/maps/linkedhashmap/</link><pubDate>Sat, 07 Dec 2024 11:03:41 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/gods/maps/linkedhashmap/</guid><description>原文：https://pkg.go.dev/github.com/emirpasic/gods/v2@v2.0.0-alpha/maps/l</description></item><item><title>singlylinkedlist</title><link>https://before80.github.io/go_docs/thirdPkg/gods/lists/singlylinkedlist/</link><pubDate>Sat, 07 Dec 2024 11:02:30 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/gods/lists/singlylinkedlist/</guid><description>原文：https://pkg.go.dev/github.com/emirpasic/gods/v2@v2.0.0-alpha/lists/</description></item><item><title>go</title><link>https://before80.github.io/go_docs/cmd/go1_23/</link><pubDate>Fri, 06 Sep 2024 21:04:40 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/go1_23/</guid><description>Overview Go is a tool for managing Go source code. ​ Go 是一个用于管理 Go 源代码的工具。 Usage: go &amp;lt;command&amp;gt; [arguments] The commands are: ​ 可用的命令有： bug 开始一个错误报告 start a bug report build 编译包及其依赖项 compile packages and dependencies clean 移</description></item><item><title>Systemd 服务</title><link>https://before80.github.io/go_docs/buffalo/deploy/systemdService/</link><pubDate>Sun, 04 Feb 2024 21:20:00 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/deploy/systemdService/</guid><description>原文：https://gobuffalo.io/documentation/deploy/systemd/ Systemd Service Systemd 服务 In this chapter, we’ll see how to setup</description></item><item><title>后台作业工作者</title><link>https://before80.github.io/go_docs/buffalo/guides/backgroundJobWorkers/</link><pubDate>Sun, 04 Feb 2024 21:16:50 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/guides/backgroundJobWorkers/</guid><description>原文：https://gobuffalo.io/documentation/guides/workers/ Background Job Workers 后台作业工作者 When building complex applications it is often</description></item><item><title>数据库配置</title><link>https://before80.github.io/go_docs/buffalo/database/databaseConfiguration/</link><pubDate>Sun, 04 Feb 2024 21:12:29 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/database/databaseConfiguration/</guid><description>原文：https://gobuffalo.io/documentation/database/configuration/ Database Configuration 数据库配置 Pop configuration</description></item><item><title>布局</title><link>https://before80.github.io/go_docs/buffalo/frontend/layouts/</link><pubDate>Sun, 04 Feb 2024 21:10:17 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/frontend/layouts/</guid><description>原文：https://gobuffalo.io/documentation/frontend-layer/layouts/ Layouts 布局 Este documento solo aplica cuando se</description></item><item><title>资源</title><link>https://before80.github.io/go_docs/buffalo/requestHandling/resources/</link><pubDate>Sun, 04 Feb 2024 21:07:51 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/requestHandling/resources/</guid><description>原文：https://gobuffalo.io/documentation/request_handling/resources/ Resources 资源 Often web</description></item><item><title>目录结构</title><link>https://before80.github.io/go_docs/buffalo/gettingStarted/directoryStructure/</link><pubDate>Sun, 04 Feb 2024 21:06:17 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/gettingStarted/directoryStructure/</guid><description>原文：https://gobuffalo.io/documentation/getting_started/directory-struct</description></item><item><title>支持</title><link>https://before80.github.io/go_docs/buffalo/support/</link><pubDate>Sun, 04 Feb 2024 21:04:29 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/support/</guid><description>原文：https://gobuffalo.io/documentation/support/ Support 支持 If you are looking for support, training, or consulting for your Buffalo project, the Gopher Guides (founded by Mark Bates -</description></item><item><title>staticFiles</title><link>https://before80.github.io/go_docs/beego/mvcIntroduction/views/staticFiles/</link><pubDate>Sun, 04 Feb 2024 10:04:34 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/mvcIntroduction/views/staticFiles/</guid><description>原文：https://beego.wiki/docs/mvc/view/static/ Static files 静态文件 Static Files 静态文件 Go already has the built-in http.ServeFile package to serve static files. Beego made a wrapper</description></item><item><title>CRUD 操作</title><link>https://before80.github.io/go_docs/beego/mvcIntroduction/models/crudOperations/</link><pubDate>Sun, 04 Feb 2024 10:00:25 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/mvcIntroduction/models/crudOperations/</guid><description>原文：https://beego.wiki/docs/mvc/model/object/ CRUD Operations - CRUD 操作 CRUD of Object 对象的 CRUD If the value of the primary key is already known, Read, Insert, Update,</description></item><item><title>控制器函数</title><link>https://before80.github.io/go_docs/beego/mvcIntroduction/controllers/controllerFuncs/</link><pubDate>Sun, 04 Feb 2024 09:57:05 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/mvcIntroduction/controllers/controllerFuncs/</guid><description>原文：https://beego.wiki/docs/mvc/controller/controller/ Controller funcs 控制器函数 Introduction to controller 控制器简介 Note: From</description></item><item><title>upgradeBeego</title><link>https://before80.github.io/go_docs/beego/intro/upgradeBeego/</link><pubDate>Sun, 04 Feb 2024 09:36:06 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/intro/upgradeBeego/</guid><description>原文：https://beego.wiki/docs/intro/upgrade/ Upgrade Beego 升级 Beego Upgrade beego 2.0.0 升级 beego 2.0.0 Install the latest bee tool go get -u github.com/beego/bee/v2 Upgrading Beego go get -u github.com/beego/beego/v2 ​ 安</description></item><item><title>待办事项列表</title><link>https://before80.github.io/go_docs/beego/demos/todoList/</link><pubDate>Sun, 04 Feb 2024 09:35:09 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/demos/todoList/</guid><description>原文：https://beego.wiki/docs/examples/todo/ To-do List 待办事项列表 An AngularJS + Beego project ​ 一个 AngularJS + Beego 项目 1 2 3 4 5 6 7 8</description></item><item><title>cache 模块</title><link>https://before80.github.io/go_docs/beego/modules/cache/</link><pubDate>Sun, 04 Feb 2024 09:31:15 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/modules/cache/</guid><description>原文：https://beego.wiki/docs/module/cache/ Cache Module 缓存模块 Beego’s cache module is used for caching data, inspired by database/sql. It supports four cache providers: file, memcache,</description></item><item><title>使用 Systemctl 部署</title><link>https://before80.github.io/go_docs/beego/deployment/deploymentWithSystemctl/</link><pubDate>Sun, 04 Feb 2024 09:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/deployment/deploymentWithSystemctl/</guid><description>原文：https://beego.wiki/docs/deploy/systemctl/ Deployment with Systemctl 使用 Systemctl 部署 Systemctl command is a command used to manage and control services. It allows you to enable, disable, view,</description></item><item><title>控制器</title><link>https://before80.github.io/go_docs/beego/quickStart/controller/</link><pubDate>Sun, 04 Feb 2024 09:10:26 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/quickStart/controller/</guid><description>原文：https://beego.wiki/docs/quickstart/controller/ Controller 控制器 Controller logic 控制器逻辑 The previous section covered user requests to controllers. This section</description></item><item><title>file server</title><link>https://before80.github.io/go_docs/thirdPkg/chi/examples/fileServer/</link><pubDate>Wed, 31 Jan 2024 19:11:25 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/chi/examples/fileServer/</guid><description>原文：https://github.com/go-chi/chi/blob/master/_examples/fileserver/main</description></item><item><title>routing</title><link>https://before80.github.io/go_docs/thirdPkg/chi/routing/</link><pubDate>Wed, 31 Jan 2024 19:05:12 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/chi/routing/</guid><description>原文：https://go-chi.io/#/pages/routing 🔌 Routing 🔌 路由 Introduction 简介 Routing refers to how an application&amp;rsquo;s endpoints (URIs) respond to client requests. ​ 路由是指应用程序的端点 (URI) 如</description></item><item><title>技术说明 3</title><link>https://before80.github.io/go_docs/thirdPkg/lua/notes/3/</link><pubDate>Thu, 25 Jan 2024 22:16:45 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/lua/notes/3/</guid><description>原文：https://www.lua.org/notes/ltn003.html Technical Note 3 技术说明 3 Last update: Mon Aug 12 15:48:51 EST 2002 by lhf. Interfacing Lua to an operating system - Lua 与操作系</description></item><item><title>3 – 语言</title><link>https://before80.github.io/go_docs/thirdPkg/lua/Lua54ReferenceManual/3/</link><pubDate>Thu, 25 Jan 2024 14:34:30 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/lua/Lua54ReferenceManual/3/</guid><description>原文：https://www.lua.org/manual/5.4/manual.html 3 – The Language – 语言 This section describes the lexis, the syntax, and the semantics of Lua. In other words, this section describes</description></item><item><title>分片</title><link>https://before80.github.io/go_docs/gorm/AdancedTopics/sharding/</link><pubDate>Sat, 28 Oct 2023 14:34:44 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/AdancedTopics/sharding/</guid><description>原文：https://gorm.io/docs/sharding.html Sharding plugin using SQL parser and replace for splits large tables into smaller ones, redirects Query into sharding tables. Give you a high performance database access. ​ 分片插件使用</description></item><item><title>错误处理</title><link>https://before80.github.io/go_docs/gorm/Tutorials/errorHanding/</link><pubDate>Sat, 28 Oct 2023 14:29:47 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/Tutorials/errorHanding/</guid><description>原文：https://gorm.io/docs/error_handling.html In Go, error handling is important. ​ 在Go语言中，错误处理非常重要。 You are encouraged to</description></item><item><title>一对一</title><link>https://before80.github.io/go_docs/gorm/Associations/HasOne/</link><pubDate>Sat, 28 Oct 2023 14:28:02 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/Associations/HasOne/</guid><description>原文：https://gorm.io/docs/has_one.html 一对一 Has One A has one association sets up a one-to-one connection with another model, but with somewhat different semantics (and consequences). This association indicates that each instance of a model contains</description></item><item><title>查询</title><link>https://before80.github.io/go_docs/gorm/CRUDInterface/query/</link><pubDate>Sat, 28 Oct 2023 14:25:43 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/CRUDInterface/query/</guid><description>原文：https://gorm.io/docs/query.html 检索单个对象 Retrieving a single object GORM provides First, Take, Last methods to retrieve a single object from the database, it adds LIMIT 1 condition when querying the database, and it will</description></item><item><title>声明模型</title><link>https://before80.github.io/go_docs/gorm/GettingStarted/declaringModels/</link><pubDate>Sat, 28 Oct 2023 14:24:20 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/GettingStarted/declaringModels/</guid><description>原文：https://gorm.io/docs/models.html Models are normal structs with basic Go types, pointers/alias of them or custom types implementing Scanner and Valuer interfaces ​ 模型是具有基本Go类型的普通结</description></item><item><title>Variables</title><link>https://before80.github.io/go_docs/example/variables/</link><pubDate>Mon, 07 Aug 2023 13:31:21 +0800</pubDate><guid>https://before80.github.io/go_docs/example/variables/</guid><description>Variables 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69</description></item><item><title>values</title><link>https://before80.github.io/go_docs/example/values/</link><pubDate>Mon, 07 Aug 2023 13:31:12 +0800</pubDate><guid>https://before80.github.io/go_docs/example/values/</guid><description>Values 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 package main import &amp;#34;fmt&amp;#34; func main() { // 字符串 fmt.Printf(&amp;#34;%v,%T\n&amp;#34;, &amp;#34;Hi&amp;#34;, &amp;#34;Hi&amp;#34;) fmt.Printf(&amp;#34;%v,%T\n&amp;#34;, &amp;#34;Hi &amp;#34;+&amp;#34;golang&amp;#34;, &amp;#34;Hi &amp;#34;+&amp;#34;golang&amp;#34;) //</description></item><item><title>示例测试</title><link>https://before80.github.io/go_docs/asu/test/example/</link><pubDate>Mon, 12 Jun 2023 17:21:44 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/test/example/</guid><description/></item><item><title>Go 1.2发布了</title><link>https://before80.github.io/go_docs/goBlog/2013/Go1_2IsReleased/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2013/Go1_2IsReleased/</guid><description>Go 1.2 is released - Go 1.2发布了 原文：https://go.dev/blog/go12 Andrew Gerrand 1 December 2013 We are pleased to announce the release of Go 1.2, the latest stable version of the Go Programming Language. 我们很高兴地宣</description></item><item><title>Go 11 岁了</title><link>https://before80.github.io/go_docs/goBlog/2020/ElevenYearsOfGo/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2020/ElevenYearsOfGo/</guid><description>Eleven Years of Go - go 11 岁了 原文：https://go.dev/blog/11years Russ Cox, for the Go team 10 November 2020 Today we celebrate the eleventh birthday of the Go open source release. The parties we had for Go turning 10 seem like</description></item><item><title>Go 7 岁了</title><link>https://before80.github.io/go_docs/goBlog/2016/SevenYearsOfGo/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2016/SevenYearsOfGo/</guid><description>Seven years of Go - Go 7 岁了 原文：https://go.dev/blog/7years The Go Team 10 November 2016 { align=left } Today marks seven years since we open-sourced our preliminary sketch of Go. With the help of the open source community, including more than</description></item><item><title>Go 9 岁了</title><link>https://before80.github.io/go_docs/goBlog/2018/NineYearsOfGo/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2018/NineYearsOfGo/</guid><description>Nine years of Go - Go 9 岁了 原文：https://go.dev/blog/9years Steve Francia 10 November 2018 Introduction 简介 Today marks the ninth anniversary of the day we open-sourced our initial sketch of Go. On each anniversary we like to take time to</description></item><item><title>Go GC：优先考虑低延迟和简单性</title><link>https://before80.github.io/go_docs/goBlog/2015/GoGCPrioritizingLowLatencyAndSimplicity/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2015/GoGCPrioritizingLowLatencyAndSimplicity/</guid><description>Go GC: Prioritizing low latency and simplicity - Go GC：优先考虑低延迟和简单性 原文：https://go.dev/blog/go15gc Richard Hudson 31 August 2015 The Setup 设置 Go is building a garbage collector (GC) not only</description></item><item><title>Go进入10周年</title><link>https://before80.github.io/go_docs/goBlog/2019/GoTurns10/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2019/GoTurns10/</guid><description>Go Turns 10 - go进入10周年 原文：https://go.dev/blog/10years Russ Cox, for the Go team 8 November 2019 Happy birthday, Go! 生日快乐，Go! This weekend we celebrate the 10th anniversary of</description></item><item><title>Weekly Snapshot History</title><link>https://before80.github.io/go_docs/docs/Other/WeeklySnapshotHistory/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/Other/WeeklySnapshotHistory/</guid><description>Weekly Snapshot History 原文：https://go.dev/doc/devel/weekly This page summarizes the changes between tagged weekly snapshots of Go. Such snapshots are no longer created. This page remains as a historical reference only. For recent information, see the change log and</description></item><item><title>从0到 Go：24小时内在谷歌主页上发布</title><link>https://before80.github.io/go_docs/goBlog/2011/FromZeroToGoLaunchingOnTheGoogleHomepageIn24Hours/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2011/FromZeroToGoLaunchingOnTheGoogleHomepageIn24Hours/</guid><description>From zero to Go: launching on the Google homepage in 24 hours - 从0到 Go：24小时内在谷歌主页上发布 原文：https://go.dev/blog/turkey-doodle Reinaldo Aguiar</description></item><item><title>社区外展工作小组</title><link>https://before80.github.io/go_docs/goBlog/2017/CommunityOutreachWorkingGroup/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2017/CommunityOutreachWorkingGroup/</guid><description>Community Outreach Working Group - 社区外展工作小组 原文：https://go.dev/blog/cwg Steve Francia &amp;amp; Cassandra Salisbury 5 September 2017 Announcing the Go Community Outreach Working Group 宣布Go社区推广工作组的成立 The Go</description></item><item><title>与 Go 相处的5年</title><link>https://before80.github.io/go_docs/goBlog/2014/HalfADecadeWithGo/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2014/HalfADecadeWithGo/</guid><description>Half a decade with Go - 与 Go 相处的5年 原文：https://go.dev/blog/5years Andrew Gerrand 10 November 2014 Five years ago we launched the Go project. It seems like only yesterday that we were preparing the initial public release: our website</description></item><item><title>真正的 Go 项目：SmartTwitter 和web.go</title><link>https://before80.github.io/go_docs/goBlog/2010/RealGoProjectsSmartTwitterAndWeb.go/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2010/RealGoProjectsSmartTwitterAndWeb.go/</guid><description>Real Go Projects: SmartTwitter and web.go - 真正的 Go 项目：SmartTwitter 和web.go 原文：https://go.dev/blog/smarttwitter Michael Hoisie</description></item><item><title>组织 Go 代码</title><link>https://before80.github.io/go_docs/goBlog/2012/OrganizingGoCode/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2012/OrganizingGoCode/</guid><description>Organizing Go code - 组织 Go 代码 原文：https://go.dev/blog/organizing-go-code Andrew Gerrand 16 August 2012 Introduction 简介 Go code is organized differently to that of other languages. This post</description></item><item><title>Go CNA策略</title><link>https://before80.github.io/go_docs/docs/GoSecurity/GoCNAPolicy/</link><pubDate>Thu, 18 May 2023 16:50:08 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/GoSecurity/GoCNAPolicy/</guid><description>Go CNA Policy - Go CNA策略 原文：https://go.dev/security/vuln/cna 概述 ​ Go CNA是CVE编号机构，为Go生态系统中的</description></item><item><title>Go 安全策略</title><link>https://before80.github.io/go_docs/docs/GoSecurity/GoSecurityPolicy/</link><pubDate>Thu, 18 May 2023 16:50:08 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/GoSecurity/GoSecurityPolicy/</guid><description>Go Security Policy - Go 安全策略 原文：https://go.dev/security/policy 概述 ​ 本文档介绍Go安全团队处理报告问题的流程以及期望得</description></item><item><title>从源码安装 Go</title><link>https://before80.github.io/go_docs/docs/GettingStarted/InstallingGoFromSource/</link><pubDate>Thu, 18 May 2023 16:35:08 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/GettingStarted/InstallingGoFromSource/</guid><description>Installing Go from source - 从源码安装 Go 原文：https://go.dev/doc/install/source 本主题描述了如何从源代码构建和运行 Go。要使用</description></item><item><title>管理模块源代码</title><link>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/DevelopingModules/ManagingModuleSource/</link><pubDate>Wed, 17 May 2023 15:03:14 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/DevelopingModules/ManagingModuleSource/</guid><description>Managing module source - 管理模块源代码 原文：https://go.dev/doc/modules/managing-source ​ 当您开发模块并发布给其他人</description></item><item><title>执行不返回数据的SQL语句</title><link>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/AccessingDatabases/ExecutingSQLStatementsThatDoNotReturnData/</link><pubDate>Wed, 17 May 2023 15:03:14 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/AccessingDatabases/ExecutingSQLStatementsThatDoNotReturnData/</guid><description>Executing SQL statements that don&amp;rsquo;t return data - 执行不返回数据的SQL语句 原文：https://go.dev/doc/database/change-data ​ 当你执行不返</description></item><item><title>More types: structs, slices, and maps</title><link>https://before80.github.io/go_docs/docs/GoTour/Basics/MoreTypes_StuctsSlicesAndMaps/</link><pubDate>Wed, 17 May 2023 12:10:24 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/GoTour/Basics/MoreTypes_StuctsSlicesAndMaps/</guid><description>More types: structs, slices, and maps. Pointers 指针 原文：https://go.dev/tour/moretypes/1 ​ Go拥有指针。指针保存了值的内存地址。 ​ 类型*T是一</description></item><item><title>Contribution Guide</title><link>https://before80.github.io/go_docs/docs/References/ContributionGuide/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/References/ContributionGuide/</guid><description>Contribution Guide 原文：https://go.dev/doc/contribute The Go project welcomes all contributors. This document is a guide to help you through the process of contributing to the Go project, which is a little different from that used by other open source projects.</description></item><item><title>go.mod 文件</title><link>https://before80.github.io/go_docs/docs/References/GoModulesReference/gomodFiles/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/References/GoModulesReference/gomodFiles/</guid><description>go.mod files - go.mod 文件 原文：https://go.dev/ref/mod#go-mod-file ​ 模块由其根目录下的名为go.mod的UTF-8编码的</description></item><item><title>go1.21</title><link>https://before80.github.io/go_docs/cmd/go/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/go/</guid><description>原文：https://pkg.go.dev/cmd/go@go1.21.5 Overview go Go is a tool for managing Go source code. ​ go 是管理go 源代码的工具。 Usage: ​ 用法： go &amp;lt;command&amp;gt; [arguments]</description></item><item><title>gzip</title><link>https://before80.github.io/go_docs/stdLib/compress/gzip/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/compress/gzip/</guid><description>原文：https://pkg.go.dev/compress/gzip@go1.24.2 Package gzip implements reading and writing of gzip format compressed files, as specified in RFC 1952. ​ gzip 包实现了对 gzip 格式</description></item><item><title>Release History</title><link>https://before80.github.io/go_docs/docs/References/ReleaseHistory/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/References/ReleaseHistory/</guid><description>Release History 原文：https://go.dev/doc/devel/release 本页总结了Go官方稳定版本之间的变化。变更日志中有完整的细节。 要更</description></item><item><title>ring</title><link>https://before80.github.io/go_docs/stdLib/container/ring/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/container/ring/</guid><description>原文：https://pkg.go.dev/container/ring@go1.24.2 Package ring implements operations on circular lists. ​ ring 包实现了对循环列表（circul</description></item><item><title>源代码表示</title><link>https://before80.github.io/go_docs/langSpec/SourceCodeRepresentation/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/SourceCodeRepresentation/</guid><description>Source code representation 源代码表示 原文：https://go.dev/ref/spec#Source_code_representation Source code is Unicode text encoded in UTF-8. The</description></item><item><title>server_messaging</title><link>https://before80.github.io/go_docs/goconvey/lib/web/server_messaging/</link><pubDate>Sun, 15 Dec 2024 21:22:14 +0800</pubDate><guid>https://before80.github.io/go_docs/goconvey/lib/web/server_messaging/</guid><description>原文：https://pkg.go.dev/github.com/smartystreets/goconvey@v1.8.1/web/ser</description></item><item><title>composition</title><link>https://before80.github.io/go_docs/goconvey/composition/</link><pubDate>Sun, 15 Dec 2024 11:18:27 +0800</pubDate><guid>https://before80.github.io/go_docs/goconvey/composition/</guid><description>原文：https://github.com/smartystreets/goconvey/wiki/Composition 收录该文档时间： 2024-12-15T11:18:27+08:00</description></item><item><title>suite</title><link>https://before80.github.io/go_docs/testify/suite/</link><pubDate>Sun, 15 Dec 2024 11:08:05 +0800</pubDate><guid>https://before80.github.io/go_docs/testify/suite/</guid><description>原文：https://pkg.go.dev/github.com/stretchr/testify/suite 收录该文档时间： 2024-12-15T11:08:05+08:00 版本：Ver</description></item><item><title>redblacktree</title><link>https://before80.github.io/go_docs/thirdPkg/gods/trees/redblacktree/</link><pubDate>Sat, 07 Dec 2024 11:10:05 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/gods/trees/redblacktree/</guid><description>原文：https://pkg.go.dev/github.com/emirpasic/gods/v2@v2.0.0-alpha/trees/</description></item><item><title>priorityqueue</title><link>https://before80.github.io/go_docs/thirdPkg/gods/queues/priorityqueue/</link><pubDate>Sat, 07 Dec 2024 11:07:42 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/gods/queues/priorityqueue/</guid><description>原文：https://pkg.go.dev/github.com/emirpasic/gods/v2@v2.0.0-alpha/queues</description></item><item><title>treebidimap</title><link>https://before80.github.io/go_docs/thirdPkg/gods/maps/treebidimap/</link><pubDate>Sat, 07 Dec 2024 11:04:17 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/gods/maps/treebidimap/</guid><description>原文：https://pkg.go.dev/github.com/emirpasic/gods/v2@v2.0.0-alpha/maps/t</description></item><item><title>使用代理</title><link>https://before80.github.io/go_docs/buffalo/deploy/usingAProxy/</link><pubDate>Sun, 04 Feb 2024 21:20:13 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/deploy/usingAProxy/</guid><description>原文：https://gobuffalo.io/documentation/deploy/proxy/ Using a Proxy 使用代理 Buffalo can be used raw to handle queries. You just need to</description></item><item><title>邮件发送器</title><link>https://before80.github.io/go_docs/buffalo/guides/mailers/</link><pubDate>Sun, 04 Feb 2024 21:17:02 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/guides/mailers/</guid><description>原文：https://gobuffalo.io/documentation/guides/mailers/ Mailers 邮件发送器 E-mails are part of most (web) systems. It’s</description></item><item><title>Buffalo 集成</title><link>https://before80.github.io/go_docs/buffalo/database/buffaloIntegration/</link><pubDate>Sun, 04 Feb 2024 21:13:08 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/database/buffaloIntegration/</guid><description>原文：https://gobuffalo.io/documentation/database/buffalo-integration/ Buffalo Integration Buffalo</description></item><item><title>部分</title><link>https://before80.github.io/go_docs/buffalo/frontend/partials/</link><pubDate>Sun, 04 Feb 2024 21:10:26 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/frontend/partials/</guid><description>原文：https://gobuffalo.io/documentation/frontend-layer/partials/ Partials 部分 This document only applies when</description></item><item><title>context</title><link>https://before80.github.io/go_docs/buffalo/requestHandling/context/</link><pubDate>Sun, 04 Feb 2024 21:07:58 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/requestHandling/context/</guid><description>原文：https://gobuffalo.io/documentation/request_handling/context/ Context 上下文 At the heart</description></item><item><title>配置</title><link>https://before80.github.io/go_docs/buffalo/gettingStarted/configuration/</link><pubDate>Sun, 04 Feb 2024 21:06:28 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/gettingStarted/configuration/</guid><description>原文：https://gobuffalo.io/documentation/getting_started/configuration/ Configuration 配</description></item><item><title>故障排除</title><link>https://before80.github.io/go_docs/buffalo/troubleshooting/</link><pubDate>Sun, 04 Feb 2024 21:04:53 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/troubleshooting/</guid><description>原文：https://gobuffalo.io/documentation/troubleshooting/ Troubleshooting 故障排除 App Crashes with securecookie: hash key is not set 应用</description></item><item><title>分页</title><link>https://before80.github.io/go_docs/beego/mvcIntroduction/views/pagination/</link><pubDate>Sun, 04 Feb 2024 10:04:45 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/mvcIntroduction/views/pagination/</guid><description>原文：https://beego.wiki/docs/mvc/view/page/ Pagination 分页 Pagination 分页 We use often pagination in templates. How do we do that? We have created this demo for pagination. We hope it’</description></item><item><title>高级查询</title><link>https://before80.github.io/go_docs/beego/mvcIntroduction/models/advancedQueries/</link><pubDate>Sun, 04 Feb 2024 10:00:41 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/mvcIntroduction/models/advancedQueries/</guid><description>原文：https://beego.wiki/docs/mvc/model/query/ Advanced Queries 高级查询 Advanced Queries 高级查询 ORM uses QuerySeter to organize queries. Every method that returns QuerySeter will give you a</description></item><item><title>请求参数</title><link>https://before80.github.io/go_docs/beego/mvcIntroduction/controllers/requestParameters/</link><pubDate>Sun, 04 Feb 2024 09:57:22 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/mvcIntroduction/controllers/requestParameters/</guid><description>原文：https://beego.wiki/docs/mvc/controller/params/ Request parameters 请求参数 Accept parameters 接受参数 Beego will automatically parse data passed by user from</description></item><item><title>Beego 介绍</title><link>https://before80.github.io/go_docs/beego/intro/beegoIntro/</link><pubDate>Sun, 04 Feb 2024 09:40:48 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/intro/beegoIntro/</guid><description>原文：https://beego.wiki/docs/intro/introduction/ Beego introduction - Beego 介绍 What is Beego? Beego 是什么？ Beego is a RESTful HTTP framework for the rapid development</description></item><item><title>log 模块</title><link>https://before80.github.io/go_docs/beego/modules/logs/</link><pubDate>Sun, 04 Feb 2024 09:31:23 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/modules/logs/</guid><description>原文：https://beego.wiki/docs/module/logs/ Logs Module 日志模块 Logging 日志记录 The logging module is inspired by database/sql. It supports file, console, net and smtp as destination providers by default. It</description></item><item><title>使用 nginx 部署</title><link>https://before80.github.io/go_docs/beego/deployment/deploymentWithNginx/</link><pubDate>Sun, 04 Feb 2024 09:13:32 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/deployment/deploymentWithNginx/</guid><description>原文：https://beego.wiki/docs/deploy/nginx/ Deployment with nginx 使用 nginx 部署 Go already has a standalone http server. But we still want to have nginx to do more for us such as logging,</description></item><item><title>模型</title><link>https://before80.github.io/go_docs/beego/quickStart/models/</link><pubDate>Sun, 04 Feb 2024 09:10:33 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/quickStart/models/</guid><description>原文：https://beego.wiki/docs/quickstart/model/ Models 模型 Creating models 创建模型 Models are normally the best way to handle the numerous databases used in web applications. The bee</description></item><item><title>graceful</title><link>https://before80.github.io/go_docs/thirdPkg/chi/examples/graceful/</link><pubDate>Wed, 31 Jan 2024 19:11:37 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/chi/examples/graceful/</guid><description>原文：https://github.com/go-chi/chi/blob/master/_examples/graceful/main.g</description></item><item><title>技术说明 4</title><link>https://before80.github.io/go_docs/thirdPkg/lua/notes/4/</link><pubDate>Thu, 25 Jan 2024 22:16:52 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/lua/notes/4/</guid><description>原文：https://www.lua.org/notes/ltn004.html Technical Note 4 技术说明 4 Last update: Mon Aug 12 15:49:10 EST 2002 by lhf. A thin API for interlanguage working, or Lua in Four Easy Calls</description></item><item><title>4 – 应用程序接口</title><link>https://before80.github.io/go_docs/thirdPkg/lua/Lua54ReferenceManual/4/</link><pubDate>Thu, 25 Jan 2024 14:34:35 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/lua/Lua54ReferenceManual/4/</guid><description>原文：https://www.lua.org/manual/5.4/manual.html 4 – The Application Program Interface – 应用程序接口 This section describes the C API for Lua, that is, the set</description></item><item><title>Serializer</title><link>https://before80.github.io/go_docs/gorm/AdancedTopics/serializer/</link><pubDate>Sat, 28 Oct 2023 14:34:57 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/AdancedTopics/serializer/</guid><description>原文：https://gorm.io/docs/serializer.html Serializer is an extensible interface that allows to customize how to serialize and deserialize data with databasae. ​ 序列化器是一个可扩展的接口</description></item><item><title>方法链</title><link>https://before80.github.io/go_docs/gorm/Tutorials/methodChaining/</link><pubDate>Sat, 28 Oct 2023 14:30:07 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/Tutorials/methodChaining/</guid><description>原文：https://gorm.io/docs/method_chaining.html GORM allows method chaining, so you can write code like this: ​ GORM允许方法链，因此你可</description></item><item><title>多对多</title><link>https://before80.github.io/go_docs/gorm/Associations/manyToMany/</link><pubDate>Sat, 28 Oct 2023 14:28:27 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/Associations/manyToMany/</guid><description>原文：https://gorm.io/docs/many_to_many.html 多对多 Many To Many Many to Many add a join table between two models. ​ 多对多在两个模型之间添加</description></item><item><title>多对一</title><link>https://before80.github.io/go_docs/gorm/Associations/HasMany/</link><pubDate>Sat, 28 Oct 2023 14:28:11 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/Associations/HasMany/</guid><description>原文：https://gorm.io/docs/has_many.html 多对一 Has Many A has many association sets up a one-to-many connection with another model, unlike has one, the owner could have zero or many instances of models. ​ has m</description></item><item><title>高级查询</title><link>https://before80.github.io/go_docs/gorm/CRUDInterface/advancedQuery/</link><pubDate>Sat, 28 Oct 2023 14:26:01 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/CRUDInterface/advancedQuery/</guid><description>原文：https://gorm.io/docs/advanced_query.html 智能选择字段 Smart Select Fields GORM allows selecting specific fields with Select, if you often use this in your application, maybe you want</description></item><item><title>连接到数据库</title><link>https://before80.github.io/go_docs/gorm/GettingStarted/connectingToDatabase/</link><pubDate>Sat, 28 Oct 2023 14:24:49 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/GettingStarted/connectingToDatabase/</guid><description>原文：https://gorm.io/docs/connecting_to_the_database.html GORM officially supports the databases MySQL, PostgreSQL, SQLite, SQL Server, and TiDB ​ GO</description></item><item><title>constants</title><link>https://before80.github.io/go_docs/example/constants/</link><pubDate>Mon, 07 Aug 2023 13:31:30 +0800</pubDate><guid>https://before80.github.io/go_docs/example/constants/</guid><description>constants 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69</description></item><item><title>模糊测试</title><link>https://before80.github.io/go_docs/asu/test/fuzzing/</link><pubDate>Mon, 12 Jun 2023 17:21:54 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/test/fuzzing/</guid><description/></item><item><title>Gccgo in GCC 4.7.1</title><link>https://before80.github.io/go_docs/goBlog/2012/GccgoInGC-4_7_1/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2012/GccgoInGC-4_7_1/</guid><description>Gccgo in GCC 4.7.1 原文：https://go.dev/blog/gccgo-in-gcc-471 Ian Lance Taylor 11 July 2012 The Go language has always been defined by a spec, not an implementation. The Go team has written two different compilers</description></item><item><title>Go 1.5发布了</title><link>https://before80.github.io/go_docs/goBlog/2015/Go1_5IsReleased/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2015/Go1_5IsReleased/</guid><description>Go 1.5 is released - Go 1.5发布了 原文：https://go.dev/blog/go1.5 Andrew Gerrand 19 August 2015 Today the Go project is proud to release Go 1.5, the sixth major stable release of Go. 今天，Go项目很</description></item><item><title>Go 1.9发布了</title><link>https://before80.github.io/go_docs/goBlog/2017/Go1_9IsReleased/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2017/Go1_9IsReleased/</guid><description>Go 1.9 is released - Go 1.9发布了 原文：https://go.dev/blog/go1.9 Francesc Campoy 24 August 2017 Today the Go team is happy to announce the release of Go 1.9. You can get it from the download page. There are many changes</description></item><item><title>Go 编程语言两岁了</title><link>https://before80.github.io/go_docs/goBlog/2011/TheGoProgrammingLanguageTurnsTwo/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2011/TheGoProgrammingLanguageTurnsTwo/</guid><description>The Go Programming Language turns two - Go 编程语言两岁了 原文：https://go.dev/blog/2years Andrew Gerrand 10 November 2011 Two years ago a small team at Google went public with their fledgling project - the Go Programming Language. They presented</description></item><item><title>Go 并发模式：超时和继续</title><link>https://before80.github.io/go_docs/goBlog/2010/GoConcurrencyPatternsTimingOutMovingOn/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2010/GoConcurrencyPatternsTimingOutMovingOn/</guid><description>Go Concurrency Patterns: Timing out, moving on - Go 并发模式：超时和继续 原文：https://go.dev/blog/concurrency-timeouts Andrew Gerrand 23 September 2010 201</description></item><item><title>Go 的文本规范化</title><link>https://before80.github.io/go_docs/goBlog/2013/TextNormalizationInGo/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2013/TextNormalizationInGo/</guid><description>Text normalization in Go - Go 的文本规范化 原文：https://go.dev/blog/normalization Marcel van Lohuizen 26 November 2013 Introduction 简介 An earlier post talked about strings, bytes and characters in Go. I’</description></item><item><title>Gollvm</title><link>https://before80.github.io/go_docs/docs/Other/gollvm/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/Other/gollvm/</guid><description>Gollvm 原文：https://go.googlesource.com/gollvm/ Gollvm is an LLVM-based Go compiler. It incorporates &amp;ldquo;gofrontend&amp;rdquo; (a Go language front end written in C++ and shared with GCCGO), a bridge component (which translates from gofrontend IR to LLVM</description></item><item><title>Go模块：V2版及以后</title><link>https://before80.github.io/go_docs/goBlog/2019/GoModulesV2AndBeyond/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2019/GoModulesV2AndBeyond/</guid><description>Go Modules: v2 and Beyond - go模块：V2版及以后 原文：https://go.dev/blog/v2-go-modules Jean de Klerk and Tyler Bui-Palsulich 7 November 2019 Introduction 简介 This post is part 4</description></item><item><title>参与2018年 Go 用户调查</title><link>https://before80.github.io/go_docs/goBlog/2018/ParticipateInThe2018GoUserSurvey/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2018/ParticipateInThe2018GoUserSurvey/</guid><description>Participate in the 2018 Go User Survey - 参与2018年 go 用户调查 原文：https://go.dev/blog/survey2018 Ran Tao, Steve Francia 8 November 2018 The Go project wants to hear from you, the Go</description></item><item><title>介绍一下HTTP追踪</title><link>https://before80.github.io/go_docs/goBlog/2016/IntroducingHTTPTracing/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2016/IntroducingHTTPTracing/</guid><description>Introducing HTTP Tracing - 介绍一下HTTP追踪 原文：https://go.dev/blog/http-tracing Jaana Burcu Dogan 4 October 2016 Introduction 简介 In Go 1.7 we introduced HTTP tracing, a facility to gather fine-grained</description></item><item><title>在Google I/O和Gopher SummerFest上的 go</title><link>https://before80.github.io/go_docs/goBlog/2014/GoAtGoogleIOAndGopherSummerFest/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2014/GoAtGoogleIOAndGopherSummerFest/</guid><description>Go at Google I/O and Gopher SummerFest - 在Google I/O和Gopher SummerFest上的 go 原文：https://go.dev/blog/io2014 Francesc Campoy 6</description></item><item><title>Go 的漏洞管理</title><link>https://before80.github.io/go_docs/docs/GoSecurity/GoVulnerabilityManagement/</link><pubDate>Thu, 18 May 2023 16:50:08 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/GoSecurity/GoVulnerabilityManagement/</guid><description>Go Vulnerability Management - Go 的漏洞管理 原文：https://go.dev/security/vuln/ 概述 ​ Go帮助开发人员检测、评估和解决存在被攻击者利用风</description></item><item><title>Setting up and using gccgo</title><link>https://before80.github.io/go_docs/docs/GettingStarted/SettingUpAndUsingGccgo/</link><pubDate>Thu, 18 May 2023 16:35:08 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/GettingStarted/SettingUpAndUsingGccgo/</guid><description>Setting up and using gccgo 原文：https://go.dev/doc/install/gccgo ​ 本文介绍了如何使用gccgo，这是Go语言的编译器。gcc</description></item><item><title>查询数据</title><link>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/AccessingDatabases/QueryingForData/</link><pubDate>Wed, 17 May 2023 15:03:14 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/AccessingDatabases/QueryingForData/</guid><description>Querying for data - 查询数据 原文：https://go.dev/doc/database/querying ​ 当执行返回数据的SQL语句时，使用datab</description></item><item><title>开发主版本更新</title><link>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/DevelopingModules/DevelopingAmajorVersionUpdate/</link><pubDate>Wed, 17 May 2023 15:03:14 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/DevelopingModules/DevelopingAmajorVersionUpdate/</guid><description>Developing a major version update - 开发主版本更新 ​ 当您在潜在的新版本中所做的更改无法保证模块用户的向后兼容性时，您必须更新到一个主要版本。例如，如果您更改了模块的</description></item><item><title>go1.19.3</title><link>https://before80.github.io/go_docs/cmd/go1/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/go1/</guid><description>go 原文：https://pkg.go.dev/cmd/go@go1.19.3 Overview 概述 ​ Go是一个管理Go源代码的工具。 用法： 1 go &amp;lt;command&amp;gt; [arguments] 这些命令（</description></item><item><title>lzw</title><link>https://before80.github.io/go_docs/stdLib/compress/lzw/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/compress/lzw/</guid><description>原文：https://pkg.go.dev/compress/lzw@go1.24.2 Package lzw implements the Lempel-Ziv-Welch compressed data format, described in T. A. Welch, &amp;ldquo;A Technique for High-Performance Data Compression&amp;rdquo;, Computer, 17(6) (June 1984), pp 8-19. ​ lzw</description></item><item><title>词汇元素</title><link>https://before80.github.io/go_docs/langSpec/LexicalElements/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/LexicalElements/</guid><description>Lexical elements 词汇元素 原文：https://go.dev/ref/spec#Lexical_elements Comments 注释 Comments serve as program documentation. There are two forms: ​ 注释服务于程序文</description></item><item><title>最小版本选择 (MVS)</title><link>https://before80.github.io/go_docs/docs/References/GoModulesReference/MVS/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/References/GoModulesReference/MVS/</guid><description>Minimal version selection (MVS) 最小版本选择 (MVS) 原文：https://go.dev/ref/mod#minimal-version-selection ​ Go 使用一种叫做</description></item><item><title>server_parser</title><link>https://before80.github.io/go_docs/goconvey/lib/web/server_parser/</link><pubDate>Sun, 15 Dec 2024 21:22:24 +0800</pubDate><guid>https://before80.github.io/go_docs/goconvey/lib/web/server_parser/</guid><description>原文：https://pkg.go.dev/github.com/smartystreets/goconvey@v1.8.1/web/ser</description></item><item><title>Custom Assertions - 自定义断言</title><link>https://before80.github.io/go_docs/goconvey/customAssertions/</link><pubDate>Sun, 15 Dec 2024 11:19:01 +0800</pubDate><guid>https://before80.github.io/go_docs/goconvey/customAssertions/</guid><description>原文：https://github.com/smartystreets/goconvey/wiki/Custom-Assertions 收录该</description></item><item><title>treemap</title><link>https://before80.github.io/go_docs/thirdPkg/gods/maps/treemap/</link><pubDate>Sat, 07 Dec 2024 11:04:27 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/gods/maps/treemap/</guid><description>原文：https://pkg.go.dev/github.com/emirpasic/gods/v2@v2.0.0-alpha/maps/t</description></item><item><title>任务</title><link>https://before80.github.io/go_docs/buffalo/guides/tasks/</link><pubDate>Sun, 04 Feb 2024 22:22:23 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/guides/tasks/</guid><description>原文：https://gobuffalo.io/documentation/guides/tasks/ Tasks 任务 Tasks are small scripts that are often needed when writing an application. These tasks might be</description></item><item><title>云提供商</title><link>https://before80.github.io/go_docs/buffalo/deploy/cloudProviders/</link><pubDate>Sun, 04 Feb 2024 21:20:30 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/deploy/cloudProviders/</guid><description>原文：https://gobuffalo.io/documentation/deploy/cloud-providers/ Cloud Providers 云提供商 Even if you</description></item><item><title>模型</title><link>https://before80.github.io/go_docs/buffalo/database/models/</link><pubDate>Sun, 04 Feb 2024 21:13:19 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/database/models/</guid><description>原文：https://gobuffalo.io/documentation/database/models/ Models 模型 Pop, as an ORM, allows you to translate database tables into Go structs.</description></item><item><title>帮助程序</title><link>https://before80.github.io/go_docs/buffalo/frontend/helpers/</link><pubDate>Sun, 04 Feb 2024 21:10:38 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/frontend/helpers/</guid><description>原文：https://gobuffalo.io/documentation/frontend-layer/helpers/ Helpers 帮助程序 This document only applies</description></item><item><title>请求绑定</title><link>https://before80.github.io/go_docs/buffalo/requestHandling/requestBinding/</link><pubDate>Sun, 04 Feb 2024 21:08:10 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/requestHandling/requestBinding/</guid><description>原文：https://gobuffalo.io/documentation/request_handling/bind/ Request Binding 请求绑定 The buffalo.Context interface has</description></item><item><title>工具集成</title><link>https://before80.github.io/go_docs/buffalo/gettingStarted/toolingIntegration/</link><pubDate>Sun, 04 Feb 2024 21:06:49 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/gettingStarted/toolingIntegration/</guid><description>原文：https://gobuffalo.io/documentation/getting_started/integrations/ Tooling Integration 工</description></item><item><title>使用原生 SQL 查询</title><link>https://before80.github.io/go_docs/beego/mvcIntroduction/models/rawSQLToQuery/</link><pubDate>Sun, 04 Feb 2024 10:00:58 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/mvcIntroduction/models/rawSQLToQuery/</guid><description>原文：https://beego.wiki/docs/mvc/model/rawsql/ Raw SQL to query 使用 Raw SQL 查询 Raw SQL to query 查询原始 SQL Using Raw SQL to query do</description></item><item><title>XSRF 过滤</title><link>https://before80.github.io/go_docs/beego/mvcIntroduction/controllers/xfrfFiltering/</link><pubDate>Sun, 04 Feb 2024 09:57:42 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/mvcIntroduction/controllers/xfrfFiltering/</guid><description>原文：https://beego.wiki/docs/mvc/controller/xsrf/ XSRF filtering - XSRF 过滤 Cross-Site Request Forgery 跨站请求伪造 XSRF, Cross-Site Request Forgery, is an important security</description></item><item><title>httplib 模块</title><link>https://before80.github.io/go_docs/beego/modules/httplib/</link><pubDate>Sun, 04 Feb 2024 09:31:30 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/modules/httplib/</guid><description>原文：https://beego.wiki/docs/module/httplib/ Httplib Module - Httplib 模块 Client Request 客户端请求 Similar to Curl, httplib is used to simulate http requests sent by clients. Similar to</description></item><item><title>使用 Apache 部署</title><link>https://before80.github.io/go_docs/beego/deployment/deploymentWithApache/</link><pubDate>Sun, 04 Feb 2024 09:13:44 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/deployment/deploymentWithApache/</guid><description>原文：https://beego.wiki/docs/deploy/apache/ Deployment with Apache 使用 Apache 部署 Apache is a web server and is set up to perform the same functions as nginx, serving as a reverse proxy</description></item><item><title>视图</title><link>https://before80.github.io/go_docs/beego/quickStart/view/</link><pubDate>Sun, 04 Feb 2024 09:10:48 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/quickStart/view/</guid><description>原文：https://beego.wiki/docs/quickstart/view/ View 视图 Creating views 创建视图 In the previous example, when creating the Controller the line this.TplName = &amp;quot;index.tpl&amp;quot; was used to declare the</description></item><item><title>hello world</title><link>https://before80.github.io/go_docs/thirdPkg/chi/examples/helloWorld/</link><pubDate>Wed, 31 Jan 2024 19:11:48 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/chi/examples/helloWorld/</guid><description>原文：https://github.com/go-chi/chi/blob/master/_examples/hello-world/mai</description></item><item><title>技术说明 5</title><link>https://before80.github.io/go_docs/thirdPkg/lua/notes/5/</link><pubDate>Thu, 25 Jan 2024 22:16:56 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/lua/notes/5/</guid><description>原文：https://www.lua.org/notes/ltn005.html Technical Note 5 技术说明 5 Last update: Wed Mar 12 11:51:13 EST 2003 by lhf. A template class for binding C++ to Lua 一个用于</description></item><item><title>5 – 辅助库</title><link>https://before80.github.io/go_docs/thirdPkg/lua/Lua54ReferenceManual/5/</link><pubDate>Thu, 25 Jan 2024 14:34:41 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/lua/Lua54ReferenceManual/5/</guid><description>原文：https://www.lua.org/manual/5.4/manual.html 5 – The Auxiliary Library – 辅助库 The auxiliary library provides several convenient functions to interface C with Lua. While the basic API</description></item><item><title>Prometheus</title><link>https://before80.github.io/go_docs/gorm/AdancedTopics/prometheus/</link><pubDate>Sat, 28 Oct 2023 14:35:08 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/AdancedTopics/prometheus/</guid><description>原文：https://gorm.io/docs/prometheus.html GORM provides Prometheus plugin to collect DBStats or user-defined metrics ​ GORM 提供了 Prometheus 插件来收集 DBStats 或用户自定义指标 https://github.com/go-gorm/prometheus</description></item><item><title>Session</title><link>https://before80.github.io/go_docs/gorm/Tutorials/session/</link><pubDate>Sat, 28 Oct 2023 14:30:17 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/Tutorials/session/</guid><description>原文：https://gorm.io/docs/session.html GORM provides Session method, which is a New Session Method, it allows to create a new session mode with configuration: ​ GORM提供了一个Sess</description></item><item><title>关联模式</title><link>https://before80.github.io/go_docs/gorm/Associations/associationMode/</link><pubDate>Sat, 28 Oct 2023 14:28:42 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/Associations/associationMode/</guid><description>原文：https://gorm.io/docs/associations.html 自动创建/更新 Auto Create/Update GORM will auto-save associations and its reference using Upsert when creating/updating a record. ​ GORM 在创建或更</description></item><item><title>更新</title><link>https://before80.github.io/go_docs/gorm/CRUDInterface/update/</link><pubDate>Sat, 28 Oct 2023 14:26:11 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/CRUDInterface/update/</guid><description>原文：https://gorm.io/docs/update.html 保存所有字段 Save All Fields Save will save all fields when performing the Updating SQL ​ Save 在执行更新 SQL 时会保存所有字段</description></item><item><title>for</title><link>https://before80.github.io/go_docs/example/for/</link><pubDate>Mon, 07 Aug 2023 13:31:41 +0800</pubDate><guid>https://before80.github.io/go_docs/example/for/</guid><description>for 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69</description></item><item><title>2012年谷歌I/O大会的视频</title><link>https://before80.github.io/go_docs/goBlog/2012/GoVideosFromGoogleIO2012/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2012/GoVideosFromGoogleIO2012/</guid><description>Go videos from Google I/O 2012 - 2012年谷歌I/O大会的视频 原文：https://go.dev/blog/io2012-videos Andrew Gerrand 2 July 2012 Introduction 简介 Phew! Google I/O is</description></item><item><title>2015年GopherCon综述</title><link>https://before80.github.io/go_docs/goBlog/2015/GopherCon2015Roundup/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2015/GopherCon2015Roundup/</guid><description>GopherCon 2015 Roundup - 2015年GopherCon综述 原文：https://go.dev/blog/gophercon2015 Andrew Gerrand 28 July 2015 A few weeks ago, Go programmers from around the</description></item><item><title>go 1.3+ Compiler Overhaul</title><link>https://before80.github.io/go_docs/docs/Other/Go1_3PlusCompilerOverhaul/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/Other/Go1_3PlusCompilerOverhaul/</guid><description>go 1.3+ Compiler Overhaul 原文：https://docs.google.com/document/d/1P3BLR31VA8cvLJLfMibSuTdwTuF</description></item><item><title>Go 四岁了</title><link>https://before80.github.io/go_docs/goBlog/2013/FourYearsOfGo/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2013/FourYearsOfGo/</guid><description>Four years of Go - Go 四岁了 原文：https://go.dev/blog/4years Andrew Gerrand 10 November 2013 Today marks the fourth anniversary of Go as an open source project. 今天是Go作为一个开源项目的四</description></item><item><title>编写可扩展的App Engine应用程序</title><link>https://before80.github.io/go_docs/goBlog/2011/WritingScalableAppEngineApplications/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2011/WritingScalableAppEngineApplications/</guid><description>Writing scalable App Engine applications - 编写可扩展的App Engine应用程序 原文：https://go.dev/blog/appengine-scalable David Symonds 1 November</description></item><item><title>贡献研讨会</title><link>https://before80.github.io/go_docs/goBlog/2017/ContributionWorkshop/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2017/ContributionWorkshop/</guid><description>Contribution Workshop - 贡献研讨会 原文：https://go.dev/blog/contributor-workshop Steve Francia, Cassandra Salisbury, Matt Broberg, and Dmitri Shuralyov 9 August 2017 Event Overview 活动概述 by</description></item><item><title>介绍 Go Playground</title><link>https://before80.github.io/go_docs/goBlog/2010/IntroducingTheGoPlayground/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2010/IntroducingTheGoPlayground/</guid><description>Introducing the Go Playground - 介绍 Go Playground 原文：https://go.dev/blog/playground-intro Andrew Gerrand 15 September 2010 2010年9月15日 ​ 如果您今天访</description></item><item><title>使用子测试和子基准</title><link>https://before80.github.io/go_docs/goBlog/2016/UsingSubtestsAndSub-benchmarks/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2016/UsingSubtestsAndSub-benchmarks/</guid><description>Using Subtests and Sub-benchmarks - 使用子测试和子基准 原文：https://go.dev/blog/subtests Marcel van Lohuizen 3 October 2016 Introduction 简介 In Go 1.7, the testing package introduces a Run method on the T and B types</description></item><item><title>宣布2020年 Go 开发者调查</title><link>https://before80.github.io/go_docs/goBlog/2020/AnnouncingThe2020GoDeveloperSurvey/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2020/AnnouncingThe2020GoDeveloperSurvey/</guid><description>Announcing the 2020 Go Developer Survey - 宣布2020年 go 开发者调查 原文：https://go.dev/blog/survey2020 Alice Merrick 20 October 2020 Help shape the future of Go 帮助塑造Go</description></item><item><title>宣布App Engine的新 go 1.11运行时</title><link>https://before80.github.io/go_docs/goBlog/2018/AnnouncingAppEnginesNewGo1_11Runtime/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2018/AnnouncingAppEnginesNewGo1_11Runtime/</guid><description>Announcing App Engine’s New Go 1.11 Runtime - 宣布App Engine的新 go 1.11运行时 原文：https://go.dev/blog/appengine-g</description></item><item><title>用Docker部署 Go 服务器</title><link>https://before80.github.io/go_docs/goBlog/2014/DeployingGoServersWithDocker/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2014/DeployingGoServersWithDocker/</guid><description>Deploying Go servers with Docker - 用Docker部署 Go 服务器 原文：https://go.dev/blog/docker Andrew Gerrand 26 September 2014 Introduction 简介 This week Docker announced official base images for Go and other major languages, giving</description></item><item><title>在 Go 1.13中处理错误</title><link>https://before80.github.io/go_docs/goBlog/2019/WorkingWithErrorsInGo1_13/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2019/WorkingWithErrorsInGo1_13/</guid><description>Working with Errors in Go 1.13 - 在 go 1.13中处理错误 原文：https://go.dev/blog/go1.13-errors Damien Neil and Jonathan Amsterdam 17 October 2019 Introduction 简介 Go’s treatment</description></item><item><title>教程</title><link>https://before80.github.io/go_docs/docs/GettingStarted/Tutorials/</link><pubDate>Thu, 18 May 2023 16:35:08 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/GettingStarted/Tutorials/</guid><description>Tutorials - 教程 原文：https://go.dev/doc/tutorial/ 如果您对Go的某个部分感到陌生，可以看看下面链接的教程。 如果您还没有安</description></item><item><title>发布模块</title><link>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/DevelopingModules/PublishingAModule/</link><pubDate>Wed, 17 May 2023 15:03:14 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/DevelopingModules/PublishingAModule/</guid><description>Publishing a module - 发布模块 原文：https://go.dev/doc/modules/publishing ​ 当您想把一个模块提供给其他开发者时，您可以</description></item><item><title>使用预处理语句</title><link>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/AccessingDatabases/UsingPreparedStatements/</link><pubDate>Wed, 17 May 2023 15:03:14 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/AccessingDatabases/UsingPreparedStatements/</guid><description>Using prepared statements - 使用预处理语句 原文：https://go.dev/doc/database/prepared-statements ​ 你可以为重复使用</description></item><item><title>zlib</title><link>https://before80.github.io/go_docs/stdLib/compress/zlib/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/compress/zlib/</guid><description>原文：https://pkg.go.dev/compress/zlib@go1.24.2 Package zlib implements reading and writing of zlib format compressed data, as specified in RFC 1950. ​ zlib 包实现了对 RFC 1950 中</description></item><item><title>常量</title><link>https://before80.github.io/go_docs/langSpec/Constants/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/Constants/</guid><description>Constants 常量 原文：https://go.dev/ref/spec#Constants There are boolean constants, rune constants, integer constants, floating-point constants, complex constants, and string constants. Rune, integer, floating-point, and complex constants are collectively called numeric constants. ​ 有布尔常</description></item><item><title>模块图的修剪</title><link>https://before80.github.io/go_docs/docs/References/GoModulesReference/ModuleGraphPruning/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/References/GoModulesReference/ModuleGraphPruning/</guid><description>Module graph pruning 模块图的修剪 原文：https://go.dev/ref/mod#graph-pruning ​ 如果主模块是go 1.17或更高版本，用于m</description></item><item><title>server_system</title><link>https://before80.github.io/go_docs/goconvey/lib/web/server_system/</link><pubDate>Sun, 15 Dec 2024 21:22:32 +0800</pubDate><guid>https://before80.github.io/go_docs/goconvey/lib/web/server_system/</guid><description>原文：https://pkg.go.dev/github.com/smartystreets/goconvey@v1.8.1/web/ser</description></item><item><title>为测试装饰以提供通用逻辑</title><link>https://before80.github.io/go_docs/goconvey/decoratingTestsToProvideCommonLogic/</link><pubDate>Sun, 15 Dec 2024 11:19:50 +0800</pubDate><guid>https://before80.github.io/go_docs/goconvey/decoratingTestsToProvideCommonLogic/</guid><description>原文：https://github.com/smartystreets/goconvey/wiki/Decorating-tests-to-</description></item><item><title>编辑器集成</title><link>https://before80.github.io/go_docs/delve/editorintergration/</link><pubDate>Mon, 09 Dec 2024 08:08:46 +0800</pubDate><guid>https://before80.github.io/go_docs/delve/editorintergration/</guid><description>原文：https://github.com/go-delve/delve/blob/master/Documentation/EditorI</description></item><item><title>rand/v2</title><link>https://before80.github.io/go_docs/stdLib/math/rand_v2/</link><pubDate>Thu, 05 Sep 2024 15:00:55 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/math/rand_v2/</guid><description>原文：https://pkg.go.dev/math/rand/v2@go1.24.2 注意 ​ 从go1.22.0开始才可以使用该包。 Overview Package rand implements pseudo-random</description></item><item><title>插件</title><link>https://before80.github.io/go_docs/buffalo/guides/plugins/</link><pubDate>Sun, 04 Feb 2024 21:17:12 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/guides/plugins/</guid><description>原文：https://gobuffalo.io/documentation/guides/plugins/ Plugins 插件 Since 0.9.1 自 0.9.1 起 Plugins allow for 3rd party code to extend the</description></item><item><title>生成器</title><link>https://before80.github.io/go_docs/buffalo/database/generators/</link><pubDate>Sun, 04 Feb 2024 21:13:42 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/database/generators/</guid><description>原文：https://gobuffalo.io/documentation/database/generators/ Generators 生成器 1 2 3 4 5 6 7 8</description></item><item><title>自定义助手</title><link>https://before80.github.io/go_docs/buffalo/frontend/customHelper/</link><pubDate>Sun, 04 Feb 2024 21:10:56 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/frontend/customHelper/</guid><description>原文：https://gobuffalo.io/documentation/frontend-layer/custom-helpers/ Custom Helpers</description></item><item><title>中间件</title><link>https://before80.github.io/go_docs/buffalo/requestHandling/middleware/</link><pubDate>Sun, 04 Feb 2024 21:08:25 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/requestHandling/middleware/</guid><description>原文：https://gobuffalo.io/documentation/request_handling/middleware/ Middleware 中间件</description></item><item><title>查询构建器</title><link>https://before80.github.io/go_docs/beego/mvcIntroduction/models/queryBuilder/</link><pubDate>Sun, 04 Feb 2024 10:01:16 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/mvcIntroduction/models/queryBuilder/</guid><description>原文：https://beego.wiki/docs/mvc/model/querybuilder/ Query Builder 查询构建器 Query Builder 查询生成器 QueryBuilder provides an API for convenient</description></item><item><title>过滤器</title><link>https://before80.github.io/go_docs/beego/mvcIntroduction/controllers/filters/</link><pubDate>Sun, 04 Feb 2024 09:57:22 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/mvcIntroduction/controllers/filters/</guid><description>原文：https://beego.wiki/docs/mvc/controller/filter/ Filters 过滤器 Filters 过滤器 Beego supports custom filter middlewares. E.g.: user authentication and force redirection. ​ Beego</description></item><item><title>context 模块</title><link>https://before80.github.io/go_docs/beego/modules/context/</link><pubDate>Sun, 04 Feb 2024 09:31:39 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/modules/context/</guid><description>原文：https://beego.wiki/docs/module/context/ Context Module 上下文模块 The Context module is an encapsulation for http request and response. The Context module provides an Input object for user input</description></item><item><title>静态文件</title><link>https://before80.github.io/go_docs/beego/quickStart/staticFiles/</link><pubDate>Sun, 04 Feb 2024 09:10:59 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/quickStart/staticFiles/</guid><description>原文：https://beego.wiki/docs/quickstart/static/ Static files 静态文件 Handling static files 处理静态文件 Most applications include numerous static files such as images, js,</description></item><item><title>limits</title><link>https://before80.github.io/go_docs/thirdPkg/chi/examples/limits/</link><pubDate>Wed, 31 Jan 2024 19:11:58 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/chi/examples/limits/</guid><description>原文：https://github.com/go-chi/chi/blob/master/_examples/limits/main.go 1</description></item><item><title>技术说明 6</title><link>https://before80.github.io/go_docs/thirdPkg/lua/notes/6/</link><pubDate>Thu, 25 Jan 2024 22:17:02 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/lua/notes/6/</guid><description>原文：https://www.lua.org/notes/ltn006.html Technical Note 6 技术说明 6 Last update: Wed Jun 16 10:43:27 BRT 2004 Weak references: implementation and use in Lua 弱引用：Lua</description></item><item><title>6 – 标准库</title><link>https://before80.github.io/go_docs/thirdPkg/lua/Lua54ReferenceManual/6/</link><pubDate>Thu, 25 Jan 2024 14:34:46 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/lua/Lua54ReferenceManual/6/</guid><description>原文：https://www.lua.org/manual/5.4/manual.html 6 – The Standard Libraries – 标准库 The standard Lua libraries provide useful functions that are implemented in C through the C API.</description></item><item><title>提示</title><link>https://before80.github.io/go_docs/gorm/AdancedTopics/hints/</link><pubDate>Sat, 28 Oct 2023 14:35:35 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/AdancedTopics/hints/</guid><description>原文：https://gorm.io/docs/hints.html GORM provides optimizer/index/comment hints support ​ GORM提供了优化器/索引/注释提示支持。 原文：https:</description></item><item><title>钩子</title><link>https://before80.github.io/go_docs/gorm/Tutorials/hooks/</link><pubDate>Sat, 28 Oct 2023 14:30:28 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/Tutorials/hooks/</guid><description>对象生命周期 Object Life Cycle Hooks are functions that are called before or after creation/querying/updating/deletion. ​ Hooks是在创建/查询/更新/删除之前或之后调用的函数。 If you have defined specified methods for a model, it will be called automatically when creating, updating, querying, deleting, and if</description></item><item><title>预加载 (Eager Loading)</title><link>https://before80.github.io/go_docs/gorm/Associations/preloadingEagerLoading/</link><pubDate>Sat, 28 Oct 2023 14:29:04 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/Associations/preloadingEagerLoading/</guid><description>原文：https://gorm.io/docs/preload.html 预加载 Preload GORM allows eager loading relations in other SQL with Preload, for example: ​ GORM允许在SQL中使用Prel</description></item><item><title>删除</title><link>https://before80.github.io/go_docs/gorm/CRUDInterface/delete/</link><pubDate>Sat, 28 Oct 2023 14:26:18 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/CRUDInterface/delete/</guid><description>原文：https://gorm.io/docs/delete.html 删除记录 Delete a Record When deleting a record, the deleted value needs to have primary key or it will trigger a Batch Delete, for example: ​ 当删除记录时</description></item><item><title>if else</title><link>https://before80.github.io/go_docs/example/if-else/</link><pubDate>Mon, 07 Aug 2023 13:31:51 +0800</pubDate><guid>https://before80.github.io/go_docs/example/if-else/</guid><description>if else 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;math/rand&amp;#34; ) func main() { if true { fmt.Println(&amp;#34;Condition is true.&amp;#34;) } else { fmt.Println(&amp;#34;Condition is false.&amp;#34;) } score := rand.Intn(100) if score &amp;lt; 60 { fmt.Println(&amp;#34;E&amp;#34;) } else if 60 &amp;lt;= score &amp;amp;&amp;amp; score</description></item><item><title>Go 1.15版发布了</title><link>https://before80.github.io/go_docs/goBlog/2020/Go1_15IsReleased/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2020/Go1_15IsReleased/</guid><description>Go 1.15 is released - go 1.15版发布了 原文：https://go.dev/blog/go1.15 Alex Rakoczy 11 August 2020 Today the Go team is very happy to announce the release of Go 1.15. You can get it from the download page.</description></item><item><title>go 1.5 Vendor Experiment</title><link>https://before80.github.io/go_docs/docs/Other/Go1_5VendorExperiment/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/Other/Go1_5VendorExperiment/</guid><description>go 1.5 Vendor Experiment 原文：https://go.googlesource.com/proposal/+/master/design/25719-go15</description></item><item><title>Go 第一版发布</title><link>https://before80.github.io/go_docs/goBlog/2012/GoVersion1IsReleased/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2012/GoVersion1IsReleased/</guid><description>Go version 1 is released - Go 第一版发布 原文：https://go.dev/blog/go1 Andrew Gerrand 28 March 2012 Today marks a major milestone in the development of the Go programming language. We’re announcing Go version 1, or Go 1 for short,</description></item><item><title>Go 中的字符串、字节、符文和字符</title><link>https://before80.github.io/go_docs/goBlog/2013/StringsBytesRunesAndCharactersInGo/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2013/StringsBytesRunesAndCharactersInGo/</guid><description>Strings, bytes, runes and characters in Go - Go 中的字符串、字节、符文和字符 原文：https://go.dev/blog/strings Rob Pike 23 October 2013 Introduction 简介 The previous blog post explained how slices work in</description></item><item><title>Go, 开源, 社区</title><link>https://before80.github.io/go_docs/goBlog/2015/GoOpenSourceCommunity/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2015/GoOpenSourceCommunity/</guid><description>Go, Open Source, Community - Go, 开源, 社区 原文：https://go.dev/blog/open-source Russ Cox 8 July 2015 Welcome 欢迎 [This is the text of my opening keynote at Gophercon 2015. The video is available here.] [</description></item><item><title>Go获得了2010年Bossie奖</title><link>https://before80.github.io/go_docs/goBlog/2010/GoWins2010BossieAward/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2010/GoWins2010BossieAward/</guid><description>Go Wins 2010 Bossie Award - Go获得了2010年Bossie奖 原文：https://go.dev/blog/bossie Andrew Gerrand 6 September 2010 2010年9月6日 ​ Go项</description></item><item><title>常量</title><link>https://before80.github.io/go_docs/goBlog/2014/Constants/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2014/Constants/</guid><description>Constants - 常量 原文：https://go.dev/blog/constants Rob Pike 25 August 2014 Introduction 简介 Go is a statically typed language that does not permit operations that mix numeric types. You can’t add a float64 to an</description></item><item><title>发布 Go 模块</title><link>https://before80.github.io/go_docs/goBlog/2019/PublishingGoModules/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2019/PublishingGoModules/</guid><description>Publishing Go Modules - 发布 go 模块 原文：https://go.dev/blog/publishing-go-modules Tyler Bui-Palsulich 26 September 2019 Introduction 简介 This post is part 3 in a series. 这</description></item><item><title>更小的 Go 1.7二进制文件</title><link>https://before80.github.io/go_docs/goBlog/2016/SmallerGo1_7Binaries/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2016/SmallerGo1_7Binaries/</guid><description>Smaller Go 1.7 binaries - 更小的 Go 1.7二进制文件 原文：https://go.dev/blog/go1.7-binary-size David Crawshaw 18 August 2016 Introduction 简介 Go was designed for writing</description></item><item><title>贡献者峰会</title><link>https://before80.github.io/go_docs/goBlog/2017/ContributorsSummit/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2017/ContributorsSummit/</guid><description>Contributors Summit - 贡献者峰会 原文：https://go.dev/blog/contributors-summit Sam Whited 3 August 2017 Introduction 简介 The day before GopherCon, a group of Go team members and contributors</description></item><item><title>使用 go Cloud的Wire进行编译时依赖注入</title><link>https://before80.github.io/go_docs/goBlog/2018/Compile-timeDependencyInjectionWithGoCloudsWire/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2018/Compile-timeDependencyInjectionWithGoCloudsWire/</guid><description>Compile-time Dependency Injection With Go Cloud&amp;rsquo;s Wire - 使用 go Cloud的Wire进行编译时依赖注入 原文：https://go.dev/blog/wire Robert van Gent 9 October 2018 Overview 概述 The Go team recently</description></item><item><title>用GNU调试器调试 Go 程序</title><link>https://before80.github.io/go_docs/goBlog/2011/DebuggingGoProgramsWithTheGNUDebugger/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2011/DebuggingGoProgramsWithTheGNUDebugger/</guid><description>Debugging Go programs with the GNU Debugger - 用GNU调试器调试 Go 程序 原文：https://go.dev/blog/debug-gdb Andrew Gerrand 30 October 2011 Last year we reported that Go’s gc/ld toolchain produces DWARFv3</description></item><item><title>教程：开始使用 Go</title><link>https://before80.github.io/go_docs/docs/GettingStarted/TutorialGetStartedWithGo/</link><pubDate>Thu, 18 May 2023 16:35:08 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/GettingStarted/TutorialGetStartedWithGo/</guid><description>Tutorial: Get started with Go - 教程：开始使用 Go 原文：https://go.dev/doc/tutorial/getting-started ​ 在本教程中，您将获</description></item><item><title>模块版本编号</title><link>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/DevelopingModules/ModuleVersionNumbering/</link><pubDate>Wed, 17 May 2023 15:03:14 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/DevelopingModules/ModuleVersionNumbering/</guid><description>Module version numbering - 模块版本编号 原文：https://go.dev/doc/modules/version-numbers ​ 模块的开发者使用模块版本号的</description></item><item><title>执行事务</title><link>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/AccessingDatabases/ExecutingTransactions/</link><pubDate>Wed, 17 May 2023 15:03:14 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/AccessingDatabases/ExecutingTransactions/</guid><description>Executing transactions - 执行事务 原文：https://go.dev/doc/database/execute-transactions ​ 您可以使用表示事务的s</description></item><item><title>变量</title><link>https://before80.github.io/go_docs/langSpec/Variables/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/Variables/</guid><description>Variables 变量 原文：https://go.dev/ref/spec#Variables A variable is a storage location for holding a value. The set of permissible values is determined by the variable&amp;rsquo;s type. ​ 变量是用于保存值的</description></item><item><title>工作区</title><link>https://before80.github.io/go_docs/docs/References/GoModulesReference/Workspaces/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/References/GoModulesReference/Workspaces/</guid><description>Workspaces 工作区 原文：https://go.dev/ref/mod#workspaces ​ 工作区是磁盘上模块的集合，在运行minimal version selection (MVS) （最小</description></item><item><title>Execution</title><link>https://before80.github.io/go_docs/goconvey/execution/</link><pubDate>Sun, 15 Dec 2024 11:20:49 +0800</pubDate><guid>https://before80.github.io/go_docs/goconvey/execution/</guid><description>原文：https://github.com/smartystreets/goconvey/wiki/Execution 收录该文档时间： 2024-12-15T11:20:49+08:00 Execution -</description></item><item><title>后端测试健康状况</title><link>https://before80.github.io/go_docs/delve/backend_test_health/</link><pubDate>Mon, 09 Dec 2024 08:09:11 +0800</pubDate><guid>https://before80.github.io/go_docs/delve/backend_test_health/</guid><description>原文：https://github.com/go-delve/delve/blob/master/Documentation/backend</description></item><item><title>本地身份验证</title><link>https://before80.github.io/go_docs/buffalo/guides/localAuthentication/</link><pubDate>Sun, 04 Feb 2024 21:17:27 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/guides/localAuthentication/</guid><description>原文：https://gobuffalo.io/documentation/guides/auth/ Local Authentication 本地身份验证 In many use-cases, you’ll need to implement</description></item><item><title>迁移</title><link>https://before80.github.io/go_docs/buffalo/database/migrations/</link><pubDate>Sun, 04 Feb 2024 21:13:55 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/database/migrations/</guid><description>原文：https://gobuffalo.io/documentation/database/migrations/ Migrations 迁移 Software maintenance is a hard task, and yo</description></item><item><title>闪存消息</title><link>https://before80.github.io/go_docs/buffalo/frontend/flashMessages/</link><pubDate>Sun, 04 Feb 2024 21:11:09 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/frontend/flashMessages/</guid><description>原文：https://gobuffalo.io/documentation/frontend-layer/flash-messages/ Flash Messages</description></item><item><title>错误处理</title><link>https://before80.github.io/go_docs/buffalo/requestHandling/errorHanding/</link><pubDate>Sun, 04 Feb 2024 21:08:36 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/requestHandling/errorHanding/</guid><description>原文：https://gobuffalo.io/documentation/request_handling/errors/ Error Handling 错误处理 An error</description></item><item><title>事务</title><link>https://before80.github.io/go_docs/beego/mvcIntroduction/models/transaction/</link><pubDate>Sun, 04 Feb 2024 10:01:37 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/mvcIntroduction/models/transaction/</guid><description>原文：https://beego.wiki/docs/mvc/model/transaction/ Transaction 事务 Transaction 事务 There are two ways to handle transaction in Beego. One is closure: ​ 在 Beego</description></item><item><title>会话控制</title><link>https://before80.github.io/go_docs/beego/mvcIntroduction/controllers/sessionControl/</link><pubDate>Sun, 04 Feb 2024 09:57:58 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/mvcIntroduction/controllers/sessionControl/</guid><description>原文：https://beego.wiki/docs/mvc/controller/session/ Session control 会话控制 Session control 会话控制 Beego has a built-in session module that supports</description></item><item><title>task 模块</title><link>https://before80.github.io/go_docs/beego/modules/task/</link><pubDate>Sun, 04 Feb 2024 09:31:48 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/modules/task/</guid><description>原文：https://beego.wiki/docs/module/task/ Task Module 任务模块 Core task Module 核心任务模块 Installation 安装 go get github.com/beego/beego/v2/task Tasks 任务 Tasks work very similarly to cron jobs.</description></item><item><title>logging</title><link>https://before80.github.io/go_docs/thirdPkg/chi/examples/logging/</link><pubDate>Wed, 31 Jan 2024 19:12:06 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/chi/examples/logging/</guid><description>原文：https://github.com/go-chi/chi/blob/master/_examples/logging/main.go</description></item><item><title>技术说明 7</title><link>https://before80.github.io/go_docs/thirdPkg/lua/notes/7/</link><pubDate>Thu, 25 Jan 2024 22:17:08 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/lua/notes/7/</guid><description>原文：https://www.lua.org/notes/ltn007.html Technical Note 7 技术说明 7 Last update: Mon Aug 12 15:51:10 EST 2002 Modules &amp;amp; Packages 模块和包 by Roberto Ierusalimschy 罗伯托·</description></item><item><title>7 – Lua独立</title><link>https://before80.github.io/go_docs/thirdPkg/lua/Lua54ReferenceManual/7/</link><pubDate>Thu, 25 Jan 2024 14:34:52 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/lua/Lua54ReferenceManual/7/</guid><description>原文：https://www.lua.org/manual/5.4/manual.html 7 – Lua Standalone – Lua独立 Although Lua has been designed as an extension language, to be embedded in a host</description></item><item><title>数据库索引</title><link>https://before80.github.io/go_docs/gorm/AdancedTopics/indexes/</link><pubDate>Sat, 28 Oct 2023 14:35:45 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/AdancedTopics/indexes/</guid><description>原文：https://gorm.io/docs/indexes.html GORM allows create database index with tag index, uniqueIndex, those indexes will be created when AutoMigrate or CreateTable with GORM ​ GORM允许使用标签ind</description></item><item><title>事务</title><link>https://before80.github.io/go_docs/gorm/Tutorials/transactions/</link><pubDate>Sat, 28 Oct 2023 14:30:45 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/Tutorials/transactions/</guid><description>原文：https://gorm.io/docs/transactions.html 禁用默认事务 Disable Default Transaction GORM perform write (create/update/delete) operations run inside a transaction to ensure data consistency, you can disable it during initialization if</description></item><item><title>SQL Builder</title><link>https://before80.github.io/go_docs/gorm/CRUDInterface/rawSQLAndSQLBuilder/</link><pubDate>Sat, 28 Oct 2023 14:26:51 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/CRUDInterface/rawSQLAndSQLBuilder/</guid><description>原文：https://gorm.io/docs/sql_builder.html 原始SQL Raw SQL Query Raw SQL with Scan ​ 使用Scan查询原始SQL 1 2 3 4</description></item><item><title>break</title><link>https://before80.github.io/go_docs/example/break/</link><pubDate>Sat, 26 Aug 2023 11:06:21 +0800</pubDate><guid>https://before80.github.io/go_docs/example/break/</guid><description>break 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69</description></item><item><title>continue</title><link>https://before80.github.io/go_docs/example/continue/</link><pubDate>Sat, 26 Aug 2023 11:03:47 +0800</pubDate><guid>https://before80.github.io/go_docs/example/continue/</guid><description>continue 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69</description></item><item><title>switch</title><link>https://before80.github.io/go_docs/example/switch/</link><pubDate>Mon, 07 Aug 2023 13:31:58 +0800</pubDate><guid>https://before80.github.io/go_docs/example/switch/</guid><description>switch 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69</description></item><item><title>Defer, Panic, and Recover</title><link>https://before80.github.io/go_docs/goBlog/2010/DeferPanicAandRecover/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2010/DeferPanicAandRecover/</guid><description>Defer, Panic, and Recover 原文：https://go.dev/blog/defer-panic-and-recover Andrew Gerrand 4 August 2010 2010 年 8 月 4 日 ​ Go 有常见的控制流</description></item><item><title>Go 1.13发布了</title><link>https://before80.github.io/go_docs/goBlog/2019/Go1_13IsReleased/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2019/Go1_13IsReleased/</guid><description>Go 1.13 is released - go 1.13发布了 原文：https://go.dev/blog/go1.13 Andrew Bonventre 3 September 2019 Today the Go team is very happy to announce the release of Go 1.13. You can get it from the download page. 今</description></item><item><title>go 1.5 Bootstrap计划</title><link>https://before80.github.io/go_docs/docs/Other/Go1_5BootstrapPlan/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/Other/Go1_5BootstrapPlan/</guid><description>Go 1.5 Bootstrap Plan - go 1.5 Bootstrap计划 原文：https://docs.google.com/document/d/1OaatvGhEAq7Vs</description></item><item><title>Go 1.7发布了</title><link>https://before80.github.io/go_docs/goBlog/2016/Go1_7IsReleased/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2016/Go1_7IsReleased/</guid><description>Go 1.7 is released - Go 1.7发布了 原文：https://go.dev/blog/go1.7 Chris Broadfoot 15 August 2016 Today we are happy to announce the release of Go 1.7. You can get it from the download page. There are several significant changes in</description></item><item><title>Go App Engine SDK 1.5.5 released</title><link>https://before80.github.io/go_docs/goBlog/2011/GoAppEngineSDK1_5_5Released/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2011/GoAppEngineSDK1_5_5Released/</guid><description>Go App Engine SDK 1.5.5 released 原文：https://go.dev/blog/appengine-155 Andrew Gerrand 11 October 2011 Today we released version 1.5.5 the Go App Engine SDK. You can download it from the App Engine downloads page. 今天我</description></item><item><title>Go1_19IsReleased</title><link>https://before80.github.io/go_docs/goBlog/2022/Go1_19IsReleased/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2022/Go1_19IsReleased/</guid><description>Go 1.19 is released! - Go 1.19发布了! 原文：https://go.dev/blog/go1.19 The Go Team 2 August 2022 Today the Go team is thrilled to release Go 1.19, which you can get by visiting the download page. 今天</description></item><item><title>ShareYourFeedbackAboutDevelopingWithGo</title><link>https://before80.github.io/go_docs/goBlog/2022/ShareYourFeedbackAboutDevelopingWithGo/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2022/ShareYourFeedbackAboutDevelopingWithGo/</guid><description>Share your feedback about developing with Go 分享您对使用Go开发的反馈 原文：https://go.dev/blog/survey2022-q2 Todd Kulesza, for the Go team 1 June 2022 For the past six years</description></item><item><title>保持您的模块兼容</title><link>https://before80.github.io/go_docs/goBlog/2020/KeepingYourModulesCompatible/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2020/KeepingYourModulesCompatible/</guid><description>Keeping Your Modules Compatible - 保持您的模块兼容 原文：https://go.dev/blog/module-compatibility Jean de Klerk and Jonathan Amsterdam 7 July 2020 Introduction 简介 This post</description></item><item><title>参与2018年 Go 公司调查问卷</title><link>https://before80.github.io/go_docs/goBlog/2018/ParticipateInThe2018GoCompanyQuestionnaire/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2018/ParticipateInThe2018GoCompanyQuestionnaire/</guid><description>Participate in the 2018 Go Company Questionnaire - 参与2018年 go 公司调查问卷 原文：https://go.dev/blog/survey2018-company Ran Tao, Steve Francia 4 October 2018</description></item><item><title>迈向 Go 2</title><link>https://before80.github.io/go_docs/goBlog/2017/TowardGo2/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2017/TowardGo2/</guid><description>Toward Go 2 - 迈向 Go 2 原文：https://go.dev/blog/toward-go2 Russ Cox 13 July 2017 Introduction 简介 [This is the text of my talk today at Gophercon 2017, asking for the entire Go commu</description></item><item><title>奇虎360与 go</title><link>https://before80.github.io/go_docs/goBlog/2015/Qihoo360AndGo/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2015/Qihoo360AndGo/</guid><description>Qihoo 360 and Go - 奇虎360与 go 原文：https://go.dev/blog/qihoo Yang Zhou 6 July 2015 This guest blog post was written by Yang Zhou, Software Engineer at Qihoo 360. 这篇客座博文是由奇虎3</description></item><item><title>数组、切片（和字符串）：append 的原理</title><link>https://before80.github.io/go_docs/goBlog/2013/ArraysSlicesAndStringsTheMechanicsOfAppend/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2013/ArraysSlicesAndStringsTheMechanicsOfAppend/</guid><description>Arrays, slices (and strings): The mechanics of &amp;lsquo;append&amp;rsquo; - 数组、切片（和字符串）：append 的原理 原文：https://go.dev/blog/slices Rob Pike 26 September 2013 Introduction 简介 One of the</description></item><item><title>在 OSCON上的 go</title><link>https://before80.github.io/go_docs/goBlog/2014/GoAtOSCON/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2014/GoAtOSCON/</guid><description>Go at OSCON - 在 OSCON上的 go 原文：https://go.dev/blog/osconreport Francesc Campoy 20 August 2014 Introduction 简介 What happens in Portland in July? OSCON! At this year’s</description></item><item><title>教程：创建一个 Go 模块</title><link>https://before80.github.io/go_docs/docs/GettingStarted/TutorialCreateAGoModule/</link><pubDate>Thu, 18 May 2023 16:35:08 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/GettingStarted/TutorialCreateAGoModule/</guid><description>Tutorial: Create a Go module - 教程：创建一个 Go 模块 原文：https://go.dev/doc/tutorial/create-module.html ​ 这是教程</description></item><item><title>取消正在进行的操作</title><link>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/AccessingDatabases/CancelingIn-progressDatabaseOperations/</link><pubDate>Wed, 17 May 2023 15:03:14 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/AccessingDatabases/CancelingIn-progressDatabaseOperations/</guid><description>Canceling in-progress operations - 取消正在进行的操作 原文：https://go.dev/doc/database/cancel-operations ​ 你可以使用Go的</description></item><item><title>类型</title><link>https://before80.github.io/go_docs/langSpec/Types/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/Types/</guid><description>Types 类型 原文：https://go.dev/ref/spec#Types A type determines a set of values together with operations and methods specific to those values. A type may be denoted by a type name, if it has one, which must be followed by type</description></item><item><title>与非模块存储库的兼容性</title><link>https://before80.github.io/go_docs/docs/References/GoModulesReference/CompatibilityWithNon-moduleRepositories/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/References/GoModulesReference/CompatibilityWithNon-moduleRepositories/</guid><description>Compatibility with non-module repositories 与非模块存储库的兼容性 原文：https://go.dev/ref/mod#non-module-compat ​ 为了确保从GOPATH</description></item><item><title>server_watch</title><link>https://before80.github.io/go_docs/goconvey/lib/web/server_watch/</link><pubDate>Sun, 15 Dec 2024 21:22:39 +0800</pubDate><guid>https://before80.github.io/go_docs/goconvey/lib/web/server_watch/</guid><description>原文：https://pkg.go.dev/github.com/smartystreets/goconvey@v1.8.1/web/ser</description></item><item><title>Execution order - 执行顺序</title><link>https://before80.github.io/go_docs/goconvey/executionOrder/</link><pubDate>Sun, 15 Dec 2024 11:20:56 +0800</pubDate><guid>https://before80.github.io/go_docs/goconvey/executionOrder/</guid><description>原文：https://github.com/smartystreets/goconvey/wiki/Execution-order 收录该文档</description></item><item><title>常见问题解答</title><link>https://before80.github.io/go_docs/delve/faq/</link><pubDate>Mon, 09 Dec 2024 08:09:20 +0800</pubDate><guid>https://before80.github.io/go_docs/delve/faq/</guid><description>原文：https://github.com/go-delve/delve/blob/master/Documentation/faq.md 收</description></item><item><title>array</title><link>https://before80.github.io/go_docs/example/defer/</link><pubDate>Thu, 27 Jun 2024 11:32:07 +0800</pubDate><guid>https://before80.github.io/go_docs/example/defer/</guid><description>defer 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 package main import &amp;#34;fmt&amp;#34; func main() { // 一维数组 a1 := [3]int{1, 2, 3} // 二维</description></item><item><title>第三方认证</title><link>https://before80.github.io/go_docs/buffalo/guides/thirdPartyAuthentication/</link><pubDate>Sun, 04 Feb 2024 21:17:48 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/guides/thirdPartyAuthentication/</guid><description>原文：https://gobuffalo.io/documentation/guides/goth/ Third Party Authentication 第三方认证 In many use-cases, you’ll need to implement</description></item><item><title>Fizz</title><link>https://before80.github.io/go_docs/buffalo/database/fizz/</link><pubDate>Sun, 04 Feb 2024 21:14:06 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/database/fizz/</guid><description>原文：https://gobuffalo.io/documentation/database/fizz/ Fizz Fizz is a common DSL for migrating databases. It tries to be as database-agnostic as possible. This</description></item><item><title>表单</title><link>https://before80.github.io/go_docs/buffalo/frontend/forms/</link><pubDate>Sun, 04 Feb 2024 21:11:17 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/frontend/forms/</guid><description>原文：https://gobuffalo.io/documentation/frontend-layer/forms/ Forms 表单 Buffalo uses the github.com/gobuffalo/tags package to make form</description></item><item><title>Sessions</title><link>https://before80.github.io/go_docs/buffalo/requestHandling/sessions/</link><pubDate>Sun, 04 Feb 2024 21:08:45 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/requestHandling/sessions/</guid><description>原文：https://gobuffalo.io/documentation/request_handling/sessions/ Sessions 会话 An HTTP session</description></item><item><title>命令行</title><link>https://before80.github.io/go_docs/beego/mvcIntroduction/models/commandLine/</link><pubDate>Sun, 04 Feb 2024 10:02:08 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/mvcIntroduction/models/commandLine/</guid><description>原文：https://beego.wiki/docs/mvc/model/cmd/ Command Line 命令行 Command Line 命令行 You can call orm.RunCommand() after you registered models and database(s) as follows: ​ 在注册模型和</description></item><item><title>模型定义</title><link>https://before80.github.io/go_docs/beego/mvcIntroduction/models/modelDefinition/</link><pubDate>Sun, 04 Feb 2024 10:01:55 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/mvcIntroduction/models/modelDefinition/</guid><description>原文：https://beego.wiki/docs/mvc/model/models/ Model Definition 模型定义 Model Definition 模型定义 Model names are used for database data conversion and Database Schema Generation ​ 模</description></item><item><title>flashMessages</title><link>https://before80.github.io/go_docs/beego/mvcIntroduction/controllers/flashMessages/</link><pubDate>Sun, 04 Feb 2024 09:58:15 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/mvcIntroduction/controllers/flashMessages/</guid><description>原文：https://beego.wiki/docs/mvc/controller/flash/ Flash messages 闪存消息 Flash Messages 闪存消息 Flash messages are not related to Adobe/Macromedia Flash. They are</description></item><item><title>toolbox</title><link>https://before80.github.io/go_docs/beego/modules/toolbox/</link><pubDate>Sun, 04 Feb 2024 09:32:03 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/modules/toolbox/</guid><description>原文：https://beego.wiki/docs/module/toolbox/ toolbox 工具箱 Deprecated. Please check task，admin，grace ​ 已弃用。</description></item><item><title>rest</title><link>https://before80.github.io/go_docs/thirdPkg/chi/examples/rest/</link><pubDate>Wed, 31 Jan 2024 19:12:13 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/chi/examples/rest/</guid><description>原文：https://github.com/go-chi/chi/blob/master/_examples/rest/main.go 1 2 3</description></item><item><title>技术说明 8</title><link>https://before80.github.io/go_docs/thirdPkg/lua/notes/8/</link><pubDate>Thu, 25 Jan 2024 22:17:13 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/lua/notes/8/</guid><description>原文：https://www.lua.org/notes/ltn008.html Technical Note 8 技术说明 8 Last update: Mon Aug 12 15:51:45 EST 2002 A fast multiple-inheritance tag method implementation in Lua - 用 Lua 实现的</description></item><item><title>8 – 与前一版本的兼容性</title><link>https://before80.github.io/go_docs/thirdPkg/lua/Lua54ReferenceManual/8/</link><pubDate>Thu, 25 Jan 2024 14:34:57 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/lua/Lua54ReferenceManual/8/</guid><description>原文：https://www.lua.org/manual/5.4/manual.html 8 – Incompatibilities with the Previous Version – 与前一版本的兼容性 Here we list the incompatibilities that you may</description></item><item><title>约束</title><link>https://before80.github.io/go_docs/gorm/AdancedTopics/constraints/</link><pubDate>Sat, 28 Oct 2023 14:35:55 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/AdancedTopics/constraints/</guid><description>原文：https://gorm.io/docs/constraints.html GORM allows create database constraints with tag, constraints will be created when AutoMigrate or CreateTable with GORM ​ GORM 允许使用标签创建数据库</description></item><item><title>迁移</title><link>https://before80.github.io/go_docs/gorm/Tutorials/migration/</link><pubDate>Sat, 28 Oct 2023 14:30:56 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/Tutorials/migration/</guid><description>原文：https://gorm.io/docs/migration.html 自动迁移 Auto Migration Automatically migrate your schema, to keep your schema up to date. ​ 自动迁移您的模式，以保持模式</description></item><item><title>array</title><link>https://before80.github.io/go_docs/example/arrays/</link><pubDate>Mon, 07 Aug 2023 13:32:07 +0800</pubDate><guid>https://before80.github.io/go_docs/example/arrays/</guid><description>array 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 package main import &amp;#34;fmt&amp;#34; func main() { // 一维数组 a1 := [3]int{1, 2, 3} // 二维</description></item><item><title>Go 1.6发布了</title><link>https://before80.github.io/go_docs/goBlog/2016/Go1_6IsReleased/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2016/Go1_6IsReleased/</guid><description>Go 1.6 is released - Go 1.6发布了 原文：https://go.dev/blog/go1.6 Andrew Gerrand 17 February 2016 Today we release Go version 1.6, the seventh major stable release of Go. You can grab it right now from the download page. Although the</description></item><item><title>Go 2草案设计</title><link>https://before80.github.io/go_docs/goBlog/2018/Go2DraftDesigns/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2018/Go2DraftDesigns/</guid><description>Go 2 Draft Designs - Go 2草案设计 原文：https://go.dev/blog/go2draft 28 August 2018 Yesterday, at our annual Go contributor summit, attendees got a sneak peek at preliminary drafts of possible designs for changes to error handling and generics.</description></item><item><title>Go 并发模式：Context</title><link>https://before80.github.io/go_docs/goBlog/2014/GoConcurrencyPatternsContext/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2014/GoConcurrencyPatternsContext/</guid><description>Go Concurrency Patterns: Context - Go 并发模式：Context 原文：https://go.dev/blog/context Sameer Ajmani 29 July 2014 2014年7月29日 简介 Introduction In Go servers, each</description></item><item><title>Go 的第一版的预览</title><link>https://before80.github.io/go_docs/goBlog/2011/APreviewOfGoVersion1/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2011/APreviewOfGoVersion1/</guid><description>A preview of Go version 1 - Go 的第一版的预览 原文：https://go.dev/blog/go1-preview Russ Cox 5 October 2011 We want to be able to provide a stable base for people using Go. People should</description></item><item><title>godoc Analysis Help</title><link>https://before80.github.io/go_docs/docs/Other/godocAnalysisHelp/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/Other/godocAnalysisHelp/</guid><description>Help 原文：https://go.dev/lib/godoc/analysis/help When invoked with the -analysis flag, godoc performs static analysis on the Go packages it indexes and displays the results in the source and package views. This document</description></item><item><title>GopherChina之旅报告</title><link>https://before80.github.io/go_docs/goBlog/2015/GopherChinaTripReport/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2015/GopherChinaTripReport/</guid><description>GopherChina Trip Report - GopherChina之旅报告 原文：https://go.dev/blog/gopherchina Robert Griesemer 1 July 2015 We have known for some time that Go is more popular in</description></item><item><title>第一个 Go 项目</title><link>https://before80.github.io/go_docs/goBlog/2013/TheFirstGoProgram/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2013/TheFirstGoProgram/</guid><description>The first Go program - 第一个 Go 项目 原文：https://go.dev/blog/first-go-program Andrew Gerrand 18 July 2013 Brad Fitzpatrick and I (Andrew Gerrand) recently started restructuring godoc, and it occurred to me</description></item><item><title>泛型的下一步</title><link>https://before80.github.io/go_docs/goBlog/2020/TheNextStepForGenerics/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2020/TheNextStepForGenerics/</guid><description>The Next Step for Generics - 泛型的下一步 原文：https://go.dev/blog/generics-next-step Ian Lance Taylor and Robert Griesemer 16 June 2020 Introduction 简介 It’s been</description></item><item><title>开发者体验工作组介绍</title><link>https://before80.github.io/go_docs/goBlog/2017/IntroducingTheDeveloperExperienceWorkingGroup/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2017/IntroducingTheDeveloperExperienceWorkingGroup/</guid><description>Introducing the Developer Experience Working Group - 开发者体验工作组介绍 原文：https://go.dev/blog/developer-experience The Developer Experience Working Group 10 April 2017 Over the</description></item><item><title>模块镜像和校验数据库发布</title><link>https://before80.github.io/go_docs/goBlog/2019/ModuleMirrorAndChecksumDatabaseLaunched/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2019/ModuleMirrorAndChecksumDatabaseLaunched/</guid><description>Module Mirror and Checksum Database Launched - 模块镜像和校验数据库发布 原文：https://go.dev/blog/module-mirror-launch Katie Hockman 29 August 2019 We are excited</description></item><item><title>通过通信共享内存</title><link>https://before80.github.io/go_docs/goBlog/2010/ShareMemoryByCommunicating/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2010/ShareMemoryByCommunicating/</guid><description>Share Memory By Communicating - 通过通信共享内存 原文：https://go.dev/blog/codelab-share Andrew Gerrand 13 July 2010 2010年7月13日 ​ 传统的线程</description></item><item><title>教程：开始使用多模块工作区</title><link>https://before80.github.io/go_docs/docs/GettingStarted/TutorialGettingStartedWithMulti-moduleWorkspaces/</link><pubDate>Thu, 18 May 2023 16:35:08 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/GettingStarted/TutorialGettingStartedWithMulti-moduleWorkspaces/</guid><description>Tutorial: Getting started with multi-module workspaces - 教程：开始使用多模块工作区 原文：https://go.dev/doc/tutorial/workspaces.html ​ 本教程</description></item><item><title>管理连接</title><link>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/AccessingDatabases/ManagingConnections/</link><pubDate>Wed, 17 May 2023 15:03:14 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/AccessingDatabases/ManagingConnections/</guid><description>Managing connections - 管理连接 原文：https://go.dev/doc/database/manage-connections ​ 对于绝大多数程序来说，你不</description></item><item><title>具有模块感知的命令</title><link>https://before80.github.io/go_docs/docs/References/GoModulesReference/Module-awareCommands/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/References/GoModulesReference/Module-awareCommands/</guid><description>Module-aware commands 具有模块感知的命令 原文：https://go.dev/ref/mod#mod-commands ​ 大多数 go 命令可以在模块感知模式或 GOPATH 模式下</description></item><item><title>类型和值的属性</title><link>https://before80.github.io/go_docs/langSpec/PropertiesOfTypesAndValues/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/PropertiesOfTypesAndValues/</guid><description>Properties of types and values 类型和值的属性 原文：https://go.dev/ref/spec#Properties_of_types_and_values Underlying</description></item><item><title>server_watch_integration_testing</title><link>https://before80.github.io/go_docs/goconvey/lib/web/server_watch_integration_testing/</link><pubDate>Sun, 15 Dec 2024 21:22:52 +0800</pubDate><guid>https://before80.github.io/go_docs/goconvey/lib/web/server_watch_integration_testing/</guid><description>原文：https://pkg.go.dev/github.com/smartystreets/goconvey@v1.8.1/web/ser</description></item><item><title>FAQ</title><link>https://before80.github.io/go_docs/goconvey/faq/</link><pubDate>Sun, 15 Dec 2024 11:21:02 +0800</pubDate><guid>https://before80.github.io/go_docs/goconvey/faq/</guid><description>原文：https://github.com/smartystreets/goconvey/wiki/FAQ 收录该文档时间： 2024-12-15T11:21:02+08:00 FAQ - 常见问题解答</description></item><item><title>已知 Bug</title><link>https://before80.github.io/go_docs/delve/knownbugs/</link><pubDate>Mon, 09 Dec 2024 08:08:56 +0800</pubDate><guid>https://before80.github.io/go_docs/delve/knownbugs/</guid><description>原文：https://github.com/go-delve/delve/blob/master/Documentation/KnownBu</description></item><item><title>事件</title><link>https://before80.github.io/go_docs/buffalo/guides/events/</link><pubDate>Sun, 04 Feb 2024 21:18:02 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/guides/events/</guid><description>原文：https://gobuffalo.io/documentation/guides/events/ Events 事件 Since 0.13.0-beta.2 自 0.13.0-beta.2 起 The events package allows for Go applications, including Buffalo applications,</description></item><item><title>突变</title><link>https://before80.github.io/go_docs/buffalo/database/mutations/</link><pubDate>Sun, 04 Feb 2024 21:14:14 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/database/mutations/</guid><description>原文：https://gobuffalo.io/documentation/database/mutations/ Mutations 突变 In this chapter, you’ll learn</description></item><item><title>assets</title><link>https://before80.github.io/go_docs/buffalo/frontend/assets/</link><pubDate>Sun, 04 Feb 2024 21:11:28 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/frontend/assets/</guid><description>原文：https://gobuffalo.io/documentation/frontend-layer/assets/ Assets 资产 By default when a new Buffalo application</description></item><item><title>Cookies</title><link>https://before80.github.io/go_docs/buffalo/requestHandling/cookies/</link><pubDate>Sun, 04 Feb 2024 21:08:55 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/requestHandling/cookies/</guid><description>原文：https://gobuffalo.io/documentation/request_handling/cookies/ Cookies Cookie An HTTP cookie is a</description></item><item><title>测试用例</title><link>https://before80.github.io/go_docs/beego/mvcIntroduction/models/testCases/</link><pubDate>Sun, 04 Feb 2024 10:02:18 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/mvcIntroduction/models/testCases/</guid><description>原文：https://beego.wiki/docs/mvc/model/test/ Test Cases 测试用例 ORM Test ORM 测试 Testing code: 测试代码： Model definition models_test.go 模型定义 models_test.go Test cases</description></item><item><title>URL 构建</title><link>https://before80.github.io/go_docs/beego/mvcIntroduction/controllers/urlBuilding/</link><pubDate>Sun, 04 Feb 2024 09:58:26 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/mvcIntroduction/controllers/urlBuilding/</guid><description>原文：https://beego.wiki/docs/mvc/controller/urlbuilding/ URL Building - URL 构建 URL Building URL 构建 If it can match URLs,</description></item><item><title>admin 模块</title><link>https://before80.github.io/go_docs/beego/modules/admin/</link><pubDate>Sun, 04 Feb 2024 09:32:11 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/modules/admin/</guid><description>原文：https://beego.wiki/docs/module/admin/ Admin module 管理模块 This module is based on the Dropwizard framework for Java. One user told me about this framework and it’s cool stuff.</description></item><item><title>router walk</title><link>https://before80.github.io/go_docs/thirdPkg/chi/examples/routerWalk/</link><pubDate>Wed, 31 Jan 2024 19:12:25 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/chi/examples/routerWalk/</guid><description>原文：https://github.com/go-chi/chi/blob/master/_examples/router-walk/mai</description></item><item><title>技术说明 9</title><link>https://before80.github.io/go_docs/thirdPkg/lua/notes/9/</link><pubDate>Thu, 25 Jan 2024 22:17:17 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/lua/notes/9/</guid><description>原文：https://www.lua.org/notes/ltn009.html Technical Note 9 技术说明 9 Last update: Mon Aug 12 15:51:58 EST 2002 Creating Strings Piece by Piece 逐个字符创建字符串</description></item><item><title>9 – Lua 的完整语法</title><link>https://before80.github.io/go_docs/thirdPkg/lua/Lua54ReferenceManual/9/</link><pubDate>Thu, 25 Jan 2024 14:35:02 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/lua/Lua54ReferenceManual/9/</guid><description>原文：https://www.lua.org/manual/5.4/manual.html 9 – The Complete Syntax of Lua – Lua 的完整语法 Here is the complete syntax of Lua in extended BNF. As</description></item><item><title>复合主键</title><link>https://before80.github.io/go_docs/gorm/AdancedTopics/compositePrimaryKey/</link><pubDate>Sat, 28 Oct 2023 14:36:19 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/AdancedTopics/compositePrimaryKey/</guid><description>原文：https://gorm.io/docs/composite_primary_key.html Set multiple fields as primary key creates composite primary key, for example: ​ 将多个字段设置</description></item><item><title>通用数据库接口 sql.DB</title><link>https://before80.github.io/go_docs/gorm/Tutorials/genericDatabaseInterface/</link><pubDate>Sat, 28 Oct 2023 14:31:29 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/Tutorials/genericDatabaseInterface/</guid><description>原文：https://gorm.io/docs/generic_interface.html GORM provides the method DB which returns a generic database interface *sql.DB from the current *gorm.DB ​ GORM提供了</description></item><item><title>日志记录器</title><link>https://before80.github.io/go_docs/gorm/Tutorials/logger/</link><pubDate>Sat, 28 Oct 2023 14:31:06 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/Tutorials/logger/</guid><description>原文：https://gorm.io/docs/logger.html Gorm has a default logger implementation, it will print Slow SQL and happening errors by default ​ Gorm有一个默认的日志记录器实现，</description></item><item><title>slices</title><link>https://before80.github.io/go_docs/example/slices/</link><pubDate>Mon, 07 Aug 2023 13:32:23 +0800</pubDate><guid>https://before80.github.io/go_docs/example/slices/</guid><description>slices 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69</description></item><item><title>Go 1.11发布了</title><link>https://before80.github.io/go_docs/goBlog/2018/Go1_11IsReleased/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2018/Go1_11IsReleased/</guid><description>Go 1.11 is released - Go 1.11发布了 原文：https://go.dev/blog/go1.11 Andrew Bonventre 24 August 2018 Who says releasing on Friday is a bad idea? 谁说在周五发布是个坏主意？ Today</description></item><item><title>Go 的声明语法</title><link>https://before80.github.io/go_docs/goBlog/2010/GosDeclarationSyntax/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2010/GosDeclarationSyntax/</guid><description>Go&amp;rsquo;s Declaration Syntax - Go 的声明语法 原文：https://go.dev/blog/declaration-syntax Rob Pike 7 July 2010 2010年7月7日 介绍 ​ 对于</description></item><item><title>Go 将参加2014年OSCON展会</title><link>https://before80.github.io/go_docs/goBlog/2014/GoWillBeAtOSCON2014/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2014/GoWillBeAtOSCON2014/</guid><description>Go will be at OSCON 2014 - Go 将参加2014年OSCON展会 原文：https://go.dev/blog/oscon Francesc Campoy 15 July 2014 OSCON, the Open Source Convention, is taking place from July 20th to the 29th</description></item><item><title>Go 中的可测试实例</title><link>https://before80.github.io/go_docs/goBlog/2015/TestableExamplesInGo/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2015/TestableExamplesInGo/</guid><description>Testable Examples in Go - Go 中的可测试实例 原文：https://go.dev/blog/examples Andrew Gerrand 7 May 2015 Introduction 简介 Godoc examples are snippets of Go code that are displayed as package documentation and that are verified by</description></item><item><title>Go 中的语言和地域匹配</title><link>https://before80.github.io/go_docs/goBlog/2016/LanguageAndLocaleMatchingInGo/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2016/LanguageAndLocaleMatchingInGo/</guid><description>Language and Locale Matching in Go - Go 中的语言和地域匹配 原文：https://go.dev/blog/matchlang Marcel van Lohuizen 9 February 2016 Introduction 简介 Consider an application, such as a web site, with support for multiple</description></item><item><title>HTTP/2服务器推送</title><link>https://before80.github.io/go_docs/goBlog/2017/HTTP2ServerPush/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2017/HTTP2ServerPush/</guid><description>HTTP/2 Server Push - HTTP/2服务器推送 原文：https://go.dev/blog/h2push Jaana Burcu Dogan and Tom Bergan 24 March 2017 Introduction 简介 HTTP/2 is designed to address many of the failings of HTTP/1.x. Modern web pages</description></item><item><title>pkg.go.dev是开源的!</title><link>https://before80.github.io/go_docs/goBlog/2020/Pkg.go.devIsOpenSource/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2020/Pkg.go.devIsOpenSource/</guid><description>Pkg.go.dev is open source! - pkg.go.dev是开源的! 原文：https://go.dev/blog/pkgsite Julie Qiu 15 June 2020 We’re excited to announce that the codebase for pkg.go.dev is now</description></item><item><title>pkg.go.dev有了新的面貌!</title><link>https://before80.github.io/go_docs/goBlog/2020/Pkg.go.devHasANewLook/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2020/Pkg.go.devHasANewLook/</guid><description>Pkg.go.dev has a new look! - pkg.go.dev有了新的面貌! 原文：https://go.dev/blog/pkgsite-redesign Julie Qiu 10 November 2020 Since launching pkg.go.dev,</description></item><item><title>Proposal: Go Benchmark Data Format</title><link>https://before80.github.io/go_docs/docs/Other/ProposalGoBenchmarkDataFormat/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/Other/ProposalGoBenchmarkDataFormat/</guid><description>Proposal: Go Benchmark Data Format 原文：https://go.googlesource.com/proposal/+/master/design/14313-ben</description></item><item><title>从您的浏览器中学习 go</title><link>https://before80.github.io/go_docs/goBlog/2011/LearnGoFromYourBrowser/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2011/LearnGoFromYourBrowser/</guid><description>Learn Go from your browser - 从您的浏览器中学习 go 原文：https://go.dev/blog/tour Andrew Gerrand 4 October 2011 We are excited to announce A Tour of Go, a guided tour of the Go programming language you can run from your</description></item><item><title>介绍 Go 竞争检测器</title><link>https://before80.github.io/go_docs/goBlog/2013/IntroducingTheGoRaceDetector/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2013/IntroducingTheGoRaceDetector/</guid><description>Introducing the Go Race Detector - 介绍 Go 竞争检测器 原文：https://go.dev/blog/race-detector Dmitry Vyukov and Andrew Gerrand 26 June 2013 Introduction 简介 Race conditions are among the most insidious and elusive</description></item><item><title>迁移到 Go 模块</title><link>https://before80.github.io/go_docs/goBlog/2019/MigratingToGoModules/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2019/MigratingToGoModules/</guid><description>Migrating to Go Modules - 迁移到 go 模块 原文：https://go.dev/blog/migrating-to-go-modules Jean de Klerk 21 August 2019 Introduction 简介 This post is part</description></item><item><title>教程：访问关系型数据库</title><link>https://before80.github.io/go_docs/docs/GettingStarted/TutorialAccessingARelationalDatabase/</link><pubDate>Thu, 18 May 2023 16:35:08 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/GettingStarted/TutorialAccessingARelationalDatabase/</guid><description>Tutorial: Accessing a relational database - 教程：访问关系型数据库 原文：https://go.dev/doc/tutorial/database-access ​ 本教程介绍了</description></item><item><title>避免SQL注入风险</title><link>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/AccessingDatabases/AvoidingSQLInjectionRisk/</link><pubDate>Wed, 17 May 2023 15:03:14 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/AccessingDatabases/AvoidingSQLInjectionRisk/</guid><description>Avoiding SQL injection risk - 避免SQL注入风险 原文：https://go.dev/doc/database/sql-injection ​ 你可以通过将SQL参数</description></item><item><title>块</title><link>https://before80.github.io/go_docs/langSpec/Blocks/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/Blocks/</guid><description>Blocks 块 原文：https://go.dev/ref/spec#Blocks A block is a possibly empty sequence of declarations and statements within matching brace brackets. ​ 块是一对匹配的花括号内可能为空的声明和</description></item><item><title>模块代理</title><link>https://before80.github.io/go_docs/docs/References/GoModulesReference/ModuleProxies/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/References/GoModulesReference/ModuleProxies/</guid><description>Module proxies 模块代理 原文：https://go.dev/ref/mod#module-proxy GOPROXY protocol ​ 模块代理是一个HTTP服务器，可以响应下面指定</description></item><item><title>server_watch_integration_testing_sub</title><link>https://before80.github.io/go_docs/goconvey/lib/web/server_watch_integration_testing_sub/</link><pubDate>Sun, 15 Dec 2024 21:22:59 +0800</pubDate><guid>https://before80.github.io/go_docs/goconvey/lib/web/server_watch_integration_testing_sub/</guid><description>原文：https://pkg.go.dev/github.com/smartystreets/goconvey@v1.8.1/web/ser</description></item><item><title>Features Table</title><link>https://before80.github.io/go_docs/goconvey/featuresTable/</link><pubDate>Sun, 15 Dec 2024 11:21:13 +0800</pubDate><guid>https://before80.github.io/go_docs/goconvey/featuresTable/</guid><description>原文：https://github.com/smartystreets/goconvey/wiki/Features-Table 收录该文档时</description></item><item><title>containers</title><link>https://before80.github.io/go_docs/thirdPkg/gods/containers/</link><pubDate>Sat, 07 Dec 2024 11:01:14 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/gods/containers/</guid><description>原文：https://pkg.go.dev/github.com/emirpasic/gods/v2@v2.0.0-alpha/contai</description></item><item><title>自定义浏览器启动</title><link>https://before80.github.io/go_docs/rod/doc/using/custom-launch/</link><pubDate>Thu, 21 Nov 2024 08:06:18 +0800</pubDate><guid>https://before80.github.io/go_docs/rod/doc/using/custom-launch/</guid><description>原文：https://go-rod.github.io/i18n/zh-CN/#/custom-launch 收录该文档时间： 2024-11-21T08:08:39+08:00 自定义浏览器启</description></item><item><title>开始使用 Rod</title><link>https://before80.github.io/go_docs/rod/doc/get-started/get-started/</link><pubDate>Thu, 21 Nov 2024 08:04:51 +0800</pubDate><guid>https://before80.github.io/go_docs/rod/doc/get-started/get-started/</guid><description>原文：https://go-rod.github.io/i18n/zh-CN/#/get-started/README 收录该文档时间： 2024-11-21T08:08:39+08:00 开始</description></item><item><title>rod</title><link>https://before80.github.io/go_docs/rod/rod/</link><pubDate>Wed, 20 Nov 2024 18:01:04 +0800</pubDate><guid>https://before80.github.io/go_docs/rod/rod/</guid><description>原文：https://pkg.go.dev/github.com/go-rod/rod 收录该文档时间：2024-11-20T18:02:07</description></item><item><title>数组</title><link>https://before80.github.io/go_docs/comm/Go/basic/datastructures/array/</link><pubDate>Mon, 19 Aug 2024 19:26:32 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Go/basic/datastructures/array/</guid><description>说明 ​ 以下实例代码中： ​ verbs的定义是：var verbs = []string{&amp;quot;T&amp;quot;, &amp;quot;v&amp;quot;, &amp;quot;#v&amp;quot;} ​ mfp来自：&amp;quot;github.com/before80/utils/m</description></item><item><title>performance</title><link>https://before80.github.io/go_docs/comm/Cpp/advanced/performance/</link><pubDate>Mon, 19 Aug 2024 09:53:59 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Cpp/advanced/performance/</guid><description/></item><item><title>performance</title><link>https://before80.github.io/go_docs/comm/Csharp/advanced/performance/</link><pubDate>Mon, 19 Aug 2024 09:53:59 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Csharp/advanced/performance/</guid><description/></item><item><title>performance</title><link>https://before80.github.io/go_docs/comm/Erlang/advanced/performance/</link><pubDate>Mon, 19 Aug 2024 09:53:59 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Erlang/advanced/performance/</guid><description/></item><item><title>performance</title><link>https://before80.github.io/go_docs/comm/Go/advanced/performance/</link><pubDate>Mon, 19 Aug 2024 09:53:59 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Go/advanced/performance/</guid><description/></item><item><title>performance</title><link>https://before80.github.io/go_docs/comm/Java/advanced/performance/</link><pubDate>Mon, 19 Aug 2024 09:53:59 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Java/advanced/performance/</guid><description/></item><item><title>performance</title><link>https://before80.github.io/go_docs/comm/Js/advanced/performance/</link><pubDate>Mon, 19 Aug 2024 09:53:59 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Js/advanced/performance/</guid><description/></item><item><title>performance</title><link>https://before80.github.io/go_docs/comm/PHP/advanced/performance/</link><pubDate>Mon, 19 Aug 2024 09:53:59 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/PHP/advanced/performance/</guid><description/></item><item><title>performance</title><link>https://before80.github.io/go_docs/comm/Python/advanced/performance/</link><pubDate>Mon, 19 Aug 2024 09:53:59 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Python/advanced/performance/</guid><description/></item><item><title>performance</title><link>https://before80.github.io/go_docs/comm/Ruby/advanced/performance/</link><pubDate>Mon, 19 Aug 2024 09:53:59 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ruby/advanced/performance/</guid><description/></item><item><title>performance</title><link>https://before80.github.io/go_docs/comm/Rust/advanced/performance/</link><pubDate>Mon, 19 Aug 2024 09:53:59 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Rust/advanced/performance/</guid><description/></item><item><title>performance</title><link>https://before80.github.io/go_docs/comm/Ts/advanced/performance/</link><pubDate>Mon, 19 Aug 2024 09:53:59 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ts/advanced/performance/</guid><description/></item><item><title>snippets</title><link>https://before80.github.io/go_docs/comm/Cpp/middle/snippets/</link><pubDate>Mon, 19 Aug 2024 09:51:03 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Cpp/middle/snippets/</guid><description/></item><item><title>snippets</title><link>https://before80.github.io/go_docs/comm/Csharp/middle/snippets/</link><pubDate>Mon, 19 Aug 2024 09:51:03 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Csharp/middle/snippets/</guid><description/></item><item><title>snippets</title><link>https://before80.github.io/go_docs/comm/Erlang/middle/snippets/</link><pubDate>Mon, 19 Aug 2024 09:51:03 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Erlang/middle/snippets/</guid><description/></item><item><title>snippets</title><link>https://before80.github.io/go_docs/comm/Go/middle/snippets/</link><pubDate>Mon, 19 Aug 2024 09:51:03 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Go/middle/snippets/</guid><description/></item><item><title>snippets</title><link>https://before80.github.io/go_docs/comm/Java/middle/snippets/</link><pubDate>Mon, 19 Aug 2024 09:51:03 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Java/middle/snippets/</guid><description/></item><item><title>snippets</title><link>https://before80.github.io/go_docs/comm/Js/middle/snippets/</link><pubDate>Mon, 19 Aug 2024 09:51:03 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Js/middle/snippets/</guid><description/></item><item><title>snippets</title><link>https://before80.github.io/go_docs/comm/PHP/middle/snippets/</link><pubDate>Mon, 19 Aug 2024 09:51:03 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/PHP/middle/snippets/</guid><description/></item><item><title>snippets</title><link>https://before80.github.io/go_docs/comm/Python/middle/snippets/</link><pubDate>Mon, 19 Aug 2024 09:51:03 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Python/middle/snippets/</guid><description/></item><item><title>snippets</title><link>https://before80.github.io/go_docs/comm/Ruby/middle/snippets/</link><pubDate>Mon, 19 Aug 2024 09:51:03 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ruby/middle/snippets/</guid><description/></item><item><title>snippets</title><link>https://before80.github.io/go_docs/comm/Rust/middle/snippets/</link><pubDate>Mon, 19 Aug 2024 09:51:03 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Rust/middle/snippets/</guid><description/></item><item><title>snippets</title><link>https://before80.github.io/go_docs/comm/Ts/middle/snippets/</link><pubDate>Mon, 19 Aug 2024 09:51:03 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ts/middle/snippets/</guid><description/></item><item><title>installs</title><link>https://before80.github.io/go_docs/comm/Csharp/basic/installs/</link><pubDate>Mon, 19 Aug 2024 09:29:49 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Csharp/basic/installs/</guid><description/></item><item><title>installs</title><link>https://before80.github.io/go_docs/comm/Erlang/basic/installs/</link><pubDate>Mon, 19 Aug 2024 09:29:49 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Erlang/basic/installs/</guid><description/></item><item><title>installs</title><link>https://before80.github.io/go_docs/comm/Java/basic/installs/</link><pubDate>Mon, 19 Aug 2024 09:29:49 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Java/basic/installs/</guid><description/></item><item><title>installs</title><link>https://before80.github.io/go_docs/comm/Js/basic/installs/</link><pubDate>Mon, 19 Aug 2024 09:29:49 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Js/basic/installs/</guid><description/></item><item><title>installs</title><link>https://before80.github.io/go_docs/comm/PHP/basic/installs/</link><pubDate>Mon, 19 Aug 2024 09:29:49 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/PHP/basic/installs/</guid><description/></item><item><title>installs</title><link>https://before80.github.io/go_docs/comm/Python/basic/installs/</link><pubDate>Mon, 19 Aug 2024 09:29:49 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Python/basic/installs/</guid><description/></item><item><title>installs</title><link>https://before80.github.io/go_docs/comm/Ruby/basic/installs/</link><pubDate>Mon, 19 Aug 2024 09:29:49 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ruby/basic/installs/</guid><description/></item><item><title>installs</title><link>https://before80.github.io/go_docs/comm/Rust/basic/installs/</link><pubDate>Mon, 19 Aug 2024 09:29:49 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Rust/basic/installs/</guid><description/></item><item><title>installs</title><link>https://before80.github.io/go_docs/comm/Ts/basic/installs/</link><pubDate>Mon, 19 Aug 2024 09:29:49 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ts/basic/installs/</guid><description/></item><item><title>安装、配置、卸载、更新、运行代码</title><link>https://before80.github.io/go_docs/comm/Cpp/basic/installs/</link><pubDate>Mon, 19 Aug 2024 09:29:49 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Cpp/basic/installs/</guid><description>安装和配置 安装包来源 Windows： https://visualstudio.microsoft.com/zh-hans/downloads/ Linux： 在Linux上安装和配置 在Windows 10上安装和配置 （1）到https://visua</description></item><item><title>安装、配置、卸载、更新、运行代码</title><link>https://before80.github.io/go_docs/comm/Go/basic/installs/</link><pubDate>Mon, 19 Aug 2024 09:29:49 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Go/basic/installs/</guid><description>安装和配置 安装包来源 https://go.dev/dl/ https://mirrors.aliyun.com/golang/ https://github.com/golang/go/tags https://golang.google.cn/dl/ https://studygolang.com/dl 在Linux上安装和配置 CentOS （a）下载安装包： 1 2 3 4 5 cd /tmp # 请从 https://go.dev/dl/页面中查看</description></item><item><title>安装Go</title><link>https://before80.github.io/go_docs/asu/basic/installuninstallrun/install/</link><pubDate>Sat, 13 Jul 2024 14:49:37 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/installuninstallrun/install/</guid><description>安装包来源 https://go.dev/dl/ https://mirrors.aliyun.com/golang/ https://github.com/golang/go/tags https://golang.google.cn/dl/ https://studygolang.com/dl 说明 ​ 这里以go1.21.2为例，您安装时，请先查看当前Go的最新版本，有最新版本推荐选择最新版本，毕竟Google内部</description></item><item><title>单元测试</title><link>https://before80.github.io/go_docs/asu/basic/testings/unit/</link><pubDate>Sat, 13 Jul 2024 14:21:54 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/testings/unit/</guid><description>有什么好的被测试函数？ 测试代码的组织 平铺模式 xUnit家族模式 测试函数 testing.AllocsPerRun testing.CoverMode testing.Coverage testing.Init testing.Main testing.Register testing.RunBenchmarks testing.RunExamples testing.RunTests testing.Short testing.Verbose testing.T.Log testing.T.Logf testing.T.Error testing.T.Errorf testing.T.Fatal testing.T.Fatalf testing.T.Fail testing.T.FailNow testing.T.Failed testing.T.Parallel testing.T.Run testing.T.Skip testing.T.SkipNow testing.T.Skipf testing.T.Skipped testing.T.TempDir testing.T.Name testing.T.Cleanup testing.T.Deadline testing.T.Setenv testing.T.Helper testing.TB.Log testing.TB.Logf testing.TB.Error</description></item><item><title>App</title><link>https://before80.github.io/go_docs/fiber/API/App/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/App/</guid><description>原文： https://docs.gofiber.io/api/app 🚀 App Static 静态 Use the Static method to serve static files such as images, CSS, and JavaScript. ​ 使用 Static 方法来提供静态文件，例如图像、CSS 和 JavaScript。 INFO 信息 By default, Static will serve index.html files in response to</description></item><item><title>BasicAuth</title><link>https://before80.github.io/go_docs/fiber/API/Middleware/BasicAuth/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/Middleware/BasicAuth/</guid><description>原文： https://docs.gofiber.io/api/middleware/basicauth BasicAuth net/http 到 Fiber - net/http 中间件到 Fiber Basic Authentication middleware for Fiber that provides an HTTP basic authentication. It calls the next handler for valid credentials and 401 Unauthorized or a custom response for missing or invalid credentials. ​ Fiber 的基本身份验证中间件，提供 HTTP 基本身份验证。它</description></item><item><title>Grouping</title><link>https://before80.github.io/go_docs/fiber/Guide/Grouping/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/Guide/Grouping/</guid><description>原文： https://docs.gofiber.io/guide/grouping 🎭 Grouping INFO 信息 In general, the Group functionality in Fiber behaves similarly to ExpressJS. Groups are declared virtually and all routes declared within the group are flattened into a single list with a prefix, which is then checked by the framework in the order it was declared. This means that the behavior of Group in Fiber is identical to that of ExpressJS. ​ 通</description></item><item><title>基准测试</title><link>https://before80.github.io/go_docs/fiber/Extra/Benchmarks/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/Extra/Benchmarks/</guid><description>原文： https://docs.gofiber.io/extra/benchmarks 📊 Benchmarks 基准测试 TechEmpower TechEmpower TechEmpower 提供了许多 Web 应用程序框架的性能比较，这些框架执行基本任务，例如 JSON 序列化、数据库访问和服务器端模板组合。 TechEmpower provides a performance comparison of</description></item><item><title>Go 模块</title><link>https://before80.github.io/go_docs/buffalo/guides/goModules/</link><pubDate>Sun, 04 Feb 2024 21:18:12 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/guides/goModules/</guid><description>原文：https://gobuffalo.io/documentation/guides/gomods/ Go Modules Go 模块 NOTE: Please read https://github.com/golang/go/wiki/Modules to understand more about Go Modules before using them.</description></item><item><title>查询</title><link>https://before80.github.io/go_docs/buffalo/database/querying/</link><pubDate>Sun, 04 Feb 2024 21:14:28 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/database/querying/</guid><description>原文：https://gobuffalo.io/documentation/database/querying/ Querying 查询 In this chapter, you’ll learn how</description></item><item><title>自定义字段</title><link>https://before80.github.io/go_docs/beego/mvcIntroduction/models/customFileds/</link><pubDate>Sun, 04 Feb 2024 10:02:31 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/mvcIntroduction/models/customFileds/</guid><description>原文：https://beego.wiki/docs/mvc/model/custom_fields/ Custom Fields 自定义字段 Custom Fields 自定义字段 1 2 3 4 5</description></item><item><title>responseFormats</title><link>https://before80.github.io/go_docs/beego/mvcIntroduction/controllers/responseFormats/</link><pubDate>Sun, 04 Feb 2024 09:58:40 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/mvcIntroduction/controllers/responseFormats/</guid><description>原文：https://beego.wiki/docs/mvc/controller/jsonxml/ Response formats 响应格式 JSON, XML, JSONP and YAML JSON、XML、</description></item><item><title>config 模块</title><link>https://before80.github.io/go_docs/beego/modules/config/</link><pubDate>Sun, 04 Feb 2024 09:32:20 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/modules/config/</guid><description>原文：https://beego.wiki/docs/module/config/ Config Module 配置模块 Parsing Configuration Files 解析配置文件 The config module is used for parsing configuration files, inspired by database/sql. It supports</description></item><item><title>todos resource</title><link>https://before80.github.io/go_docs/thirdPkg/chi/examples/todosResource/</link><pubDate>Wed, 31 Jan 2024 19:12:40 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/chi/examples/todosResource/</guid><description>原文：https://github.com/go-chi/chi/blob/master/_examples/todos-resource/</description></item><item><title>技术说明 10</title><link>https://before80.github.io/go_docs/thirdPkg/lua/notes/10/</link><pubDate>Thu, 25 Jan 2024 22:17:23 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/lua/notes/10/</guid><description>原文：https://www.lua.org/notes/ltn010.html Technical Note 10 技术说明 10 Weave your own description languages 编织您自己的描述语言 by Gavin Wraith 作者 Gavin Wraith</description></item><item><title>安全</title><link>https://before80.github.io/go_docs/gorm/AdancedTopics/security/</link><pubDate>Sat, 28 Oct 2023 14:36:30 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/AdancedTopics/security/</guid><description>原文：https://gorm.io/docs/security.html GORM uses the database/sql‘s argument placeholders to construct the SQL statement, which will automatically escape arguments to avoid SQL injection</description></item><item><title>性能</title><link>https://before80.github.io/go_docs/gorm/Tutorials/performance/</link><pubDate>Sat, 28 Oct 2023 14:31:43 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/Tutorials/performance/</guid><description>原文：https://gorm.io/docs/performance.html GORM optimizes many things to improve the performance, the default performance should be good for most applications, but there are still some tips for how to improve it for your</description></item><item><title>map</title><link>https://before80.github.io/go_docs/example/maps/</link><pubDate>Mon, 07 Aug 2023 13:32:29 +0800</pubDate><guid>https://before80.github.io/go_docs/example/maps/</guid><description>map 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 package main import &amp;#34;fmt&amp;#34; type K interface{} func main() { var m0 map[string]int fmt.Printf(&amp;#34;%v,%T,len=%d\n&amp;#34;, m0, m0, len(m0)) // map[],map[string]int,len=0 fmt.Printf(&amp;#34;%#v,%T,len=%d\n&amp;#34;, m0, m0, len(m0)) // map[string]int(nil),map[string]int,len=0 m01 := make(map[string]int) fmt.Printf(&amp;#34;%v,%T,len=%d\n&amp;#34;, m01, m01, len(m01)) //</description></item><item><title>基本认证</title><link>https://before80.github.io/go_docs/echo/middleware/basic-auth/</link><pubDate>Sun, 09 Jul 2023 21:53:36 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/middleware/basic-auth/</guid><description>Basic Auth - 基本认证 原文：https://echo.labstack.com/docs/middleware/basic-auth ​ 基本认证中间件</description></item><item><title>快速入门</title><link>https://before80.github.io/go_docs/echo/guide/quick-start/</link><pubDate>Sun, 09 Jul 2023 21:49:33 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/guide/quick-start/</guid><description>Quick Start - 快速入门 原文：https://echo.labstack.com/docs/quick-start 安装 要求 ​ 安装 Echo 需要 Go 1.13 或更高版本。</description></item><item><title>介绍</title><link>https://before80.github.io/go_docs/echo/Introduction/</link><pubDate>Sun, 09 Jul 2023 21:48:49 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/Introduction/</guid><description>Introduction - 介绍 原文：https://echo.labstack.com/docs Echo 项目 ​ Echo 项目是一个功能强大且多用途（versatile ）的 Web 框架</description></item><item><title>2016年 Go 调查结果</title><link>https://before80.github.io/go_docs/goBlog/2017/Go2016SurveyResults/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2017/Go2016SurveyResults/</guid><description>Go 2016 Survey Results - 2016年 Go 调查结果 原文：https://go.dev/blog/survey2016-results Steve Francia, for the Go team 6 March 2017 Thank you 谢谢您</description></item><item><title>Contributors Summit 2019</title><link>https://before80.github.io/go_docs/goBlog/2019/ContributorsSummit2019/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2019/ContributorsSummit2019/</guid><description>Contributors Summit 2019 原文：https://go.dev/blog/contributors-summit-2019 Carmen Andoh and contributors 15 August 2019 Introduction 简介 For the third year in a row, the Go team</description></item><item><title>Go 1.3发布了</title><link>https://before80.github.io/go_docs/goBlog/2014/Go1_3IsReleased/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2014/Go1_3IsReleased/</guid><description>Go 1.3 is released - Go 1.3发布了 原文：https://go.dev/blog/go1.3 Andrew Gerrand 18 June 2014 Today we are happy to announce the release of Go 1.3. This release comes six months after our last major release and provides better performance,</description></item><item><title>Go 的image/draw包</title><link>https://before80.github.io/go_docs/goBlog/2011/TheGoImagedrawPackage/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2011/TheGoImagedrawPackage/</guid><description>The Go image/draw package - Go 的image/draw包 原文：https://go.dev/blog/image-draw Nigel Tao 29 September 2011 Introduction 简介 Package image/draw defines only one operation: drawing a source image onto</description></item><item><title>Go 和谷歌云平台</title><link>https://before80.github.io/go_docs/goBlog/2013/GoAndTheGoogleCloudPlatform/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2013/GoAndTheGoogleCloudPlatform/</guid><description>Go and the Google Cloud Platform - Go 和谷歌云平台 原文：https://go.dev/blog/io2013-talks-cloud Andrew Gerrand 12 June 2013 Introduction 简介 In 2011 we announced the Go runtime</description></item><item><title>Google I/O大会中的 Go 编程会话视频</title><link>https://before80.github.io/go_docs/goBlog/2010/GoProgrammingSessionVideoFromGoogleIO/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2010/GoProgrammingSessionVideoFromGoogleIO/</guid><description>Go Programming session video from Google I/O - Google I/O大会中的 Go 编程会话视频 原文：https://go.dev/blog/io2010 Andrew Gerrand 6 June 2010 2010 年 6 月 6 日 以下是Rob P</description></item><item><title>VS Code Go扩展加入了go项目</title><link>https://before80.github.io/go_docs/goBlog/2020/TheVSCodeGoExtensionJoinsTheGoProject/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2020/TheVSCodeGoExtensionJoinsTheGoProject/</guid><description>The VS Code Go extension joins the Go project - VS Code Go扩展加入了go项目 原文：https://go.dev/blog/vscode-go The Go team 9 June 2020 When the Go project began, &amp;ldquo;an overarching goal was</description></item><item><title>包名</title><link>https://before80.github.io/go_docs/goBlog/2015/PackageNames/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2015/PackageNames/</guid><description>Package names - 包名 原文：https://go.dev/blog/package-names Sameer Ajmani 4 February 2015 Introduction 简介 Go code is organized into packages. Within a package, code can refer to any identifier (name) defined within, while clients of</description></item><item><title>使用 go Cloud的便携式云编程</title><link>https://before80.github.io/go_docs/goBlog/2018/PortableCloudProgrammingWithGoCloud/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2018/PortableCloudProgrammingWithGoCloud/</guid><description>Portable Cloud Programming with Go Cloud - 使用 go Cloud的便携式云编程 原文：https://go.dev/blog/go-cloud Eno Compton and Cassandra Salisbury 24 July 2018 Introduction 简介 Today, the Go team at Google</description></item><item><title>教程：用 Go 和Gin开发一个RESTful API</title><link>https://before80.github.io/go_docs/docs/GettingStarted/TutorialDevelopingARESTfulAPIWithGoAndGin/</link><pubDate>Thu, 18 May 2023 16:35:08 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/GettingStarted/TutorialDevelopingARESTfulAPIWithGoAndGin/</guid><description>Tutorial: Developing a RESTful API with Go and Gin - 教程：用 Go 和Gin开发一个RESTful API 原文：https://go.dev/doc/tutorial/web-serv</description></item><item><title>版本控制系统</title><link>https://before80.github.io/go_docs/docs/References/GoModulesReference/VersionControlSystems/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/References/GoModulesReference/VersionControlSystems/</guid><description>Version control systems 版本控制系统 原文：https://go.dev/ref/mod#vcs ​ go命令可以直接从版本控制储存库中下载模块的源代码和元数据。从</description></item><item><title>声明和作用域</title><link>https://before80.github.io/go_docs/langSpec/DeclarationsAndScope/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/DeclarationsAndScope/</guid><description>Declarations and scope 声明和作用域 原文：https://go.dev/ref/spec#Declarations_and_scope A declaration binds a non-blank identifier to a constant, type, type parameter,</description></item><item><title>Known Issues - 已知问题</title><link>https://before80.github.io/go_docs/goconvey/knownIssues/</link><pubDate>Sun, 15 Dec 2024 11:21:31 +0800</pubDate><guid>https://before80.github.io/go_docs/goconvey/knownIssues/</guid><description>原文：https://github.com/smartystreets/goconvey/wiki/Known-Issues 收录该文档时间：</description></item><item><title>本地化</title><link>https://before80.github.io/go_docs/buffalo/guides/localization/</link><pubDate>Sun, 04 Feb 2024 21:18:22 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/guides/localization/</guid><description>原文：https://gobuffalo.io/documentation/guides/localization/ Localization 本地化 Translating your app is an effective way to</description></item><item><title>原生查询</title><link>https://before80.github.io/go_docs/buffalo/database/rawQueries/</link><pubDate>Sun, 04 Feb 2024 21:14:42 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/database/rawQueries/</guid><description>原文：https://gobuffalo.io/documentation/database/raw-queries/ Raw Queries 原始查询 Sometimes you’</description></item><item><title>FAQ</title><link>https://before80.github.io/go_docs/beego/mvcIntroduction/models/faq/</link><pubDate>Sun, 04 Feb 2024 10:02:38 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/mvcIntroduction/models/faq/</guid><description>原文：https://beego.wiki/docs/mvc/model/faq/ FAQ FAQ Q: My application need to support multiple database type. How can I check current database type when I am using Raw SQL? ​ 问：我的</description></item><item><title>formValidation</title><link>https://before80.github.io/go_docs/beego/mvcIntroduction/controllers/formValidation/</link><pubDate>Sun, 04 Feb 2024 09:58:57 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/mvcIntroduction/controllers/formValidation/</guid><description>原文：https://beego.wiki/docs/mvc/controller/validation/ Form validation 表单验证 Form validation 表单验证 The Form validation module is</description></item><item><title>governor 模块</title><link>https://before80.github.io/go_docs/beego/modules/governor/</link><pubDate>Sun, 04 Feb 2024 09:32:34 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/modules/governor/</guid><description>原文：https://beego.wiki/docs/module/governor/ Governor module 总督模块 Governor module 总督模块 Please use Admin module. ​ 请使用管理员模块。</description></item><item><title>versions</title><link>https://before80.github.io/go_docs/thirdPkg/chi/examples/versions/</link><pubDate>Wed, 31 Jan 2024 19:12:49 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/chi/examples/versions/</guid><description>原文： |---data | | | ---article.go | | | ---errors.go |---presenter | | | |---v1 | | | | | ---article.go | |---v2 | | | | | ---article.go | |---v3 | | | | | ---article.go |---main.go |---chi.svg main.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28</description></item><item><title>技术说明 11</title><link>https://before80.github.io/go_docs/thirdPkg/lua/notes/11/</link><pubDate>Thu, 25 Jan 2024 22:17:31 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/lua/notes/11/</guid><description>原文：https://www.lua.org/notes/ltn011.html Technical Note 11 技术说明 11 Last update: Wed Feb 19 09:25:05 EST 2003 Require revisited: Import by Wim Couwenberg This LTN depends on &amp;ldquo;loadfile,&amp;rdquo; introduced in Lua</description></item><item><title>GORM 配置</title><link>https://before80.github.io/go_docs/gorm/AdancedTopics/gormConfig/</link><pubDate>Sat, 28 Oct 2023 14:36:45 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/AdancedTopics/gormConfig/</guid><description>原文：https://gorm.io/docs/gorm_config.html GORM provides Config can be used during initialization ​ GORM提供了Config可以在初始化时使</description></item><item><title>自定义数据类型</title><link>https://before80.github.io/go_docs/gorm/Tutorials/customizeDataTypes/</link><pubDate>Sat, 28 Oct 2023 14:32:12 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/Tutorials/customizeDataTypes/</guid><description>原文：https://gorm.io/docs/data_types.html GORM provides few interfaces that allow users to define well-supported customized data types for GORM, takes json as an example ​ GORM提供了一些接</description></item><item><title>range</title><link>https://before80.github.io/go_docs/example/range/</link><pubDate>Mon, 07 Aug 2023 13:32:37 +0800</pubDate><guid>https://before80.github.io/go_docs/example/range/</guid><description>range 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69</description></item><item><title>2019年Go开发者调查结果</title><link>https://before80.github.io/go_docs/goBlog/2020/GoDeveloperSurvey2019Results/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2020/GoDeveloperSurvey2019Results/</guid><description>Go Developer Survey 2019 Results - 2019年Go开发者调查结果 原文：https://go.dev/blog/survey2019-results Todd Kulesza 20 April 2020 What a response! 多</description></item><item><title>errors 是值</title><link>https://before80.github.io/go_docs/goBlog/2015/ErrorsAreValues/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2015/ErrorsAreValues/</guid><description>Errors are values - errors 是值 原文：https://go.dev/blog/errors-are-values Rob Pike 12 January 2015 A common point of discussion among Go programmers, especially those new to the language, is how to handle</description></item><item><title>Go 1.8发布了</title><link>https://before80.github.io/go_docs/goBlog/2017/Go1_8IsReleased/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2017/Go1_8IsReleased/</guid><description>Go 1.8 is released - Go 1.8发布了 原文：https://go.dev/blog/go1.8 Chris Broadfoot 16 February 2017 Today the Go team is happy to announce the release of Go 1.8. You can get it from the download page. There are significant performance</description></item><item><title>Go 的image包</title><link>https://before80.github.io/go_docs/goBlog/2011/TheGoImagePackage/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2011/TheGoImagePackage/</guid><description>The Go image package - Go 的image包 原文：https://go.dev/blog/image Nigel Tao 21 September 2011 Introduction 简介 The image and image/color packages define a number of types: color.Color and color.Model describe colors, image.Point and image.Rectangle describe basic 2-D</description></item><item><title>Go 在 I/O 大会上：常见问题</title><link>https://before80.github.io/go_docs/goBlog/2010/GoAtIOFrequentlyAskedQuestions/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2010/GoAtIOFrequentlyAskedQuestions/</guid><description>Go at I/O: Frequently Asked Questions - Go 在 I/O 大会上：常见问题 原文：https://go.dev/blog/io2010-faq Andrew Gerrand 27 May 2010 2010 年 5 月 27 日 ​ 在 Google I/O 上的高调</description></item><item><title>GopherCon 2014总结</title><link>https://before80.github.io/go_docs/goBlog/2014/GopherCon-2014-Wrap-Up/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2014/GopherCon-2014-Wrap-Up/</guid><description>GopherCon 2014 Wrap Up - GopherCon 2014总结 原文：https://go.dev/blog/gophercon Andrew Gerrand 28 May 2014 In April this year 700 gophers descended upon Denver to attend GopherCon, the world’s first</description></item><item><title>实验, 简化, ship</title><link>https://before80.github.io/go_docs/goBlog/2019/ExperimentSimplifyShip/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2019/ExperimentSimplifyShip/</guid><description>Experiment, Simplify, Ship - 实验, 简化, ship 原文：https://go.dev/blog/experiment Russ Cox 1 August 2019 Introduction 简介 This is the blog post version of my talk last week at GopherCon 2019. 这是我上</description></item><item><title>与 Go 团队的对话</title><link>https://before80.github.io/go_docs/goBlog/2013/AConversationWithTheGoTeam/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2013/AConversationWithTheGoTeam/</guid><description>A conversation with the Go team - 与 Go 团队的对话 原文：https://go.dev/blog/io2013-chat 6 June 2013 At Google I/O 2013, several members of the Go team hosted a &amp;ldquo;Fireside chat.&amp;rdquo; Robert Griesemer, Rob Pike, David</description></item><item><title>走向 go：go垃圾收集器的历程</title><link>https://before80.github.io/go_docs/goBlog/2018/GettingToGoTheJourneyOfGosGarbageCollector/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2018/GettingToGoTheJourneyOfGosGarbageCollector/</guid><description>Getting to Go: The Journey of Go&amp;rsquo;s Garbage Collector - 走向 go：go垃圾收集器的历程 原文：https://go.dev/blog/ismmkeynote Rick Hudson 12 July 2018 This is the transcript from the</description></item><item><title>教程：开始使用泛型</title><link>https://before80.github.io/go_docs/docs/GettingStarted/TutorialGettingStartedWithGenerics/</link><pubDate>Thu, 18 May 2023 16:35:08 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/GettingStarted/TutorialGettingStartedWithGenerics/</guid><description>Tutorial: Getting started with generics - 教程：开始使用泛型 原文：https://go.dev/doc/tutorial/generics ​ 本教程介绍Go中泛型的基本知识</description></item><item><title>表达式</title><link>https://before80.github.io/go_docs/langSpec/Expressions/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/Expressions/</guid><description>Expressions 表达式 原文：https://go.dev/ref/spec#Expressions An expression specifies the computation of a value by applying operators and functions to operands. ​ 表达式通过将运算符和函数</description></item><item><title>模块zip文件</title><link>https://before80.github.io/go_docs/docs/References/GoModulesReference/ModuleZipFiles/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/References/GoModulesReference/ModuleZipFiles/</guid><description>Module zip files 模块zip文件 原文：https://go.dev/ref/mod#zip-files ​ 模块版本是以.zip文件的形式发布的。很少有必要</description></item><item><title>从 Web UI 打开编辑器中的文件</title><link>https://before80.github.io/go_docs/goconvey/openingFilesInYourEditorFromTheWebUI/</link><pubDate>Sun, 15 Dec 2024 11:22:05 +0800</pubDate><guid>https://before80.github.io/go_docs/goconvey/openingFilesInYourEditorFromTheWebUI/</guid><description>原文：https://github.com/smartystreets/goconvey/wiki/Opening-files-in-you</description></item><item><title>日志记录</title><link>https://before80.github.io/go_docs/buffalo/guides/logging/</link><pubDate>Sun, 04 Feb 2024 21:18:32 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/guides/logging/</guid><description>原文：https://gobuffalo.io/documentation/guides/logging/ Logging 日志记录 Buffalo logs are managed using the logrus package. ​ Buffalo 日志</description></item><item><title>回调</title><link>https://before80.github.io/go_docs/buffalo/database/callbacks/</link><pubDate>Sun, 04 Feb 2024 21:14:52 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/database/callbacks/</guid><description>原文：https://gobuffalo.io/documentation/database/callbacks/ Callbacks 回调 Pop provides a means to execute code before and after</description></item><item><title>errorHanding</title><link>https://before80.github.io/go_docs/beego/mvcIntroduction/controllers/errorHanding/</link><pubDate>Sun, 04 Feb 2024 09:59:10 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/mvcIntroduction/controllers/errorHanding/</guid><description>原文：https://beego.wiki/docs/mvc/controller/errors/ Error Handling 错误处理 Error Handling 错误处理 In web development, we need to be able to</description></item><item><title>i18n 模块</title><link>https://before80.github.io/go_docs/beego/modules/i18n/</link><pubDate>Sun, 04 Feb 2024 09:32:45 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/modules/i18n/</guid><description>原文：https://beego.wiki/docs/module/i18n/ i18n Module - i18n 模块 Introduction to i18n - i18n 简介 This module is mainly used for i18n of sites and applications, which provides multiple-language options to users, improve</description></item><item><title>编写插件</title><link>https://before80.github.io/go_docs/gorm/AdancedTopics/writePlugins/</link><pubDate>Sat, 28 Oct 2023 14:36:59 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/AdancedTopics/writePlugins/</guid><description>原文：https://gorm.io/docs/write_plugins.html 回调 Callbacks GORM itself is powered by Callbacks, it has callbacks for Create, Query, Update, Delete, Row, Raw, you could fully customize GORM with them as you</description></item><item><title>范围 Scopes</title><link>https://before80.github.io/go_docs/gorm/Tutorials/scopes/</link><pubDate>Sat, 28 Oct 2023 14:32:25 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/Tutorials/scopes/</guid><description>原文：https://gorm.io/docs/scopes.html Scopes allow you to re-use commonly used logic, the shared logic needs to be defined as type func(*gorm.DB) *gorm.DB ​ 范围允许你重用常用逻辑，共享逻</description></item><item><title>function</title><link>https://before80.github.io/go_docs/example/functions/</link><pubDate>Mon, 07 Aug 2023 13:32:45 +0800</pubDate><guid>https://before80.github.io/go_docs/example/functions/</guid><description>function 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 package main import &amp;#34;fmt&amp;#34; // 求两 int 类型</description></item><item><title>Go、go社区界和大流行病</title><link>https://before80.github.io/go_docs/goBlog/2020/GoTheGoCommunityAndThePandemic/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2020/GoTheGoCommunityAndThePandemic/</guid><description>Go, the Go Community, and the Pandemic - go、go社区界和大流行病 原文：https://go.dev/blog/pandemic Carmen Andoh, Russ Cox, and Steve Francia 25 March 2020 Go always comes second to more basic concerns</description></item><item><title>GothamGo：大苹果中的地鼠</title><link>https://before80.github.io/go_docs/goBlog/2015/GothamGoGophersInTheBigApple/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2015/GothamGoGophersInTheBigApple/</guid><description>GothamGo: gophers in the big apple - GothamGo：大苹果中的地鼠 原文：https://go.dev/blog/gothamgo Francesc Campoy 9 January 2015 Last November more than two hundred gophers from all across the</description></item><item><title>The Go Gopher</title><link>https://before80.github.io/go_docs/goBlog/2014/TheGoGopher/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2014/TheGoGopher/</guid><description>The Go Gopher 原文：https://go.dev/blog/gopher Rob Pike and Andrew Gerrand 24 March 2014 The Go gopher is an iconic mascot and one of the most distinctive features of the Go project. In this post we’ll talk about its origins,</description></item><item><title>反射法则</title><link>https://before80.github.io/go_docs/goBlog/2011/TheLawsOfReflection/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2011/TheLawsOfReflection/</guid><description>The Laws of Reflection - 反射法则 原文：https://go.dev/blog/laws-of-reflection Rob Pike 6 September 2011 罗布·派克 2011年9月6日 简</description></item><item><title>高级 Go 并发模式</title><link>https://before80.github.io/go_docs/goBlog/2013/AdvancedGoConcurrencyPatterns/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2013/AdvancedGoConcurrencyPatterns/</guid><description>Advanced Go Concurrency Patterns - 高级 Go 并发模式 原文：https://go.dev/blog/io2013-talk-concurrency Andrew Gerrand 23 May 2013 At Google I/O a year ago Rob</description></item><item><title>更新 Go 行为准则</title><link>https://before80.github.io/go_docs/goBlog/2018/UpdatingTheGoCodeOfConduct/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2018/UpdatingTheGoCodeOfConduct/</guid><description>Updating the Go Code of Conduct - 更新 go 行为准则 原文：https://go.dev/blog/conduct-2018 Steve Francia 23 May 2018 In November 2015, we introduced the Go Code of Conduct. It was developed in a collaboration</description></item><item><title>即将举行的Google I/O Go Events</title><link>https://before80.github.io/go_docs/goBlog/2010/UpcomingGoogleIOGoEvents/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2010/UpcomingGoogleIOGoEvents/</guid><description>Upcoming Google I/O Go Events - 即将举行的Google I/O Go Events 原文：https://go.dev/blog/io2010-preview Andrew Gerrand 12 May 2010 2010 年 5 月 12 日 ​ Google</description></item><item><title>为什么泛型？</title><link>https://before80.github.io/go_docs/goBlog/2019/WhyGenerics/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2019/WhyGenerics/</guid><description>Why Generics? - 为什么泛型？ 原文：https://go.dev/blog/why-generics Ian Lance Taylor 31 July 2019 Introduction 简介 This is the blog post version of my talk last week at Gophercon 2019. 这是我</description></item><item><title>教程：fuzzing 入门</title><link>https://before80.github.io/go_docs/docs/GettingStarted/TutorialGettingStartedWithFuzzing/</link><pubDate>Thu, 18 May 2023 16:35:08 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/GettingStarted/TutorialGettingStartedWithFuzzing/</guid><description>Tutorial: Getting started with fuzzing - 教程：fuzzing 入门 原文：https://go.dev/doc/tutorial/fuzz ​ 本教程介绍了Go中的模糊测试的基</description></item><item><title>私有模块</title><link>https://before80.github.io/go_docs/docs/References/GoModulesReference/PrivateModules/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/References/GoModulesReference/PrivateModules/</guid><description>Private modules 私有模块 原文：https://go.dev/ref/mod#private-modules ​ Go模块经常是在版本控制服务器和模块代理上开</description></item><item><title>语句</title><link>https://before80.github.io/go_docs/langSpec/Statements/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/Statements/</guid><description>Statements 语句 原文：https://go.dev/ref/spec#Statements Statements control execution. ​ 语句控制执行。 Statement = Declaration | LabeledStmt | SimpleStmt | GoStmt | ReturnStmt | BreakStmt | ContinueStmt | GotoStmt | FallthroughStmt</description></item><item><title>Profiles</title><link>https://before80.github.io/go_docs/goconvey/profiles/</link><pubDate>Sun, 15 Dec 2024 11:22:23 +0800</pubDate><guid>https://before80.github.io/go_docs/goconvey/profiles/</guid><description>原文：https://github.com/smartystreets/goconvey/wiki/Profiles 收录该文档时间： 2024-12-15T11:22:23+08:00 Profiles Manuel Mendez</description></item><item><title>模板引擎</title><link>https://before80.github.io/go_docs/buffalo/guides/templateEngines/</link><pubDate>Sun, 04 Feb 2024 21:18:46 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/guides/templateEngines/</guid><description>原文：https://gobuffalo.io/documentation/guides/logging/ Template Engines 模板引擎 Map Template Engines by Extension 按扩展名映射</description></item><item><title>作用域</title><link>https://before80.github.io/go_docs/buffalo/database/scoping/</link><pubDate>Sun, 04 Feb 2024 21:15:01 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/database/scoping/</guid><description>原文：https://gobuffalo.io/documentation/database/scoping/ Scoping 作用域 Scoping is a way to structure your DB calls, when it</description></item><item><title>日志记录</title><link>https://before80.github.io/go_docs/beego/mvcIntroduction/controllers/logging/</link><pubDate>Sun, 04 Feb 2024 09:59:20 +0800</pubDate><guid>https://before80.github.io/go_docs/beego/mvcIntroduction/controllers/logging/</guid><description>原文：https://beego.wiki/docs/mvc/controller/logs/ Logging 日志记录 Logging 日志记录 This part was removed in Beego 2.0, and please use logs module ​</description></item><item><title>编写驱动</title><link>https://before80.github.io/go_docs/gorm/AdancedTopics/writeDriver/</link><pubDate>Sat, 28 Oct 2023 14:37:09 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/AdancedTopics/writeDriver/</guid><description>原文：https://gorm.io/docs/write_driver.html 编写新驱动 Write new driver GORM provides official support for sqlite, mysql, postgres, sqlserver. ​ GORM 为 sqlite、my</description></item><item><title>约定 Conventions</title><link>https://before80.github.io/go_docs/gorm/Tutorials/conventions/</link><pubDate>Sat, 28 Oct 2023 14:32:37 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/Tutorials/conventions/</guid><description>原文：https://gorm.io/docs/conventions.html ID 作为主键 ID as Primary Key GORM uses the field with the name ID as the table’s primary key by default.</description></item><item><title>Variadic Function</title><link>https://before80.github.io/go_docs/example/variadic-functions/</link><pubDate>Mon, 07 Aug 2023 13:33:44 +0800</pubDate><guid>https://before80.github.io/go_docs/example/variadic-functions/</guid><description>Variadic Function - 可变参数函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;math&amp;#34; ) func findMax(nums ...int) int { max := math.MinInt for _, num := range nums { if num &amp;gt;</description></item><item><title>Go 1.1发布了</title><link>https://before80.github.io/go_docs/goBlog/2013/Go1_1IsReleased/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2013/Go1_1IsReleased/</guid><description>Go 1.1 is released - Go 1.1发布了 原文：https://go.dev/blog/go1.1 Andrew Gerrand 13 May 2013 It is our great pleasure to announce the release of Go 1.1. 我们非常高兴地宣布Go 1.</description></item><item><title>Go 并发模式：Pipelines和取消</title><link>https://before80.github.io/go_docs/goBlog/2014/GoConcurrencyPatternsPipelinesAndCancellation/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2014/GoConcurrencyPatternsPipelinesAndCancellation/</guid><description>Go Concurrency Patterns: Pipelines and cancellation - Go 并发模式：管道和取消 原文：https://go.dev/blog/pipelines Sameer Ajmani 13 March 2014 2014年3月13日 简介 Introduction Go</description></item><item><title>Go 的新品牌</title><link>https://before80.github.io/go_docs/goBlog/2018/GosNewBrand/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2018/GosNewBrand/</guid><description>Go&amp;rsquo;s New Brand - Go 的新品牌 原文：https://go.dev/blog/go-brand Steve Francia 26 April 2018 Introduction 简介 I am delighted to announce the launch of Go’s new look and logo. 我很高兴地宣</description></item><item><title>Gopher Gala是第一个全球Go黑客马拉松活动</title><link>https://before80.github.io/go_docs/goBlog/2015/TheGopherGalaIsTheFirstWorldwideGoHackathon/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2015/TheGopherGalaIsTheFirstWorldwideGoHackathon/</guid><description>The Gopher Gala is the first worldwide Go hackathon - Gopher Gala是第一个全球Go黑客马拉松活动 原文：https://go.dev/blog/gophergala Francesc Campoy 7 January 2015 The Gopher</description></item><item><title>两场 Go 讲座： Go 中的词汇扫描 和 Cuddle：一个App Engine Demo</title><link>https://before80.github.io/go_docs/goBlog/2011/TwoGoTalksLexicalScanningInGoAndCuddleAnAppEngineDemo/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2011/TwoGoTalksLexicalScanningInGoAndCuddleAnAppEngineDemo/</guid><description>Two Go Talks: &amp;ldquo;Lexical Scanning in Go&amp;rdquo; and &amp;ldquo;Cuddle: an App Engine Demo&amp;rdquo; - 两场 Go 讲座： Go 中的词汇扫描 和 Cuddle：一个App Engine Demo 原文：https://go.dev/blog/sydne</description></item><item><title>新演讲和教程</title><link>https://before80.github.io/go_docs/goBlog/2010/NewTalkAndTutorials/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2010/NewTalkAndTutorials/</guid><description>New Talk and Tutorials - 新演讲和教程 原文：https://go.dev/blog/new-talk-and-tutorials Andrew Gerrand 5 May 2010 ​ 最近，Rob Pi</description></item><item><title>宣布新的go Store</title><link>https://before80.github.io/go_docs/goBlog/2019/AnnouncingTheNewGoStore/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2019/AnnouncingTheNewGoStore/</guid><description>Announcing The New Go Store - 宣布新的go Store 原文：https://go.dev/blog/store Cassandra Salisbury 18 July 2019 October 1, 2019, Update: The Go Store is currently offline. We are sorry for any inconvenience. We will update this post with any status</description></item><item><title>用于协议缓冲区的新 Go API</title><link>https://before80.github.io/go_docs/goBlog/2020/ANewGoAPIForProtocolBuffers/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2020/ANewGoAPIForProtocolBuffers/</guid><description>A new Go API for Protocol Buffers - 用于协议缓冲区的新 go API 原文：https://go.dev/blog/protobuf-apiv2 Joe Tsai, Damien Neil, and Herbie Ong 2 March 2020 Introduction 简介 We</description></item><item><title>编写 Web 应用程序</title><link>https://before80.github.io/go_docs/docs/GettingStarted/WritingWebApplications/</link><pubDate>Thu, 18 May 2023 16:35:08 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/GettingStarted/WritingWebApplications/</guid><description>Writing Web Applications - 编写 Web 应用程序 原文：https://go.dev/doc/articles/wiki/ 简介 本教程中涉及的内容： 用加载和保存方法创建一</description></item><item><title>模块缓存</title><link>https://before80.github.io/go_docs/docs/References/GoModulesReference/ModuleCache/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/References/GoModulesReference/ModuleCache/</guid><description>Module cache 模块缓存 原文：https://go.dev/ref/mod#module-cache ​ 模块缓存是go命令存储下载模块文件的目录。模块缓存</description></item><item><title>内置函数</title><link>https://before80.github.io/go_docs/langSpec/Built-inFunctions/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/Built-inFunctions/</guid><description>Built-in functions 内置函数 原文：https://go.dev/ref/spec#Built-in_functions Built-in functions are predeclared. They are called like any other function but some of them accept a type instead</description></item><item><title>reset</title><link>https://before80.github.io/go_docs/goconvey/reset/</link><pubDate>Sun, 15 Dec 2024 11:22:30 +0800</pubDate><guid>https://before80.github.io/go_docs/goconvey/reset/</guid><description>原文：https://github.com/smartystreets/goconvey/wiki/Reset 收录该文档时间： 2024-12-15T11:22:30+08:00 Reset Jian Liu edited this page</description></item><item><title>测试</title><link>https://before80.github.io/go_docs/buffalo/guides/testing/</link><pubDate>Sun, 04 Feb 2024 21:18:56 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/guides/testing/</guid><description>原文：https://gobuffalo.io/documentation/guides/testing/ Testing 测试 Running Tests 运行测试 The Buffalo test runner will make sure your</description></item><item><title>关联和关系</title><link>https://before80.github.io/go_docs/buffalo/database/associationsAndRelationships/</link><pubDate>Sun, 04 Feb 2024 21:15:20 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/database/associationsAndRelationships/</guid><description>原文：https://gobuffalo.io/documentation/database/relations/ Associations and Relationships 关联和关系 Associations are the Pop way</description></item><item><title>变更记录</title><link>https://before80.github.io/go_docs/gorm/AdancedTopics/changeLog/</link><pubDate>Sat, 28 Oct 2023 14:37:23 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/AdancedTopics/changeLog/</guid><description>原文：https://gorm.io/docs/changelog.html v2.0 - 2020.08 GORM 2.0 is a rewrite from scratch, it introduces some incompatible-API change and many improvements ​ GORM 2.0 是从头开始重写的，它引</description></item><item><title>设置</title><link>https://before80.github.io/go_docs/gorm/Tutorials/settings/</link><pubDate>Sat, 28 Oct 2023 14:32:46 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/Tutorials/settings/</guid><description>原文：https://gorm.io/docs/settings.html GORM provides Set, Get, InstanceSet, InstanceGet methods allow users pass values to hooks or other methods ​ GORM提供了Set、Get、I</description></item><item><title>closure</title><link>https://before80.github.io/go_docs/example/closures/</link><pubDate>Mon, 07 Aug 2023 13:33:53 +0800</pubDate><guid>https://before80.github.io/go_docs/example/closures/</guid><description>closure - 闭包 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 package main import &amp;#34;fmt&amp;#34; // 步骤 func step() func() int { i := 0 return func() int {</description></item><item><title>2014年FOSDEM上的 Go 讲座</title><link>https://before80.github.io/go_docs/goBlog/2014/GoTalksAtFOSDEM2014/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2014/GoTalksAtFOSDEM2014/</guid><description>Go talks at FOSDEM 2014 - 2014年FOSDEM上的 Go 讲座 原文：https://go.dev/blog/fosdem14 Andrew Gerrand 24 February 2014 Introduction 简介 At FOSDEM on the 2nd of February 2014 members</description></item><item><title>Go 1.14版发布了</title><link>https://before80.github.io/go_docs/goBlog/2020/Go1_14IsReleased/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2020/Go1_14IsReleased/</guid><description>Go 1.14 is released - go 1.14版发布了 原文：https://go.dev/blog/go1.14 Alex Rakoczy 25 February 2020 Today the Go team is very happy to announce the release of Go 1.14. You can get it from the download page.</description></item><item><title>Go for App Engine is now generally available</title><link>https://before80.github.io/go_docs/goBlog/2011/GoForAppEngineIsNowGenerallyAvailable/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2011/GoForAppEngineIsNowGenerallyAvailable/</guid><description>Go for App Engine is now generally available 原文：https://go.dev/blog/appengine-ga Andrew Gerrand 21 July 2011 The Go and App Engine teams are excited to announce that the Go runtime for App Engine is now generally available. This</description></item><item><title>JSON-RPC：接口的故事</title><link>https://before80.github.io/go_docs/goBlog/2010/JSON-RPCATaleOfInterfaces/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2010/JSON-RPCATaleOfInterfaces/</guid><description>JSON-RPC: a tale of interfaces - JSON-RPC：接口的故事 原文：https://go.dev/blog/json-rpc Andrew Gerrand 27 April 2010 2010年4月27日 ​ 这里我</description></item><item><title>关于 Go 中包的版本管理的建议</title><link>https://before80.github.io/go_docs/goBlog/2018/AProposalForPackageVersioningInGo/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2018/AProposalForPackageVersioningInGo/</guid><description>A Proposal for Package Versioning in Go - 关于 go 中包的版本管理的建议 原文：https://go.dev/blog/versioning-proposal Russ Cox 26 March 2018 Introduction 引</description></item><item><title>迈向Go 2的下一步</title><link>https://before80.github.io/go_docs/goBlog/2019/NextStepsTowardGo2/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2019/NextStepsTowardGo2/</guid><description>Next steps toward Go 2 - 迈向go 2的下一步 原文：https://go.dev/blog/go2-next-steps Robert Griesemer, for the Go team 26 June 2019 Status 状态 We’re well</description></item><item><title>通往 Go 1的道路</title><link>https://before80.github.io/go_docs/goBlog/2013/ThePathToGo1/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2013/ThePathToGo1/</guid><description>The path to Go 1 - 通往 Go 1的道路 原文：https://go.dev/blog/go1-path Andrew Gerrand 14 March 2013 In July 2012, Rob Pike and I presented a talk at OSCON titled The path to Go 1. In it we</description></item><item><title>如何编写 Go 代码</title><link>https://before80.github.io/go_docs/docs/GettingStarted/HowToWriteGoCode/</link><pubDate>Thu, 18 May 2023 16:35:08 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/GettingStarted/HowToWriteGoCode/</guid><description>How to Write Go Code - 如何编写 Go 代码 原文：https://go.dev/doc/code 简介 ​ 本文档演示了在模块中开发一个简单的Go包，并介绍了go t</description></item><item><title>包</title><link>https://before80.github.io/go_docs/langSpec/Packages/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/Packages/</guid><description>Packages 包 原文：https://go.dev/ref/spec#Packages Go programs are constructed by linking together packages. A package in turn is constructed from one or more source files that together declare constants, types, variables and functions belonging to the package and</description></item><item><title>验证模块</title><link>https://before80.github.io/go_docs/docs/References/GoModulesReference/AuthenticatingModules/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/References/GoModulesReference/AuthenticatingModules/</guid><description>Authenticating modules 验证模块 原文：https://go.dev/ref/mod#authenticating ​ 当go命令下载模块zip 文件或go.mod文件</description></item><item><title>skip</title><link>https://before80.github.io/go_docs/goconvey/skip/</link><pubDate>Sun, 15 Dec 2024 11:36:09 +0800</pubDate><guid>https://before80.github.io/go_docs/goconvey/skip/</guid><description>原文：https://github.com/smartystreets/goconvey/wiki/Skip 收录该文档时间： 2024-12-15T11:36:09+08:00 Skip Eli Bierman edited this page on</description></item><item><title>视频</title><link>https://before80.github.io/go_docs/buffalo/guides/videos/</link><pubDate>Sun, 04 Feb 2024 21:19:04 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/guides/videos/</guid><description>原文：https://gobuffalo.io/documentation/guides/videos/ Videos 视频 Collection from Other Pages 其他页面中的集合 Buffalo &amp;amp; Goth</description></item><item><title>一对一关联</title><link>https://before80.github.io/go_docs/buffalo/database/oneToOneAssociations/</link><pubDate>Sun, 04 Feb 2024 21:15:39 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/database/oneToOneAssociations/</guid><description>原文：https://gobuffalo.io/documentation/database/relations-one-to-one/ One to</description></item><item><title>GORM 社区</title><link>https://before80.github.io/go_docs/gorm/AdancedTopics/community/</link><pubDate>Sat, 28 Oct 2023 15:44:06 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/AdancedTopics/community/</guid><description>原文：https://gorm.io/community.html 提问 Ask 如何提出一个好的问题？How do I ask a good question? Stackoverflow - https://stackoverflow.com/questions/tagged/go-gorm Github Issues - https://github.com/go-gorm/gorm/issues 聊天 Chat Gitter - https://gitter.im/jinzhu/gorm 链</description></item><item><title>Recursion</title><link>https://before80.github.io/go_docs/example/recursion/</link><pubDate>Mon, 07 Aug 2023 13:34:13 +0800</pubDate><guid>https://before80.github.io/go_docs/example/recursion/</guid><description>Recursion - 递归 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 package main import &amp;#34;fmt&amp;#34; // 递归计算阶乘 func factorial(n int) int { if n &amp;lt;= 0 { return 1 } return n * factorial(n-1) } // 递</description></item><item><title>2017年 Go 调查结果</title><link>https://before80.github.io/go_docs/goBlog/2018/Go2017SurveyResults/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2018/Go2017SurveyResults/</guid><description>Go 2017 Survey Results - 2017年 go 调查结果 原文：https://go.dev/blog/survey2017-results Steve Francia 26 February 2018 Thank you 谢谢您 This post summarizes the</description></item><item><title>2018年 Go 调查结果</title><link>https://before80.github.io/go_docs/goBlog/2019/Go2018SurveyResults/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2019/Go2018SurveyResults/</guid><description>Go 2018 Survey Results - 2018年 go 调查结果 原文：https://go.dev/blog/survey2018-results Todd Kulesza, Steve Francia 28 March 2019 Thank you 谢谢您 This post</description></item><item><title>pkg.go.dev的下一步工作</title><link>https://before80.github.io/go_docs/goBlog/2020/NextStepsForPkg.go.dev/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2020/NextStepsForPkg.go.dev/</guid><description>Next steps for pkg.go.dev - pkg.go.dev的下一步工作 原文：https://go.dev/blog/pkg.go.dev-2020 Julie Qiu 31 January 2020 Introduction 简介 In 2019, we</description></item><item><title>Third-第三方库：goprotobuf及其他</title><link>https://before80.github.io/go_docs/goBlog/2010/Third-partyLibrariesGoprotobufAndBeyond/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2010/Third-partyLibrariesGoprotobufAndBeyond/</guid><description>Third-party libraries: goprotobuf and beyond - 第三方库：goprotobuf及其他 原文：https://go.dev/blog/protobuf Andrew Gerrand 20 April 2010 2010 年 4 月 20 日 ​ 在 3 月</description></item><item><title>错误处理和 go</title><link>https://before80.github.io/go_docs/goBlog/2011/ErrorHandlingAndGo/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2011/ErrorHandlingAndGo/</guid><description>Error handling and Go - 错误处理和 go 原文：https://go.dev/blog/error-handling-and-go Andrew Gerrand 12 July 2011 Introduction 简介 If you have written any Go code</description></item><item><title>最近的两篇 Go 文章</title><link>https://before80.github.io/go_docs/goBlog/2013/TwoRecentGoArticles/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2013/TwoRecentGoArticles/</guid><description>Two recent Go articles - 最近的两篇 Go 文章 原文：https://go.dev/blog/two-recent-go-articles Andrew Gerrand 6 March 2013 Introduction 简介 In tod</description></item><item><title>如何编写 Go 代码（使用GOPATH）</title><link>https://before80.github.io/go_docs/docs/GettingStarted/HowToWriteGoCodeWithGOPATH/</link><pubDate>Thu, 18 May 2023 16:35:08 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/GettingStarted/HowToWriteGoCodeWithGOPATH/</guid><description>How to Write Go Code (with GOPATH) - 如何编写 Go 代码（使用GOPATH） 原文：https://go.dev/doc/gopath_code 简介 ​ 如果您是Go的新手</description></item><item><title>程序初始化和执行</title><link>https://before80.github.io/go_docs/langSpec/ProgramInitializationAndExecution/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/ProgramInitializationAndExecution/</guid><description>Program initialization and execution 程序初始化和执行 原文：https://go.dev/ref/spec#Program_initialization_and_exec</description></item><item><title>环境变量</title><link>https://before80.github.io/go_docs/docs/References/GoModulesReference/EnvironmentVariables/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/References/GoModulesReference/EnvironmentVariables/</guid><description>Environment variables 环境变量 原文：https://go.dev/ref/mod#environment-variables ​ go命令中的模块行为可以使用下面</description></item><item><title>webUI</title><link>https://before80.github.io/go_docs/goconvey/webUI/</link><pubDate>Sun, 15 Dec 2024 11:36:16 +0800</pubDate><guid>https://before80.github.io/go_docs/goconvey/webUI/</guid><description>原文：https://github.com/smartystreets/goconvey/wiki/Web-UI 收录该文档时间： 2024-12-15T11:36:16+08:00 Web UI Russell edited this</description></item><item><title>一对多关联</title><link>https://before80.github.io/go_docs/buffalo/database/oneToManyAssociations/</link><pubDate>Sun, 04 Feb 2024 21:15:49 +0800</pubDate><guid>https://before80.github.io/go_docs/buffalo/database/oneToManyAssociations/</guid><description>原文：https://gobuffalo.io/documentation/database/relations-one-to-many/ One</description></item><item><title>向GORM贡献</title><link>https://before80.github.io/go_docs/gorm/AdancedTopics/contribute/</link><pubDate>Sat, 28 Oct 2023 14:37:39 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/AdancedTopics/contribute/</guid><description>原文：https://gorm.io/contribute.html You can help to deliver a better GORM! there are many things that you can do: Help others to know GORM Share GORM with the world by social channels, or simply tell people who might be</description></item><item><title>pointers</title><link>https://before80.github.io/go_docs/example/pointers/</link><pubDate>Mon, 07 Aug 2023 13:34:25 +0800</pubDate><guid>https://before80.github.io/go_docs/example/pointers/</guid><description/></item><item><title>Go 1.10发布了</title><link>https://before80.github.io/go_docs/goBlog/2018/Go1_10IsReleased/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2018/Go1_10IsReleased/</guid><description>Go 1.10 is released - Go 1.10发布了 原文：https://go.dev/blog/go1.10 Brad Fitzpatrick 16 February 2018 Happy Friday, happy weekend! Today the Go team is happy to announce the release of Go 1.10. You can get it from the</description></item><item><title>Go 的一等函数</title><link>https://before80.github.io/go_docs/goBlog/2011/FirstClassFunctionsInGo/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2011/FirstClassFunctionsInGo/</guid><description>First Class Functions in Go - Go 的一等函数 原文：https://go.dev/blog/functions-codewalk Andrew Gerrand 30 June 2011 2011年6月30日 Programmers new</description></item><item><title>Go： 2010年3月有什么新动态</title><link>https://before80.github.io/go_docs/goBlog/2010/GoWhatIsNewInMarch2010/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2010/GoWhatIsNewInMarch2010/</guid><description>Go: What&amp;rsquo;s New in March 2010- Go： 2010年3月有什么新动态 原文：https://go.dev/blog/hello-world Andrew Gerrand 18 March 2010 2010年3月18</description></item><item><title>调试您在Go 1.12中部署的内容</title><link>https://before80.github.io/go_docs/goBlog/2019/DebuggingWhatYouDeployInGo1_12/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2019/DebuggingWhatYouDeployInGo1_12/</guid><description>Debugging what you deploy in Go 1.12 - 调试您在go 1.12中部署的内容 原文：https://go.dev/blog/debug-opt David Chase 21 March 2019 Introduction 简介 Go 1.11 and Go 1.12 make</description></item><item><title>关于Go 1.15的建议</title><link>https://before80.github.io/go_docs/goBlog/2020/ProposalsForGo1_15/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2020/ProposalsForGo1_15/</guid><description>Proposals for Go 1.15 - 关于go 1.15的建议 原文：https://go.dev/blog/go1.15-proposals Robert Griesemer, for the Go team 28 January 2020 Status 状态 We are close</description></item><item><title>去参加 Go 聚会吧</title><link>https://before80.github.io/go_docs/goBlog/2013/GetTheeToAGoMeetup/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2013/GetTheeToAGoMeetup/</guid><description>Get thee to a Go meetup - 去参加 Go 聚会吧 原文：https://go.dev/blog/meetups Andrew Gerrand 27 February 2013 Last week, David Symonds and I each gave talks at Sydney’s Go meetup, golang-syd.</description></item><item><title>词汇表</title><link>https://before80.github.io/go_docs/docs/References/GoModulesReference/Glossary/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/References/GoModulesReference/Glossary/</guid><description>Glossary词汇表 原文：https://go.dev/ref/mod#glossary build constraint A condition that determines whether a Go source file is used when compiling a package. Build constraints may be expressed with file name</description></item><item><title>错误</title><link>https://before80.github.io/go_docs/langSpec/Errors/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/Errors/</guid><description>Errors 错误 原文：https://go.dev/ref/spec#Errors The predeclared type error is defined as ​ 预先声明的error类型被定义为 1 2 3 type error interface { Error() string }</description></item><item><title>You're holding it wrong</title><link>https://before80.github.io/go_docs/goconvey/youreHoldingItWrong/</link><pubDate>Sun, 15 Dec 2024 11:36:32 +0800</pubDate><guid>https://before80.github.io/go_docs/goconvey/youreHoldingItWrong/</guid><description>原文：https://github.com/smartystreets/goconvey/wiki/You&amp;rsquo;re-holding</description></item><item><title>Translate Current Site</title><link>https://before80.github.io/go_docs/gorm/AdancedTopics/translateCurrentSite/</link><pubDate>Sat, 28 Oct 2023 14:37:57 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/AdancedTopics/translateCurrentSite/</guid><description/></item><item><title>Strings and Runes</title><link>https://before80.github.io/go_docs/example/strings-and-runes/</link><pubDate>Mon, 07 Aug 2023 13:34:38 +0800</pubDate><guid>https://before80.github.io/go_docs/example/strings-and-runes/</guid><description>Strings and Runes 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67</description></item><item><title>go maps in action</title><link>https://before80.github.io/go_docs/goBlog/2013/GoMapsInAction/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2013/GoMapsInAction/</guid><description>Go maps in action 原文：https://go.dev/blog/maps Andrew Gerrand 6 February 2013 Introduction 简介 One of the most useful data structures in computer science is the hash table. Many hash table implementations exist with varying properties, but in general they offer fast lookups, adds, and</description></item><item><title>Hello, 中国!</title><link>https://before80.github.io/go_docs/goBlog/2018/HelloChina/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2018/HelloChina/</guid><description>Hello, 中国! 原文：https://go.dev/blog/hello-china Andrew Bonventre 22 January 2018 We are thrilled to announce that the content on golang.org is now available in mainland China through the name https://golang.google.cn. The growing Go developer community in China</description></item><item><title>分析 Go 程序</title><link>https://before80.github.io/go_docs/goBlog/2011/ProfilingGoPrograms/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2011/ProfilingGoPrograms/</guid><description>Profiling Go Programs - 分析 Go 程序 Russ Cox, July 2011; updated by Shenghou Ma, May 2013 24 June 2011 Russ Cox，2011年7月；Shenghou Ma更新，2013年5月 2011年6月24日 At Scala Days 2011, Robert</description></item><item><title>使用 Go 模块</title><link>https://before80.github.io/go_docs/goBlog/2019/UsingGoModules/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2019/UsingGoModules/</guid><description>Using Go Modules - 使用 go 模块 原文：https://go.dev/blog/using-go-modules Tyler Bui-Palsulich and Eno Compton 19 March 2019 2019年3月19日 Introduction 简介 这</description></item><item><title>运行时恐慌</title><link>https://before80.github.io/go_docs/langSpec/Run-timePanics/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/Run-timePanics/</guid><description>Run-time panics 运行时恐慌 原文：https://go.dev/ref/spec#Run-time_panics Execution errors such as attempting to index an array out of bounds trigger a run-time panic equivalent to a call of</description></item><item><title>struct</title><link>https://before80.github.io/go_docs/example/structs/</link><pubDate>Mon, 07 Aug 2023 13:35:18 +0800</pubDate><guid>https://before80.github.io/go_docs/example/structs/</guid><description>struct 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69</description></item><item><title>Go fmt 您的代码</title><link>https://before80.github.io/go_docs/goBlog/2013/goFmtYourCode/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2013/goFmtYourCode/</guid><description>go fmt your code - go fmt 您的代码 原文：https://go.dev/blog/gofmt Andrew Gerrand 23 January 2013 Introduction 简介 Gofmt is a tool that automatically formats Go source code. Gofmt是一个可以自动格</description></item><item><title>聚焦外部 Go 库</title><link>https://before80.github.io/go_docs/goBlog/2011/SpotlightOnExternalGoLibraries/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2011/SpotlightOnExternalGoLibraries/</guid><description>Spotlight on external Go libraries - 聚焦外部 Go 库 原文：https://go.dev/blog/external-libraries Andrew Gerrand 3 June 2011 While the Go authors have been working hard at improving Go</description></item><item><title>新的 Go 开发者网络</title><link>https://before80.github.io/go_docs/goBlog/2019/TheNewGoDeveloperNetwork/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2019/TheNewGoDeveloperNetwork/</guid><description>The New Go Developer Network - 新的 go 开发者网络 原文：https://go.dev/blog/go-developer-network GoBridge Leadership Team 14 March 2019 A sense of community flourishes when we</description></item><item><title>系统考虑</title><link>https://before80.github.io/go_docs/langSpec/SystemConsiderations/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/SystemConsiderations/</guid><description>System considerations 系统考虑 原文：[https://go.dev/ref/spec#System considerations](https://go.dev/ref/spec#System considerations) Package unsafe - unsafe 包 The built-in package unsafe, known to the compiler and accessible through the import path &amp;quot;unsafe&amp;quot;, provides facilities for low-level programming including operations that</description></item><item><title>附录</title><link>https://before80.github.io/go_docs/langSpec/Appendix/</link><pubDate>Tue, 27 Feb 2024 20:00:28 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/Appendix/</guid><description>原文：https://go.dev/ref/spec#Appendix Appendix 附录 Language versions 语言版本 The Go 1 compatibility guarantee ensures that programs written to the Go 1 specification will continue to compile and run correctly, unchanged, over the lifetime of</description></item><item><title>method</title><link>https://before80.github.io/go_docs/example/methods/</link><pubDate>Mon, 07 Aug 2023 13:35:26 +0800</pubDate><guid>https://before80.github.io/go_docs/example/methods/</guid><description>method 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69</description></item><item><title>GIF解码器：Go 接口的练习</title><link>https://before80.github.io/go_docs/goBlog/2011/AGIFDecoderAnExerciseInGoInterfaces/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2011/AGIFDecoderAnExerciseInGoInterfaces/</guid><description>A GIF decoder: an exercise in Go interfaces - GIF解码器：Go 接口的练习 原文：https://go.dev/blog/gif-decoder Rob Pike 25 May 2011 Introduction 简介 At the Google I/O conference</description></item><item><title>Go 云开发工具包的新内容</title><link>https://before80.github.io/go_docs/goBlog/2019/WhatIsNewInTheGoCloudDevelopmentKit/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2019/WhatIsNewInTheGoCloudDevelopmentKit/</guid><description>What&amp;rsquo;s new in the Go Cloud Development Kit - go 云开发工具包的新内容 原文：https://go.dev/blog/go-cloud2019 The Go Cloud Development Kit team at Google 谷歌的Go云开</description></item><item><title>并发不是并行</title><link>https://before80.github.io/go_docs/goBlog/2013/ConcurrencyIsNotParallelism/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2013/ConcurrencyIsNotParallelism/</guid><description>Concurrency is not parallelism - 并发不是并行 原文：https://go.dev/blog/waza-talk Andrew Gerrand 16 January 2013 If there’s one thing most people know about Go, is that it is designed for concurrency.</description></item><item><title>选择器</title><link>https://before80.github.io/go_docs/rod/doc/using/selectors/</link><pubDate>Thu, 21 Nov 2024 08:07:59 +0800</pubDate><guid>https://before80.github.io/go_docs/rod/doc/using/selectors/</guid><description>原文：https://go-rod.github.io/i18n/zh-CN/#/selectors/README 收录该文档时间： 2024-11-21T08:07:59+08:00 选择器 ​</description></item><item><title>上下文（Context）和超时（Timeout）</title><link>https://before80.github.io/go_docs/rod/doc/get-started/context-and-timeout/</link><pubDate>Thu, 21 Nov 2024 08:05:23 +0800</pubDate><guid>https://before80.github.io/go_docs/rod/doc/get-started/context-and-timeout/</guid><description>原文：https://go-rod.github.io/i18n/zh-CN/#/context-and-timeout 收录该文档时间： 2024-11-21T08:08:39+08:00 上</description></item><item><title>defaults</title><link>https://before80.github.io/go_docs/rod/defaults/</link><pubDate>Wed, 20 Nov 2024 18:01:34 +0800</pubDate><guid>https://before80.github.io/go_docs/rod/defaults/</guid><description>原文：https://pkg.go.dev/github.com/go-rod/rod/lib/defaults 收录该文档时间：2024-1</description></item><item><title>切片</title><link>https://before80.github.io/go_docs/comm/Go/basic/datastructures/slice/</link><pubDate>Mon, 19 Aug 2024 19:26:59 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Go/basic/datastructures/slice/</guid><description>说明 ​ 以下实例代码中： ​ verbs的定义是：var verbs = []string{&amp;quot;T&amp;quot;, &amp;quot;v&amp;quot;, &amp;quot;#v&amp;quot;} ​ mfp来自：&amp;quot;github.com/before80/utils/m</description></item><item><title>datarace</title><link>https://before80.github.io/go_docs/comm/Cpp/advanced/datarace/</link><pubDate>Mon, 19 Aug 2024 09:54:40 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Cpp/advanced/datarace/</guid><description/></item><item><title>datarace</title><link>https://before80.github.io/go_docs/comm/Csharp/advanced/datarace/</link><pubDate>Mon, 19 Aug 2024 09:54:40 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Csharp/advanced/datarace/</guid><description/></item><item><title>datarace</title><link>https://before80.github.io/go_docs/comm/Erlang/advanced/datarace/</link><pubDate>Mon, 19 Aug 2024 09:54:40 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Erlang/advanced/datarace/</guid><description/></item><item><title>datarace</title><link>https://before80.github.io/go_docs/comm/Go/advanced/datarace/</link><pubDate>Mon, 19 Aug 2024 09:54:40 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Go/advanced/datarace/</guid><description/></item><item><title>datarace</title><link>https://before80.github.io/go_docs/comm/Java/advanced/datarace/</link><pubDate>Mon, 19 Aug 2024 09:54:40 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Java/advanced/datarace/</guid><description/></item><item><title>datarace</title><link>https://before80.github.io/go_docs/comm/Js/advanced/datarace/</link><pubDate>Mon, 19 Aug 2024 09:54:40 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Js/advanced/datarace/</guid><description/></item><item><title>datarace</title><link>https://before80.github.io/go_docs/comm/PHP/advanced/datarace/</link><pubDate>Mon, 19 Aug 2024 09:54:40 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/PHP/advanced/datarace/</guid><description/></item><item><title>datarace</title><link>https://before80.github.io/go_docs/comm/Python/advanced/datarace/</link><pubDate>Mon, 19 Aug 2024 09:54:40 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Python/advanced/datarace/</guid><description/></item><item><title>datarace</title><link>https://before80.github.io/go_docs/comm/Ruby/advanced/datarace/</link><pubDate>Mon, 19 Aug 2024 09:54:40 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ruby/advanced/datarace/</guid><description/></item><item><title>datarace</title><link>https://before80.github.io/go_docs/comm/Rust/advanced/datarace/</link><pubDate>Mon, 19 Aug 2024 09:54:40 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Rust/advanced/datarace/</guid><description/></item><item><title>datarace</title><link>https://before80.github.io/go_docs/comm/Ts/advanced/datarace/</link><pubDate>Mon, 19 Aug 2024 09:54:40 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ts/advanced/datarace/</guid><description/></item><item><title>log</title><link>https://before80.github.io/go_docs/comm/Cpp/middle/log/</link><pubDate>Mon, 19 Aug 2024 09:51:20 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Cpp/middle/log/</guid><description/></item><item><title>log</title><link>https://before80.github.io/go_docs/comm/Csharp/middle/log/</link><pubDate>Mon, 19 Aug 2024 09:51:20 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Csharp/middle/log/</guid><description/></item><item><title>log</title><link>https://before80.github.io/go_docs/comm/Erlang/middle/log/</link><pubDate>Mon, 19 Aug 2024 09:51:20 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Erlang/middle/log/</guid><description/></item><item><title>log</title><link>https://before80.github.io/go_docs/comm/Go/middle/log/</link><pubDate>Mon, 19 Aug 2024 09:51:20 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Go/middle/log/</guid><description/></item><item><title>log</title><link>https://before80.github.io/go_docs/comm/Java/middle/log/</link><pubDate>Mon, 19 Aug 2024 09:51:20 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Java/middle/log/</guid><description/></item><item><title>log</title><link>https://before80.github.io/go_docs/comm/Js/middle/log/</link><pubDate>Mon, 19 Aug 2024 09:51:20 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Js/middle/log/</guid><description/></item><item><title>log</title><link>https://before80.github.io/go_docs/comm/PHP/middle/log/</link><pubDate>Mon, 19 Aug 2024 09:51:20 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/PHP/middle/log/</guid><description/></item><item><title>log</title><link>https://before80.github.io/go_docs/comm/Python/middle/log/</link><pubDate>Mon, 19 Aug 2024 09:51:20 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Python/middle/log/</guid><description/></item><item><title>log</title><link>https://before80.github.io/go_docs/comm/Ruby/middle/log/</link><pubDate>Mon, 19 Aug 2024 09:51:20 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ruby/middle/log/</guid><description/></item><item><title>log</title><link>https://before80.github.io/go_docs/comm/Rust/middle/log/</link><pubDate>Mon, 19 Aug 2024 09:51:20 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Rust/middle/log/</guid><description/></item><item><title>log</title><link>https://before80.github.io/go_docs/comm/Ts/middle/log/</link><pubDate>Mon, 19 Aug 2024 09:51:20 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ts/middle/log/</guid><description/></item><item><title>keywords</title><link>https://before80.github.io/go_docs/comm/Cpp/basic/keywords/</link><pubDate>Mon, 19 Aug 2024 09:31:22 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Cpp/basic/keywords/</guid><description/></item><item><title>keywords</title><link>https://before80.github.io/go_docs/comm/Csharp/basic/keywords/</link><pubDate>Mon, 19 Aug 2024 09:31:22 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Csharp/basic/keywords/</guid><description/></item><item><title>keywords</title><link>https://before80.github.io/go_docs/comm/Erlang/basic/keywords/</link><pubDate>Mon, 19 Aug 2024 09:31:22 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Erlang/basic/keywords/</guid><description/></item><item><title>keywords</title><link>https://before80.github.io/go_docs/comm/Js/basic/keywords/</link><pubDate>Mon, 19 Aug 2024 09:31:22 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Js/basic/keywords/</guid><description/></item><item><title>keywords</title><link>https://before80.github.io/go_docs/comm/PHP/basic/keywords/</link><pubDate>Mon, 19 Aug 2024 09:31:22 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/PHP/basic/keywords/</guid><description/></item><item><title>keywords</title><link>https://before80.github.io/go_docs/comm/Ruby/basic/keywords/</link><pubDate>Mon, 19 Aug 2024 09:31:22 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ruby/basic/keywords/</guid><description/></item><item><title>keywords</title><link>https://before80.github.io/go_docs/comm/Rust/basic/keywords/</link><pubDate>Mon, 19 Aug 2024 09:31:22 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Rust/basic/keywords/</guid><description/></item><item><title>keywords</title><link>https://before80.github.io/go_docs/comm/Ts/basic/keywords/</link><pubDate>Mon, 19 Aug 2024 09:31:22 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ts/basic/keywords/</guid><description/></item><item><title>关键字、保留字</title><link>https://before80.github.io/go_docs/comm/Go/basic/keywords/</link><pubDate>Mon, 19 Aug 2024 09:31:22 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Go/basic/keywords/</guid><description>​ Go目前有25个关键字。 ​ 来源：https://go.dev/ref/spec#Keywords 1 2 3 4 5 break default func interface select case defer go map struct chan else goto package switch const</description></item><item><title>关键字、保留字</title><link>https://before80.github.io/go_docs/comm/Java/basic/keywords/</link><pubDate>Mon, 19 Aug 2024 09:31:22 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Java/basic/keywords/</guid><description>ReservedKeyword: 1 2 3 4 5 6 7 8 9 10 11 abstract continue for new switch assert default if package synchronized boolean do goto private this break double implements protected throw byte else import public throws case enum instanceof return transient catch extends int short try char final interface static void class finally long strictfp volatile const float native super while _ (underscore) ContextualKeyword: 1 2 3 4 exports</description></item><item><title>关键字、保留字</title><link>https://before80.github.io/go_docs/comm/Python/basic/keywords/</link><pubDate>Mon, 19 Aug 2024 09:31:22 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Python/basic/keywords/</guid><description>​ Python目前有35个关键字。 ​ 来源：https://docs.python.org/zh-cn/3.12/reference/lexi</description></item><item><title>卸载Go</title><link>https://before80.github.io/go_docs/asu/basic/installuninstallrun/uninstall/</link><pubDate>Sat, 13 Jul 2024 14:49:45 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/installuninstallrun/uninstall/</guid><description>在Linux上卸载Go CentOS （a）删除/usr/local/go目录； （b）修改相关环境变量，将相关Go环境变量移除掉； Ubuntu （a）若是使用snap</description></item><item><title>性能测试</title><link>https://before80.github.io/go_docs/asu/basic/testings/benchmark/</link><pubDate>Sat, 13 Jul 2024 14:22:16 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/testings/benchmark/</guid><description/></item><item><title>类型统一规则</title><link>https://before80.github.io/go_docs/langSpec/TypeUnificationRules/</link><pubDate>Tue, 27 Feb 2024 20:00:50 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/TypeUnificationRules/</guid><description>原文：https://go.dev/ref/spec#Type_unification_rules Type unification rules 类型统一规则 The type unification rules describe if and how two types unify. The</description></item><item><title>Cache</title><link>https://before80.github.io/go_docs/fiber/API/Middleware/Cache/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/Middleware/Cache/</guid><description>原文： https://docs.gofiber.io/api/middleware/cache Cache 缓存 Cache middleware for Fiber designed to intercept responses and cache them. This middleware will cache the Body, Content-Type and StatusCode using the c.Path() as unique identifier. Special thanks to @codemicro for creating this middleware for Fiber core! ​ 专为拦截响应并缓存响应而设计的 Fiber 缓存中间件。此中间</description></item><item><title>Ctx</title><link>https://before80.github.io/go_docs/fiber/API/Ctx/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/Ctx/</guid><description>原文： https://docs.gofiber.io/api/ctx 🧠 Ctx Accepts Checks, if the specified extensions or content types are acceptable. ​ 检查指定的扩展名或内容类型是否可接受。 INFO 信息 Based on the request’s Accept HTTP header. ​ 基于请求的 Accept HTTP 头。 Signature 签名 1 2</description></item><item><title>模板</title><link>https://before80.github.io/go_docs/fiber/Guide/Templates/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/Guide/Templates/</guid><description>原文： https://docs.gofiber.io/guide/templates 📝 Templates 模板 Template interfaces 模板接口 Fiber provides a Views interface to provide your own template engine: ​ Fiber 提供了一个 Views 接口，以便您提供自己的模板引擎： Views 视图 Beego 的 MVC 简介 MVC 简介 MVC 简介 Beego 的 MVC 简介 Beego 使</description></item><item><title>interface</title><link>https://before80.github.io/go_docs/example/interface/</link><pubDate>Mon, 07 Aug 2023 13:35:34 +0800</pubDate><guid>https://before80.github.io/go_docs/example/interface/</guid><description>interface 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69</description></item><item><title>Body Dump</title><link>https://before80.github.io/go_docs/echo/middleware/body-dump/</link><pubDate>Sun, 09 Jul 2023 21:53:47 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/middleware/body-dump/</guid><description>Body Dump 原文：https://echo.labstack.com/docs/middleware/body-dump Body dump middleware captures the request and response payload and calls the registered handler.</description></item><item><title>自定义</title><link>https://before80.github.io/go_docs/echo/guide/customization/</link><pubDate>Sun, 09 Jul 2023 21:49:53 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/guide/customization/</guid><description>Customization - 自定义 原文：https://echo.labstack.com/docs/customization 调试模式 ​ Echo#Debug 可以用于启用/禁用调试模</description></item><item><title>Go 代码审查意见</title><link>https://before80.github.io/go_docs/docs/CodeReviewComments/</link><pubDate>Thu, 18 May 2023 17:31:23 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/CodeReviewComments/</guid><description>Go Code Review Comments - Go代码审查意见 原文：https://github.com/golang/go/wiki/CodeReviewComments Ian Lance</description></item><item><title>Go 1.12发布了</title><link>https://before80.github.io/go_docs/goBlog/2019/Go1_12IsReleased/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2019/Go1_12IsReleased/</guid><description>Go 1.12 is released - Go 1.12发布了 原文：https://go.dev/blog/go1.12 Andrew Bonventre 25 February 2019 Today the Go team is happy to announce the release of Go 1.12. You can get it from the download page. 今天</description></item><item><title>The App Engine SDK和工作区(GOPATH)</title><link>https://before80.github.io/go_docs/goBlog/2013/TheAppEngineSDKAndWorkspacesGOPATH/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2013/TheAppEngineSDKAndWorkspacesGOPATH/</guid><description>The App Engine SDK and workspaces (GOPATH) - The App Engine SDK和工作区(GOPATH) 原文：https://go.dev/blog/appengine-gopath Andrew Gerrand 9 January 2013</description></item><item><title>谷歌2011年I/O大会上的 Go：视频</title><link>https://before80.github.io/go_docs/goBlog/2011/GoAtGoogleIO2011Videos/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2011/GoAtGoogleIO2011Videos/</guid><description>Go at Google I/O 2011: videos - 谷歌2011年I/O大会上的 go：视频 原文：https://go.dev/blog/io2011 Andrew Gerrand 23 May 2011 Introduction 简介 The Go team had a great time</description></item><item><title>Effective Go</title><link>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/EffectiveGo/</link><pubDate>Wed, 17 May 2023 15:03:14 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/EffectiveGo/</guid><description>Effective Go 原文：https://go.dev/doc/effective_go 简介 ​ Go是一种新的语言。虽然它借鉴了现有语言的思想，但它具有不寻常</description></item><item><title>Go Fuzzing</title><link>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/Fuzzing/</link><pubDate>Wed, 17 May 2023 15:03:14 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/Fuzzing/</guid><description>Go Fuzzing 原文：https://go.dev/security/fuzz/ ​ 从Go 1.18开始，Go在其标准工具链中支持模糊测试。OSS-Fuzz</description></item><item><title>Go 垃圾收集器指南</title><link>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/AGuideToTheGoGarbageCollector/</link><pubDate>Wed, 17 May 2023 15:03:14 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/AGuideToTheGoGarbageCollector/</guid><description>A Guide to the Go Garbage Collector - Go 垃圾收集器指南 原文：https://go.dev/doc/gc-guide Introduction 简介 This guide is intended to aid advanced Go users in better understanding their application costs by providing insights into the Go</description></item><item><title>编辑器插件和IDEs</title><link>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/EditorPluginsAndIDEs/</link><pubDate>Wed, 17 May 2023 15:03:14 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/EditorPluginsAndIDEs/</guid><description>Editor plugins and IDEs - 编辑器插件和IDEs 原文：https://go.dev/doc/editors 简介 ​ 本文列出了Go生态系统（Go ecosystem</description></item><item><title>管理依赖项</title><link>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/ManagingDependencies/</link><pubDate>Wed, 17 May 2023 15:03:14 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/ManagingDependencies/</guid><description>Managing dependencies - 管理依赖项 原文：https://go.dev/doc/modules/managing-dependencies ​ 当您的代码使用外部包</description></item><item><title>诊断</title><link>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/Diagnostics/</link><pubDate>Wed, 17 May 2023 15:03:14 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/Diagnostics/</guid><description>Diagnostics 诊断 原文：https://go.dev/doc/diagnostics 简介 ​ Go 生态系统提供了大量的 API 和工具来诊断 Go 程序中的逻辑和性能问题。</description></item><item><title>utf16</title><link>https://before80.github.io/go_docs/stdLib/unicode/utf16/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/unicode/utf16/</guid><description>原文：https://pkg.go.dev/unicode/utf16@go1.24.2 Package utf16 implements encoding and decoding of UTF-16 sequences. ​ utf16包实现了UTF-16序</description></item><item><title>utf8</title><link>https://before80.github.io/go_docs/stdLib/unicode/utf8/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/unicode/utf8/</guid><description>原文：https://pkg.go.dev/unicode/utf8@go1.24.2 Package utf8 implements functions and constants to support text encoded in UTF-8. It includes functions to translate between runes and UTF-8 byte sequences. See https://en.wikipedia.org/wiki/UTF-8 ​ u</description></item><item><title>struct-embedding</title><link>https://before80.github.io/go_docs/example/struct-embedding/</link><pubDate>Mon, 07 Aug 2023 13:35:47 +0800</pubDate><guid>https://before80.github.io/go_docs/example/struct-embedding/</guid><description/></item><item><title>数据竞争检测器</title><link>https://before80.github.io/go_docs/docs/DataRaceDetector/</link><pubDate>Thu, 18 May 2023 17:31:23 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/DataRaceDetector/</guid><description>Data Race Detector - 数据竞争检测器 原文：https://go.dev/doc/articles/race_detector 简介 ​ 数据竞争是并发系统中最常</description></item><item><title>Go 和 Google App Engine</title><link>https://before80.github.io/go_docs/goBlog/2011/GoAndGoogleAppEngine/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2011/GoAndGoogleAppEngine/</guid><description>Go and Google App Engine - Go 和 Google App Engine 原文：https://go.dev/blog/appengine David Symonds, Nigel Tao, and Andrew Gerrand 10 May 2011 Google’s App Engine provides a reliable, scalable, easy way to</description></item><item><title>最近的两次 Go 讲座</title><link>https://before80.github.io/go_docs/goBlog/2013/TwoRecentGoTalks/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2013/TwoRecentGoTalks/</guid><description>Two recent Go talks - 最近的两次 Go 讲座 原文：https://go.dev/blog/two-recent-go-talks Andrew Gerrand 2 January 2013 Introduction 简介 Late last year I wrote a couple</description></item><item><title>generic</title><link>https://before80.github.io/go_docs/example/generics/</link><pubDate>Mon, 07 Aug 2023 13:36:02 +0800</pubDate><guid>https://before80.github.io/go_docs/example/generics/</guid><description>generic 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 package main import &amp;#34;fmt&amp;#34; // 泛型类型 type List[T any] struct { next *List[T] value T } // 泛型函数 func SumIntsOrFloats[K comparable, V int64 | float64](m map[K]V)</description></item><item><title>使用GDB调试 Go 代码</title><link>https://before80.github.io/go_docs/docs/DebuggingGoCodeWithGDB/</link><pubDate>Thu, 18 May 2023 17:31:23 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/DebuggingGoCodeWithGDB/</guid><description>Debugging Go Code with GDB - 使用GDB调试 Go 代码 原文：https://go.dev/doc/gdb ​ 下面的说明适用于标准工具链(gc Go编译器和工具)。Gc</description></item><item><title>App Engine上的go：工具、测试和并发</title><link>https://before80.github.io/go_docs/goBlog/2013/GoOnAppEngineToolsTestsAndConcurrency/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2013/GoOnAppEngineToolsTestsAndConcurrency/</guid><description>Go on App Engine: tools, tests, and concurrency - App Engine上的go：工具、测试和并发 原文：https://go.dev/blog/appengine-dec2013 Andrew</description></item><item><title>Heroku 上的 go</title><link>https://before80.github.io/go_docs/goBlog/2011/GoAtHeroku/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2011/GoAtHeroku/</guid><description>Go at Heroku - Heroku 上的 go 原文：https://go.dev/blog/heroku Keith Rarick and Blake Mizerany 21 April 2011 This week’s blog post is written by Keith Rarick and Blake Mizerany, systems engineers at Heroku. In their own words,</description></item><item><title>error</title><link>https://before80.github.io/go_docs/example/errors/</link><pubDate>Mon, 07 Aug 2023 13:36:12 +0800</pubDate><guid>https://before80.github.io/go_docs/example/errors/</guid><description>error 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 package main import</description></item><item><title>Go 1和Go程序的未来</title><link>https://before80.github.io/go_docs/docs/Go1AndTheFutureOfGoPrograms/</link><pubDate>Thu, 18 May 2023 17:26:23 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/Go1AndTheFutureOfGoPrograms/</guid><description>Go 1 and the Future of Go Programs - Go 1和Go程序的未来 原文：https://go.dev/doc/go1compat 简介 ​ Go 1版本的发布，简称Go 1，是该语</description></item><item><title>介绍一下 gofix</title><link>https://before80.github.io/go_docs/goBlog/2011/IntroducingGofix/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2011/IntroducingGofix/</guid><description>Introducing Gofix - 介绍一下 gofix 原文：https://go.dev/blog/introducing-gofix Russ Cox 15 April 2011 The next Go release will include significant API changes in several fundamental Go packages. Code that implements</description></item><item><title>goroutine</title><link>https://before80.github.io/go_docs/example/goroutines/</link><pubDate>Mon, 07 Aug 2023 13:36:27 +0800</pubDate><guid>https://before80.github.io/go_docs/example/goroutines/</guid><description>goroutine 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 package main import ( &amp;#34;fmt&amp;#34;</description></item><item><title>Go 文档注释</title><link>https://before80.github.io/go_docs/docs/GoDocComments/</link><pubDate>Thu, 18 May 2023 17:26:23 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/GoDocComments/</guid><description>Go Doc Comments - Go 文档注释 原文：https://go.dev/doc/comment ​ &amp;ldquo;Doc comments&amp;quot;是指出现在顶级package、c</description></item><item><title>godoc：文档化 Go 代码</title><link>https://before80.github.io/go_docs/goBlog/2011/GodocDocumentingGoCode/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2011/GodocDocumentingGoCode/</guid><description>Godoc: documenting Go code - godoc：文档化 Go 代码 原文：https://go.dev/blog/godoc Andrew Gerrand 31 March 2011 [Note, June 2022: For updated guidelines about documenting Go code, see &amp;ldquo;Go Doc Comments.&amp;rdquo;] [注，202</description></item><item><title>channel</title><link>https://before80.github.io/go_docs/example/channels/</link><pubDate>Mon, 07 Aug 2023 13:36:37 +0800</pubDate><guid>https://before80.github.io/go_docs/example/channels/</guid><description>channel channel 是什么？ ​ channel是Go语言中的一种内置数据类型。 channel有什么用？ ​ 可用于： 信息交流： 数据传递： 信号通知： 任务编排： 互斥锁</description></item><item><title>Go 发布周期(v18)</title><link>https://before80.github.io/go_docs/docs/GoReleaseCycle18/</link><pubDate>Thu, 18 May 2023 17:26:23 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/GoReleaseCycle18/</guid><description>Go Release Cycle - Go 发布周期 原文：https://github.com/golang/go/wiki/Go-Release-Cycle Ian Lance Taylor edited this page on Jun</description></item><item><title>海量数据</title><link>https://before80.github.io/go_docs/goBlog/2011/GobsOfData/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2011/GobsOfData/</guid><description>Gobs of data - 海量数据 原文：https://go.dev/blog/gob Rob Pike 24 March 2011 2011年3月24日 简介 ​ 要在网络上传输数据结构或将其存储在文</description></item><item><title>select</title><link>https://before80.github.io/go_docs/example/select/</link><pubDate>Mon, 07 Aug 2023 13:37:10 +0800</pubDate><guid>https://before80.github.io/go_docs/example/select/</guid><description>select 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 package main import</description></item><item><title>Go 发布周期(v20)</title><link>https://before80.github.io/go_docs/docs/GoReleaseCycle20/</link><pubDate>Thu, 18 May 2023 17:26:23 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/GoReleaseCycle20/</guid><description>Go Release Cycle 原文：https://github.com/golang/go/wiki/Go-Release-Cycle Heschi Kreinick edited this page last week · 20 revisions ​ 本维基</description></item><item><title>C? Go? Cgo!</title><link>https://before80.github.io/go_docs/goBlog/2011/CGoCgo/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2011/CGoCgo/</guid><description>C? Go? Cgo! 原文：https://go.dev/blog/cgo Andrew Gerrand 17 March 2011 2011年3月17日 简介 ​ Cgo 允许 Go 包调用 C 代码。通过在 Go 源文件中加入一些</description></item><item><title>timeouts</title><link>https://before80.github.io/go_docs/example/timeouts/</link><pubDate>Mon, 07 Aug 2023 13:37:27 +0800</pubDate><guid>https://before80.github.io/go_docs/example/timeouts/</guid><description/></item><item><title>Go 模块镜像、索引和校验数据库</title><link>https://before80.github.io/go_docs/docs/proxyGolangOrg/</link><pubDate>Thu, 18 May 2023 17:31:23 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/proxyGolangOrg/</guid><description>Go Module Mirror, Index, and Checksum Database - Go 模块镜像、索引和校验数据库 原文：https://proxy.golang.org/ ​ Go团队正在提供以下由谷歌运行的服务：</description></item><item><title>Go 变得更加稳定</title><link>https://before80.github.io/go_docs/goBlog/2011/GoBecomesMoreStable/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2011/GoBecomesMoreStable/</guid><description>Go becomes more stable - Go 变得更加稳定 原文：https://go.dev/blog/stable-releases Andrew Gerrand 16 March 2011 2011年3月16日 ​ Go 项目进</description></item><item><title>non-blocking-channel-operations</title><link>https://before80.github.io/go_docs/example/non-blocking-channel-operations/</link><pubDate>Mon, 07 Aug 2023 13:37:54 +0800</pubDate><guid>https://before80.github.io/go_docs/example/non-blocking-channel-operations/</guid><description>Non-Blocking Channel Operations 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 package main import ( &amp;#34;errors&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func main() { chErr := make(chan error) signal := make(chan bool) select { case err := &amp;lt;-chErr: fmt.Println(&amp;#34;found</description></item><item><title>Go 汇编器速成指南</title><link>https://before80.github.io/go_docs/docs/AQuickGuideToGosAssembler/</link><pubDate>Thu, 18 May 2023 17:31:23 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/AQuickGuideToGosAssembler/</guid><description>A Quick Guide to Go&amp;rsquo;s Assembler - Go汇编器速成指南 原文：https://go.dev/doc/asm A Quick Guide to Go&amp;rsquo;s Assembler - Go汇编器速成指南 This document is a quick outline of the unusual form of assembly language</description></item><item><title>JSON 和 go</title><link>https://before80.github.io/go_docs/goBlog/2011/JSONAndGo/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2011/JSONAndGo/</guid><description>JSON and Go - JSON 和 go 原文：https://go.dev/blog/json Andrew Gerrand 25 January 2011 2011年1月25日 介绍 ​ JSON（JavaScript 对象表</description></item><item><title>ticker</title><link>https://before80.github.io/go_docs/example/tickers/</link><pubDate>Mon, 07 Aug 2023 13:39:34 +0800</pubDate><guid>https://before80.github.io/go_docs/example/tickers/</guid><description>ticker 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func main() { ticker := time.NewTicker(time.Second) defer ticker.Stop() done := make(chan bool) go func() { time.Sleep(10 * time.Second) done &amp;lt;- true }() for { select { case &amp;lt;-done: fmt.Println(&amp;#34;Done!&amp;#34;) return case t := &amp;lt;-ticker.C: fmt.Println(&amp;#34;Current</description></item><item><title>timers</title><link>https://before80.github.io/go_docs/example/timers/</link><pubDate>Mon, 07 Aug 2023 13:39:23 +0800</pubDate><guid>https://before80.github.io/go_docs/example/timers/</guid><description>timer 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func main() { timer1 := time.NewTimer(2 * time.Second) fmt.Println(&amp;#34;Waiting...&amp;#34;) &amp;lt;-timer1.C fmt.Println(&amp;#34;timer1 expired&amp;#34;) _ = time.AfterFunc(2*time.Second, func() { fmt.Println(&amp;#34;timer2 expired&amp;#34;) }) fmt.Println(&amp;#34;Waiting...&amp;#34;) time.Sleep(2010 * time.Millisecond) // 2.01s &amp;gt; 前面的 2s fmt.Println(&amp;#34;End&amp;#34;) }</description></item><item><title>Go 切片：用法和内部机制</title><link>https://before80.github.io/go_docs/goBlog/2011/GoSlicesUsageAndInternals/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2011/GoSlicesUsageAndInternals/</guid><description>Go Slices: usage and internals - Go 切片：用法和内部机制 原文：https://go.dev/blog/slices-intro Andrew Gerrand 5 January 2011 2011年1月5日 简介 ​ G</description></item><item><title>示例</title><link>https://before80.github.io/go_docs/rod/doc/res/examples/</link><pubDate>Thu, 21 Nov 2024 08:11:38 +0800</pubDate><guid>https://before80.github.io/go_docs/rod/doc/res/examples/</guid><description>原文：https://go-rod.github.io/i18n/zh-CN/#/examples 收录该文档时间： 2024-11-21T08:11:38+08:00 示例 ​ 请先阅读 examples_test.go 文件，然</description></item><item><title>事件</title><link>https://before80.github.io/go_docs/rod/doc/using/events/</link><pubDate>Thu, 21 Nov 2024 08:08:12 +0800</pubDate><guid>https://before80.github.io/go_docs/rod/doc/using/events/</guid><description>原文：https://go-rod.github.io/i18n/zh-CN/#/events/README 收录该文档时间： 2024-11-21T08:08:12+08:00 事件 ​ 事件是在</description></item><item><title>异常处理</title><link>https://before80.github.io/go_docs/rod/doc/get-started/error-handling/</link><pubDate>Thu, 21 Nov 2024 08:05:42 +0800</pubDate><guid>https://before80.github.io/go_docs/rod/doc/get-started/error-handling/</guid><description>原文：https://go-rod.github.io/i18n/zh-CN/#/error-handling 收录该文档时间： 2024-11-21T08:08:39+08:00 异常处理 ​ 在</description></item><item><title>launcher</title><link>https://before80.github.io/go_docs/rod/launcher/</link><pubDate>Wed, 20 Nov 2024 18:01:46 +0800</pubDate><guid>https://before80.github.io/go_docs/rod/launcher/</guid><description>原文：https://pkg.go.dev/github.com/go-rod/rod/lib/launcher 收录该文档时间：2024-1</description></item><item><title>diffs</title><link>https://before80.github.io/go_docs/comm/Cpp/advanced/diffs/</link><pubDate>Mon, 19 Aug 2024 09:55:01 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Cpp/advanced/diffs/</guid><description/></item><item><title>diffs</title><link>https://before80.github.io/go_docs/comm/Csharp/advanced/diffs/</link><pubDate>Mon, 19 Aug 2024 09:55:01 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Csharp/advanced/diffs/</guid><description/></item><item><title>diffs</title><link>https://before80.github.io/go_docs/comm/Erlang/advanced/diffs/</link><pubDate>Mon, 19 Aug 2024 09:55:01 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Erlang/advanced/diffs/</guid><description/></item><item><title>diffs</title><link>https://before80.github.io/go_docs/comm/Go/advanced/diffs/</link><pubDate>Mon, 19 Aug 2024 09:55:01 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Go/advanced/diffs/</guid><description/></item><item><title>diffs</title><link>https://before80.github.io/go_docs/comm/Java/advanced/diffs/</link><pubDate>Mon, 19 Aug 2024 09:55:01 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Java/advanced/diffs/</guid><description/></item><item><title>diffs</title><link>https://before80.github.io/go_docs/comm/Js/advanced/diffs/</link><pubDate>Mon, 19 Aug 2024 09:55:01 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Js/advanced/diffs/</guid><description/></item><item><title>diffs</title><link>https://before80.github.io/go_docs/comm/PHP/advanced/diffs/</link><pubDate>Mon, 19 Aug 2024 09:55:01 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/PHP/advanced/diffs/</guid><description/></item><item><title>diffs</title><link>https://before80.github.io/go_docs/comm/Python/advanced/diffs/</link><pubDate>Mon, 19 Aug 2024 09:55:01 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Python/advanced/diffs/</guid><description/></item><item><title>diffs</title><link>https://before80.github.io/go_docs/comm/Ruby/advanced/diffs/</link><pubDate>Mon, 19 Aug 2024 09:55:01 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ruby/advanced/diffs/</guid><description/></item><item><title>diffs</title><link>https://before80.github.io/go_docs/comm/Rust/advanced/diffs/</link><pubDate>Mon, 19 Aug 2024 09:55:01 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Rust/advanced/diffs/</guid><description/></item><item><title>diffs</title><link>https://before80.github.io/go_docs/comm/Ts/advanced/diffs/</link><pubDate>Mon, 19 Aug 2024 09:55:01 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ts/advanced/diffs/</guid><description/></item><item><title>debug</title><link>https://before80.github.io/go_docs/comm/Cpp/middle/debug/</link><pubDate>Mon, 19 Aug 2024 09:51:27 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Cpp/middle/debug/</guid><description/></item><item><title>debug</title><link>https://before80.github.io/go_docs/comm/Csharp/middle/debug/</link><pubDate>Mon, 19 Aug 2024 09:51:27 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Csharp/middle/debug/</guid><description/></item><item><title>debug</title><link>https://before80.github.io/go_docs/comm/Erlang/middle/debug/</link><pubDate>Mon, 19 Aug 2024 09:51:27 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Erlang/middle/debug/</guid><description/></item><item><title>debug</title><link>https://before80.github.io/go_docs/comm/Go/middle/debug/</link><pubDate>Mon, 19 Aug 2024 09:51:27 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Go/middle/debug/</guid><description/></item><item><title>debug</title><link>https://before80.github.io/go_docs/comm/Java/middle/debug/</link><pubDate>Mon, 19 Aug 2024 09:51:27 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Java/middle/debug/</guid><description/></item><item><title>debug</title><link>https://before80.github.io/go_docs/comm/Js/middle/debug/</link><pubDate>Mon, 19 Aug 2024 09:51:27 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Js/middle/debug/</guid><description/></item><item><title>debug</title><link>https://before80.github.io/go_docs/comm/PHP/middle/debug/</link><pubDate>Mon, 19 Aug 2024 09:51:27 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/PHP/middle/debug/</guid><description/></item><item><title>debug</title><link>https://before80.github.io/go_docs/comm/Python/middle/debug/</link><pubDate>Mon, 19 Aug 2024 09:51:27 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Python/middle/debug/</guid><description/></item><item><title>debug</title><link>https://before80.github.io/go_docs/comm/Ruby/middle/debug/</link><pubDate>Mon, 19 Aug 2024 09:51:27 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ruby/middle/debug/</guid><description/></item><item><title>debug</title><link>https://before80.github.io/go_docs/comm/Rust/middle/debug/</link><pubDate>Mon, 19 Aug 2024 09:51:27 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Rust/middle/debug/</guid><description/></item><item><title>debug</title><link>https://before80.github.io/go_docs/comm/Ts/middle/debug/</link><pubDate>Mon, 19 Aug 2024 09:51:27 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ts/middle/debug/</guid><description/></item><item><title>operators</title><link>https://before80.github.io/go_docs/comm/Cpp/basic/operators/</link><pubDate>Mon, 19 Aug 2024 09:31:38 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Cpp/basic/operators/</guid><description/></item><item><title>operators</title><link>https://before80.github.io/go_docs/comm/Csharp/basic/operators/</link><pubDate>Mon, 19 Aug 2024 09:31:38 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Csharp/basic/operators/</guid><description/></item><item><title>operators</title><link>https://before80.github.io/go_docs/comm/Erlang/basic/operators/</link><pubDate>Mon, 19 Aug 2024 09:31:38 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Erlang/basic/operators/</guid><description/></item><item><title>operators</title><link>https://before80.github.io/go_docs/comm/Java/basic/operators/</link><pubDate>Mon, 19 Aug 2024 09:31:38 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Java/basic/operators/</guid><description/></item><item><title>operators</title><link>https://before80.github.io/go_docs/comm/Js/basic/operators/</link><pubDate>Mon, 19 Aug 2024 09:31:38 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Js/basic/operators/</guid><description/></item><item><title>operators</title><link>https://before80.github.io/go_docs/comm/PHP/basic/operators/</link><pubDate>Mon, 19 Aug 2024 09:31:38 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/PHP/basic/operators/</guid><description/></item><item><title>operators</title><link>https://before80.github.io/go_docs/comm/Ruby/basic/operators/</link><pubDate>Mon, 19 Aug 2024 09:31:38 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ruby/basic/operators/</guid><description/></item><item><title>operators</title><link>https://before80.github.io/go_docs/comm/Rust/basic/operators/</link><pubDate>Mon, 19 Aug 2024 09:31:38 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Rust/basic/operators/</guid><description/></item><item><title>operators</title><link>https://before80.github.io/go_docs/comm/Ts/basic/operators/</link><pubDate>Mon, 19 Aug 2024 09:31:38 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ts/basic/operators/</guid><description/></item><item><title>操作符和标点符号</title><link>https://before80.github.io/go_docs/comm/Go/basic/operators/</link><pubDate>Mon, 19 Aug 2024 09:31:38 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Go/basic/operators/</guid><description>操作符和标点符号（48个） 1 2 3 4 5 6 + &amp;amp; += &amp;amp;= &amp;amp;&amp;amp; == != ( ) - | -= |= || &amp;lt; &amp;lt;= [ ] * ^ *= ^= &amp;lt;- &amp;gt; &amp;gt;= { } / &amp;lt;&amp;lt; /= &amp;lt;&amp;lt;= ++ = := , ; % &amp;gt;&amp;gt; %= &amp;gt;&amp;gt;= -- ! ... . : &amp;amp;^ &amp;amp;^= ~ 原码、</description></item><item><title>操作符和标点符号</title><link>https://before80.github.io/go_docs/comm/Python/basic/operators/</link><pubDate>Mon, 19 Aug 2024 09:31:38 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Python/basic/operators/</guid><description>操作符和一些符号（个） 1 2 3 4 5 6 7 8 9 + &amp;amp; += &amp;amp;= == != ( ) - | -= |= &amp;lt; &amp;lt;= [ ] * ~ *= ^= -&amp;gt; &amp;gt; &amp;gt;= { } / ^ /= &amp;lt;&amp;lt;= = , ; // &amp;lt;&amp;lt; //= &amp;gt;&amp;gt;= ... . : % &amp;gt;&amp;gt; %= ** **= @ @= := 算术操</description></item><item><title>运行Go代码</title><link>https://before80.github.io/go_docs/asu/basic/installuninstallrun/run/</link><pubDate>Sat, 13 Jul 2024 14:49:52 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/installuninstallrun/run/</guid><description>要运行的Go代码（demo） 1 2 3 4 5 6 7 package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;Hello World!&amp;#34;) } 在Linux上运行Go代码 CentOS ​ 假设以上代码存放于$HOME/goprjs/de</description></item><item><title>Compress</title><link>https://before80.github.io/go_docs/fiber/API/Middleware/Compress/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/Middleware/Compress/</guid><description>原文： https://docs.gofiber.io/api/middleware/compress Compress Compression middleware for Fiber that will compress the response using gzip, deflate and brotli compression depending on the Accept-Encoding header. ​ 用于 Fiber 的压缩中间件，它将使用 gzip 、 deflate 和 brotli 压缩来压缩响应，具体取决于 Accept-Encoding 标头。 NOTE 注意 The compression middleware refrains from</description></item><item><title>常量</title><link>https://before80.github.io/go_docs/fiber/API/Constants/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/Constants/</guid><description>原文： https://docs.gofiber.io/api/constants 📋 Constants 常量 HTTP methods were copied from net/http. ​ HTTP 方法从 net/http 复制。 1 2 3 4 5 6 7 8 9 10 11 12 const ( MethodGet = &amp;#34;GET&amp;#34; // RFC 7231, 4.3.1 MethodHead = &amp;#34;HEAD&amp;#34; // RFC 7231, 4.3.2 MethodPost = &amp;#34;POST&amp;#34; // RFC 7231, 4.3.3 MethodPut = &amp;#34;PUT&amp;#34; // RFC 7231, 4.3.4 MethodPatch = &amp;#34;PATCH&amp;#34; // RFC</description></item><item><title>错误处理</title><link>https://before80.github.io/go_docs/fiber/Guide/ErrorHandling/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/Guide/ErrorHandling/</guid><description>原文： https://docs.gofiber.io/guide/error-handling 🐛 Error Handling 处理错误 Catching Errors 捕获错误 It’s essential to ensure that Fiber catches all errors that occur while running route handlers and middleware. You must return them to the handler function, where Fiber will catch and process them. ​ 确保 Fiber 捕获在运行路由处理程序和中间</description></item><item><title>worker-pools</title><link>https://before80.github.io/go_docs/example/worker-pools/</link><pubDate>Mon, 07 Aug 2023 13:40:11 +0800</pubDate><guid>https://before80.github.io/go_docs/example/worker-pools/</guid><description>worker pools 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func worker(id int, jobs &amp;lt;-chan int, results chan&amp;lt;- int) { for j := range jobs { fmt.Println(&amp;#34;worker&amp;#34;, id, &amp;#34;started job&amp;#34;, j) time.Sleep(time.Second) fmt.Println(&amp;#34;worker&amp;#34;, id, &amp;#34;finished</description></item><item><title>请求体限制</title><link>https://before80.github.io/go_docs/echo/middleware/body-limit/</link><pubDate>Sun, 09 Jul 2023 21:54:03 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/middleware/body-limit/</guid><description>请求体限制 原文：https://echo.labstack.com/docs/middleware/body-limit ​ 请求体限制中间件设</description></item><item><title>绑定</title><link>https://before80.github.io/go_docs/echo/guide/binding/</link><pubDate>Sun, 09 Jul 2023 21:50:01 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/guide/binding/</guid><description>Binding - 绑定 原文：https://echo.labstack.com/docs/binding ​ 解析请求数据是 Web 应用程序的关键部分。在 Echo 中，这是</description></item><item><title>waitGroup</title><link>https://before80.github.io/go_docs/example/wait-groups/</link><pubDate>Mon, 07 Aug 2023 13:40:25 +0800</pubDate><guid>https://before80.github.io/go_docs/example/wait-groups/</guid><description>waitGroup 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;math/rand&amp;#34; &amp;#34;sync&amp;#34; &amp;#34;time&amp;#34; ) func worker(id int) { fmt.Printf(&amp;#34;Worker %d starting at %s\n&amp;#34;, id, time.Now()) time.Sleep(time.Duration(rand.Intn(3)) * time.Second) fmt.Printf(&amp;#34;Worker %d done at %s\n&amp;#34;, id, time.Now()) } func main() { var wg sync.WaitGroup for</description></item><item><title>rate limiting</title><link>https://before80.github.io/go_docs/example/rate-limiting/</link><pubDate>Mon, 07 Aug 2023 13:40:48 +0800</pubDate><guid>https://before80.github.io/go_docs/example/rate-limiting/</guid><description>rate limiting 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func main() { requests := make(chan int, 5) for i := 1; i &amp;lt;= 5; i++ {</description></item><item><title>atomic counter</title><link>https://before80.github.io/go_docs/example/atomic-counters/</link><pubDate>Mon, 07 Aug 2023 13:41:08 +0800</pubDate><guid>https://before80.github.io/go_docs/example/atomic-counters/</guid><description>atomic counter 原文：https://gobyexample.com/atomic-counters 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26</description></item><item><title>Mutex</title><link>https://before80.github.io/go_docs/example/mutexes/</link><pubDate>Mon, 07 Aug 2023 13:48:45 +0800</pubDate><guid>https://before80.github.io/go_docs/example/mutexes/</guid><description>Mutex 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;sync&amp;#34; ) type Container struct { mu sync.Mutex counters map[string]int } func (c *Container) inc(name string) { c.mu.Lock() defer c.mu.Unlock() c.counters[name]++ } func</description></item><item><title>数据类型</title><link>https://before80.github.io/go_docs/comm/Go/basic/types/</link><pubDate>Mon, 19 Aug 2024 09:33:07 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Go/basic/types/</guid><description>Go的内置数据类型 序号 数据类型 名称 别名 默认值 占用字节数 数据最小值 数据最大值 备注 链接 1 bool 布尔型 false 1 无 无 只有true和false两种值 2 byte 字节型</description></item><item><title>Stateful Goroutines</title><link>https://before80.github.io/go_docs/example/stateful-goroutines/</link><pubDate>Mon, 07 Aug 2023 13:49:05 +0800</pubDate><guid>https://before80.github.io/go_docs/example/stateful-goroutines/</guid><description>Stateful Goroutines 原文：https://gobyexample.com/stateful-goroutines 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22</description></item><item><title>sorting</title><link>https://before80.github.io/go_docs/example/sorting/</link><pubDate>Mon, 07 Aug 2023 13:49:18 +0800</pubDate><guid>https://before80.github.io/go_docs/example/sorting/</guid><description>sorting 原文：https://gobyexample.com/sorting 存在修改 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31</description></item><item><title>sorting by functions</title><link>https://before80.github.io/go_docs/example/sorting-by-functions/</link><pubDate>Mon, 07 Aug 2023 13:49:29 +0800</pubDate><guid>https://before80.github.io/go_docs/example/sorting-by-functions/</guid><description>sorting by functions 原文：https://gobyexample.com/sorting-by-functions 存在修改 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16</description></item><item><title>panic 和 recover</title><link>https://before80.github.io/go_docs/example/panic/</link><pubDate>Mon, 07 Aug 2023 13:49:38 +0800</pubDate><guid>https://before80.github.io/go_docs/example/panic/</guid><description>panic 和 recover 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package main import &amp;#34;fmt&amp;#34; func main() { defer func() { if r := recover(); r != nil { fmt.Printf(&amp;#34;%v,%T\n&amp;#34;, r, r) } }() panic(&amp;#34;a problem&amp;#34;) } // Output: // a problem,string</description></item><item><title>为什么选择 Rod</title><link>https://before80.github.io/go_docs/rod/doc/res/why-rod/</link><pubDate>Thu, 21 Nov 2024 08:12:02 +0800</pubDate><guid>https://before80.github.io/go_docs/rod/doc/res/why-rod/</guid><description>原文：https://go-rod.github.io/i18n/zh-CN/#/why-rod 收录该文档时间： 2024-11-21T08:12:02+08:00 为什么选择 Rod ​ 有许多不错的</description></item><item><title>输入</title><link>https://before80.github.io/go_docs/rod/doc/using/input/</link><pubDate>Thu, 21 Nov 2024 08:08:27 +0800</pubDate><guid>https://before80.github.io/go_docs/rod/doc/using/input/</guid><description>原文：https://go-rod.github.io/i18n/zh-CN/#/input 收录该文档时间： 2024-11-21T08:08:27+08:00 输入 ​ Rod 提供了很多方法来模拟人</description></item><item><title>proto</title><link>https://before80.github.io/go_docs/rod/proto/</link><pubDate>Wed, 20 Nov 2024 18:01:59 +0800</pubDate><guid>https://before80.github.io/go_docs/rod/proto/</guid><description>原文：https://pkg.go.dev/github.com/go-rod/rod/lib/proto 收录该文档时间：2024-11-2</description></item><item><title>concurrency</title><link>https://before80.github.io/go_docs/comm/Cpp/middle/concurrency/</link><pubDate>Mon, 19 Aug 2024 09:58:01 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Cpp/middle/concurrency/</guid><description/></item><item><title>concurrency</title><link>https://before80.github.io/go_docs/comm/Csharp/middle/concurrency/</link><pubDate>Mon, 19 Aug 2024 09:58:01 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Csharp/middle/concurrency/</guid><description/></item><item><title>concurrency</title><link>https://before80.github.io/go_docs/comm/Erlang/middle/concurrency/</link><pubDate>Mon, 19 Aug 2024 09:58:01 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Erlang/middle/concurrency/</guid><description/></item><item><title>concurrency</title><link>https://before80.github.io/go_docs/comm/Go/middle/concurrency/</link><pubDate>Mon, 19 Aug 2024 09:58:01 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Go/middle/concurrency/</guid><description/></item><item><title>concurrency</title><link>https://before80.github.io/go_docs/comm/Java/middle/concurrency/</link><pubDate>Mon, 19 Aug 2024 09:58:01 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Java/middle/concurrency/</guid><description/></item><item><title>concurrency</title><link>https://before80.github.io/go_docs/comm/Js/middle/concurrency/</link><pubDate>Mon, 19 Aug 2024 09:58:01 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Js/middle/concurrency/</guid><description/></item><item><title>concurrency</title><link>https://before80.github.io/go_docs/comm/PHP/middle/concurrency/</link><pubDate>Mon, 19 Aug 2024 09:58:01 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/PHP/middle/concurrency/</guid><description/></item><item><title>concurrency</title><link>https://before80.github.io/go_docs/comm/Python/middle/concurrency/</link><pubDate>Mon, 19 Aug 2024 09:58:01 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Python/middle/concurrency/</guid><description/></item><item><title>concurrency</title><link>https://before80.github.io/go_docs/comm/Ruby/middle/concurrency/</link><pubDate>Mon, 19 Aug 2024 09:58:01 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ruby/middle/concurrency/</guid><description/></item><item><title>concurrency</title><link>https://before80.github.io/go_docs/comm/Rust/middle/concurrency/</link><pubDate>Mon, 19 Aug 2024 09:58:01 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Rust/middle/concurrency/</guid><description/></item><item><title>concurrency</title><link>https://before80.github.io/go_docs/comm/Ts/middle/concurrency/</link><pubDate>Mon, 19 Aug 2024 09:58:01 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ts/middle/concurrency/</guid><description/></item><item><title>funcs</title><link>https://before80.github.io/go_docs/comm/Cpp/basic/funcs/</link><pubDate>Mon, 19 Aug 2024 09:33:07 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Cpp/basic/funcs/</guid><description/></item><item><title>funcs</title><link>https://before80.github.io/go_docs/comm/Csharp/basic/funcs/</link><pubDate>Mon, 19 Aug 2024 09:33:07 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Csharp/basic/funcs/</guid><description/></item><item><title>funcs</title><link>https://before80.github.io/go_docs/comm/Erlang/basic/funcs/</link><pubDate>Mon, 19 Aug 2024 09:33:07 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Erlang/basic/funcs/</guid><description/></item><item><title>funcs</title><link>https://before80.github.io/go_docs/comm/Go/basic/funcs/</link><pubDate>Mon, 19 Aug 2024 09:33:07 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Go/basic/funcs/</guid><description/></item><item><title>funcs</title><link>https://before80.github.io/go_docs/comm/Java/basic/funcs/</link><pubDate>Mon, 19 Aug 2024 09:33:07 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Java/basic/funcs/</guid><description/></item><item><title>funcs</title><link>https://before80.github.io/go_docs/comm/Js/basic/funcs/</link><pubDate>Mon, 19 Aug 2024 09:33:07 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Js/basic/funcs/</guid><description/></item><item><title>funcs</title><link>https://before80.github.io/go_docs/comm/PHP/basic/funcs/</link><pubDate>Mon, 19 Aug 2024 09:33:07 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/PHP/basic/funcs/</guid><description/></item><item><title>funcs</title><link>https://before80.github.io/go_docs/comm/Python/basic/funcs/</link><pubDate>Mon, 19 Aug 2024 09:33:07 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Python/basic/funcs/</guid><description/></item><item><title>funcs</title><link>https://before80.github.io/go_docs/comm/Ruby/basic/funcs/</link><pubDate>Mon, 19 Aug 2024 09:33:07 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ruby/basic/funcs/</guid><description/></item><item><title>funcs</title><link>https://before80.github.io/go_docs/comm/Rust/basic/funcs/</link><pubDate>Mon, 19 Aug 2024 09:33:07 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Rust/basic/funcs/</guid><description/></item><item><title>funcs</title><link>https://before80.github.io/go_docs/comm/Ts/basic/funcs/</link><pubDate>Mon, 19 Aug 2024 09:33:07 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ts/basic/funcs/</guid><description/></item><item><title>表单驱动型测试</title><link>https://before80.github.io/go_docs/asu/basic/testings/tabledriven/</link><pubDate>Sat, 13 Jul 2024 14:23:01 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/testings/tabledriven/</guid><description/></item><item><title>Client</title><link>https://before80.github.io/go_docs/fiber/API/Client/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/Client/</guid><description>原文： https://docs.gofiber.io/api/client 🌎 Client Start request 开始请求 Start a http request with http method and url. 使用 http 方法和 url 启动 http 请求。 Signatures 签名 1 2 3 4 5 6 7 // Client http methods func (c *Client) Get(url string) *Agent func (c *Client) Head(url string) *Agent func (c *Client) Post(url string) *Agent func (c *Client) Put(url</description></item><item><title>CORS</title><link>https://before80.github.io/go_docs/fiber/API/Middleware/CORS/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/Middleware/CORS/</guid><description>原文： https://docs.gofiber.io/api/middleware/cors CORS CORS middleware for Fiber that can be used to enable Cross-Origin Resource Sharing with various options. ​ 可用于启用跨源资源共享（具有各种选项）的 Fiber 的 CORS 中间件。 The middleware conforms to the access-control-allow-origin specification by parsing AllowOrigins. First, the middleware checks if there is a matching allowed origin</description></item><item><title>验证</title><link>https://before80.github.io/go_docs/fiber/Guide/Validation/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/Guide/Validation/</guid><description>原文： https://docs.gofiber.io/guide/validation 🔎 Validation 验证 Validator package Validator 包 Fiber can make great use of the validator package to ensure correct validation of data to store. ​ Fiber 可以充分利用 validator 包来确保要存储的数据的正确验证。 Official validator Github page (Installation, use, examples..). 官方 validator Github 页面（安装</description></item><item><title>string functions</title><link>https://before80.github.io/go_docs/example/string-functions/</link><pubDate>Mon, 07 Aug 2023 13:50:09 +0800</pubDate><guid>https://before80.github.io/go_docs/example/string-functions/</guid><description>string functions 原文：https://gobyexample.com/string-functions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25</description></item><item><title>Casbin Auth</title><link>https://before80.github.io/go_docs/echo/middleware/casbin-auth/</link><pubDate>Sun, 09 Jul 2023 21:54:16 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/middleware/casbin-auth/</guid><description>Casbin Auth 原文：https://echo.labstack.com/docs/middleware/casbin-auth 注意 ​ 这是 Echo 社区的贡献。</description></item><item><title>上下文</title><link>https://before80.github.io/go_docs/echo/guide/context/</link><pubDate>Sun, 09 Jul 2023 21:50:09 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/guide/context/</guid><description>Context - 上下文 原文：https://echo.labstack.com/docs/context ​ echo.Context 表示当前 HTTP 请求的上下文。它保存了请求和响应的</description></item><item><title>string formatting</title><link>https://before80.github.io/go_docs/example/string_formatting/</link><pubDate>Thu, 10 Aug 2023 12:31:45 +0800</pubDate><guid>https://before80.github.io/go_docs/example/string_formatting/</guid><description>string formatting 原文：https://gobyexample.com/string-formatting 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24</description></item><item><title>text templates</title><link>https://before80.github.io/go_docs/example/text-templates/</link><pubDate>Mon, 07 Aug 2023 13:50:27 +0800</pubDate><guid>https://before80.github.io/go_docs/example/text-templates/</guid><description>text templates 原文：https://gobyexample.com/text-templates 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27</description></item><item><title>Regular Expressions</title><link>https://before80.github.io/go_docs/example/regular-expressions/</link><pubDate>Mon, 07 Aug 2023 13:50:46 +0800</pubDate><guid>https://before80.github.io/go_docs/example/regular-expressions/</guid><description>Regular Expressions 原文：https://gobyexample.com/regular-expressions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22</description></item><item><title>JSON</title><link>https://before80.github.io/go_docs/example/json/</link><pubDate>Mon, 07 Aug 2023 13:50:55 +0800</pubDate><guid>https://before80.github.io/go_docs/example/json/</guid><description>JSON 原文：https://gobyexample.com/json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38</description></item><item><title>xml</title><link>https://before80.github.io/go_docs/example/xml/</link><pubDate>Mon, 07 Aug 2023 13:51:02 +0800</pubDate><guid>https://before80.github.io/go_docs/example/xml/</guid><description>xml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69</description></item><item><title>time</title><link>https://before80.github.io/go_docs/example/time/</link><pubDate>Mon, 07 Aug 2023 13:51:08 +0800</pubDate><guid>https://before80.github.io/go_docs/example/time/</guid><description>time 原文：https://gobyexample.com/time 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38</description></item><item><title>epoch</title><link>https://before80.github.io/go_docs/example/epoch/</link><pubDate>Mon, 07 Aug 2023 13:51:16 +0800</pubDate><guid>https://before80.github.io/go_docs/example/epoch/</guid><description>epoch 原文：https://gobyexample.com/epoch 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func main() { now := time.Now() fmt.Println(now) // 2023-08-10 16:46:30.7978556 +0800</description></item><item><title>Time Formatting / Parsing</title><link>https://before80.github.io/go_docs/example/time-formatting-parsing/</link><pubDate>Mon, 07 Aug 2023 13:51:32 +0800</pubDate><guid>https://before80.github.io/go_docs/example/time-formatting-parsing/</guid><description>Time Formatting / Parsing 原文：https://gobyexample.com/time-formatting-parsing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16</description></item><item><title>random number</title><link>https://before80.github.io/go_docs/example/random-numbers/</link><pubDate>Mon, 07 Aug 2023 13:51:50 +0800</pubDate><guid>https://before80.github.io/go_docs/example/random-numbers/</guid><description>random number 原文：https://gobyexample.com/random-numbers 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27</description></item><item><title>兼容性</title><link>https://before80.github.io/go_docs/rod/doc/res/compatibility/</link><pubDate>Thu, 21 Nov 2024 08:12:24 +0800</pubDate><guid>https://before80.github.io/go_docs/rod/doc/res/compatibility/</guid><description>原文：https://go-rod.github.io/i18n/zh-CN/#/compatibility 收录该文档时间： 2024-11-21T08:12:24+08:00 兼容性 操作系统</description></item><item><title>模拟 / Emulation</title><link>https://before80.github.io/go_docs/rod/doc/using/emulation/</link><pubDate>Thu, 21 Nov 2024 08:08:39 +0800</pubDate><guid>https://before80.github.io/go_docs/rod/doc/using/emulation/</guid><description>原文：https://go-rod.github.io/i18n/zh-CN/#/emulation 收录该文档时间： 2024-11-21T08:08:39+08:00 模拟 / Emulation ​ Rod 提供了多种</description></item><item><title>cdp</title><link>https://before80.github.io/go_docs/rod/cdp/</link><pubDate>Wed, 20 Nov 2024 18:02:07 +0800</pubDate><guid>https://before80.github.io/go_docs/rod/cdp/</guid><description>原文：https://pkg.go.dev/github.com/go-rod/rod/lib/cdp 收录该文档时间：2024-11-20T</description></item><item><title>async</title><link>https://before80.github.io/go_docs/comm/Cpp/middle/async/</link><pubDate>Mon, 19 Aug 2024 09:51:57 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Cpp/middle/async/</guid><description/></item><item><title>async</title><link>https://before80.github.io/go_docs/comm/Csharp/middle/async/</link><pubDate>Mon, 19 Aug 2024 09:51:57 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Csharp/middle/async/</guid><description/></item><item><title>async</title><link>https://before80.github.io/go_docs/comm/Erlang/middle/async/</link><pubDate>Mon, 19 Aug 2024 09:51:57 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Erlang/middle/async/</guid><description/></item><item><title>async</title><link>https://before80.github.io/go_docs/comm/Go/middle/async/</link><pubDate>Mon, 19 Aug 2024 09:51:57 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Go/middle/async/</guid><description/></item><item><title>async</title><link>https://before80.github.io/go_docs/comm/Java/middle/async/</link><pubDate>Mon, 19 Aug 2024 09:51:57 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Java/middle/async/</guid><description/></item><item><title>async</title><link>https://before80.github.io/go_docs/comm/Js/middle/async/</link><pubDate>Mon, 19 Aug 2024 09:51:57 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Js/middle/async/</guid><description/></item><item><title>async</title><link>https://before80.github.io/go_docs/comm/PHP/middle/async/</link><pubDate>Mon, 19 Aug 2024 09:51:57 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/PHP/middle/async/</guid><description/></item><item><title>async</title><link>https://before80.github.io/go_docs/comm/Python/middle/async/</link><pubDate>Mon, 19 Aug 2024 09:51:57 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Python/middle/async/</guid><description/></item><item><title>async</title><link>https://before80.github.io/go_docs/comm/Ruby/middle/async/</link><pubDate>Mon, 19 Aug 2024 09:51:57 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ruby/middle/async/</guid><description/></item><item><title>async</title><link>https://before80.github.io/go_docs/comm/Rust/middle/async/</link><pubDate>Mon, 19 Aug 2024 09:51:57 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Rust/middle/async/</guid><description/></item><item><title>async</title><link>https://before80.github.io/go_docs/comm/Ts/middle/async/</link><pubDate>Mon, 19 Aug 2024 09:51:57 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ts/middle/async/</guid><description/></item><item><title>declarescope</title><link>https://before80.github.io/go_docs/comm/Cpp/basic/declarescope/</link><pubDate>Mon, 19 Aug 2024 09:33:46 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Cpp/basic/declarescope/</guid><description/></item><item><title>declarescope</title><link>https://before80.github.io/go_docs/comm/Csharp/basic/declarescope/</link><pubDate>Mon, 19 Aug 2024 09:33:46 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Csharp/basic/declarescope/</guid><description/></item><item><title>declarescope</title><link>https://before80.github.io/go_docs/comm/Erlang/basic/declarescope/</link><pubDate>Mon, 19 Aug 2024 09:33:46 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Erlang/basic/declarescope/</guid><description/></item><item><title>declarescope</title><link>https://before80.github.io/go_docs/comm/Go/basic/declarescope/</link><pubDate>Mon, 19 Aug 2024 09:33:46 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Go/basic/declarescope/</guid><description/></item><item><title>declarescope</title><link>https://before80.github.io/go_docs/comm/Java/basic/declarescope/</link><pubDate>Mon, 19 Aug 2024 09:33:46 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Java/basic/declarescope/</guid><description/></item><item><title>declarescope</title><link>https://before80.github.io/go_docs/comm/Js/basic/declarescope/</link><pubDate>Mon, 19 Aug 2024 09:33:46 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Js/basic/declarescope/</guid><description/></item><item><title>declarescope</title><link>https://before80.github.io/go_docs/comm/PHP/basic/declarescope/</link><pubDate>Mon, 19 Aug 2024 09:33:46 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/PHP/basic/declarescope/</guid><description/></item><item><title>declarescope</title><link>https://before80.github.io/go_docs/comm/Python/basic/declarescope/</link><pubDate>Mon, 19 Aug 2024 09:33:46 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Python/basic/declarescope/</guid><description/></item><item><title>declarescope</title><link>https://before80.github.io/go_docs/comm/Ruby/basic/declarescope/</link><pubDate>Mon, 19 Aug 2024 09:33:46 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ruby/basic/declarescope/</guid><description/></item><item><title>declarescope</title><link>https://before80.github.io/go_docs/comm/Rust/basic/declarescope/</link><pubDate>Mon, 19 Aug 2024 09:33:46 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Rust/basic/declarescope/</guid><description/></item><item><title>declarescope</title><link>https://before80.github.io/go_docs/comm/Ts/basic/declarescope/</link><pubDate>Mon, 19 Aug 2024 09:33:46 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ts/basic/declarescope/</guid><description/></item><item><title>示例测试</title><link>https://before80.github.io/go_docs/asu/basic/testings/example/</link><pubDate>Sat, 13 Jul 2024 14:22:31 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/testings/example/</guid><description/></item><item><title>CSRF</title><link>https://before80.github.io/go_docs/fiber/API/Middleware/CSRF/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/Middleware/CSRF/</guid><description>原文： https://docs.gofiber.io/api/middleware/csrf CSRF The CSRF middleware for Fiber provides protection against Cross-Site Request Forgery (CSRF) attacks. Requests made using methods other than those defined as &amp;lsquo;safe&amp;rsquo; by RFC9110#section-9.2.1 (GET, HEAD, OPTIONS, and TRACE) are validated using tokens. If a potential attack is detected, the middleware will return a default 403 Forbidden error. ​ Fiber 的 CSRF 中间件提供针对跨站点请求</description></item><item><title>Hooks</title><link>https://before80.github.io/go_docs/fiber/Guide/Hooks/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/Guide/Hooks/</guid><description>原文： https://docs.gofiber.io/guide/hooks 🎣 Hooks With Fiber v2.30.0, you can execute custom user functions when to run some methods. Here is a list of this hooks: ​ 在 Fiber v2.30.0 中，您可以在运行某些方法时执行自定义用户函数。以下是这些钩子的列表： OnRoute OnName OnGroup OnGroupName OnListen</description></item><item><title>Log</title><link>https://before80.github.io/go_docs/fiber/API/Log/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/Log/</guid><description>原文： https://docs.gofiber.io/api/log 📃 Log We can use logs to observe program behavior, diagnose problems, or configure corresponding alarms. And defining a well structured log can improve search efficiency and facilitate handling of problems. ​ 我们可以使用日志来观察程序行为、诊断问题或配置相应的告警。并且定义一</description></item><item><title>number-parsing</title><link>https://before80.github.io/go_docs/example/number-parsing/</link><pubDate>Mon, 07 Aug 2023 13:52:11 +0800</pubDate><guid>https://before80.github.io/go_docs/example/number-parsing/</guid><description>number parsing 原文：https://gobyexample.com/number-parsing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27</description></item><item><title>cors</title><link>https://before80.github.io/go_docs/echo/middleware/cors/</link><pubDate>Sun, 09 Jul 2023 21:54:25 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/middleware/cors/</guid><description>CORS - 跨域资源共享 Cross Origin Resources Sharing 原文：https://echo.labstack.com/docs/middleware/cors ​ CORS 中间件实现了 CORS</description></item><item><title>Cookies</title><link>https://before80.github.io/go_docs/echo/guide/cookies/</link><pubDate>Sun, 09 Jul 2023 21:50:18 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/guide/cookies/</guid><description>Cookies 原文：https://echo.labstack.com/docs/cookies ​ Cookie（Cookie）是从网站服务器发送并存储在</description></item><item><title>url-parsing</title><link>https://before80.github.io/go_docs/example/url-parsing/</link><pubDate>Mon, 07 Aug 2023 13:52:21 +0800</pubDate><guid>https://before80.github.io/go_docs/example/url-parsing/</guid><description>url parsing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;net&amp;#34; &amp;#34;net/url&amp;#34; ) func main() { s := &amp;#34;postgres://user:pass@host.com:5432/path?k=v#f&amp;#34; u, err := url.Parse(s) if err != nil { panic(err) } fmt.Println(u.Scheme) // postgres fmt.Println(u.User) // user:pass fmt.Println(u.User.Username())</description></item><item><title>sha256-hashes</title><link>https://before80.github.io/go_docs/example/sha256-hashes/</link><pubDate>Mon, 07 Aug 2023 13:52:41 +0800</pubDate><guid>https://before80.github.io/go_docs/example/sha256-hashes/</guid><description>sha256 hashes 原文：https://gobyexample.com/sha256-hashes 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package main import ( &amp;#34;crypto/sha256&amp;#34; &amp;#34;fmt&amp;#34; ) func main()</description></item><item><title>base64 encoding</title><link>https://before80.github.io/go_docs/example/base64-encoding/</link><pubDate>Mon, 07 Aug 2023 13:53:05 +0800</pubDate><guid>https://before80.github.io/go_docs/example/base64-encoding/</guid><description>base64 encoding 原文：https://gobyexample.com/base64-encoding 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import (</description></item><item><title>reading-files</title><link>https://before80.github.io/go_docs/example/reading-files/</link><pubDate>Mon, 07 Aug 2023 13:53:25 +0800</pubDate><guid>https://before80.github.io/go_docs/example/reading-files/</guid><description>reading files 原文：https://gobyexample.com/reading-files 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28</description></item><item><title>writing-files</title><link>https://before80.github.io/go_docs/example/writing-files/</link><pubDate>Mon, 07 Aug 2023 13:53:44 +0800</pubDate><guid>https://before80.github.io/go_docs/example/writing-files/</guid><description>writing files 原文：https://gobyexample.com/writing-files 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28</description></item><item><title>line-filters</title><link>https://before80.github.io/go_docs/example/line-filters/</link><pubDate>Mon, 07 Aug 2023 13:54:05 +0800</pubDate><guid>https://before80.github.io/go_docs/example/line-filters/</guid><description>line filters 原文：https://gobyexample.com/line-filters 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( &amp;#34;bufio&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34;</description></item><item><title>file paths</title><link>https://before80.github.io/go_docs/example/file-paths/</link><pubDate>Mon, 07 Aug 2023 13:54:22 +0800</pubDate><guid>https://before80.github.io/go_docs/example/file-paths/</guid><description>file paths 原文：https://gobyexample.com/file-paths 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31</description></item><item><title>Directories</title><link>https://before80.github.io/go_docs/example/directories/</link><pubDate>Mon, 07 Aug 2023 13:54:47 +0800</pubDate><guid>https://before80.github.io/go_docs/example/directories/</guid><description>Directories 原文：https://gobyexample.com/directories 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31</description></item><item><title>temporary files and directories</title><link>https://before80.github.io/go_docs/example/temporary-files-and-directories/</link><pubDate>Mon, 07 Aug 2023 13:55:19 +0800</pubDate><guid>https://before80.github.io/go_docs/example/temporary-files-and-directories/</guid><description>temporary files and directories 原文：https://gobyexample.com/temporary-files-and-directories 1 2 3 4 5 6 7 8</description></item><item><title>理解 Context</title><link>https://before80.github.io/go_docs/rod/doc/res/understand-context/</link><pubDate>Thu, 21 Nov 2024 08:12:38 +0800</pubDate><guid>https://before80.github.io/go_docs/rod/doc/res/understand-context/</guid><description>原文：https://go-rod.github.io/i18n/zh-CN/#/understand-context 收录该文档时间： 2024-11-21T08:12:38+08:00 理解</description></item><item><title>network</title><link>https://before80.github.io/go_docs/rod/doc/using/network/</link><pubDate>Thu, 21 Nov 2024 08:08:52 +0800</pubDate><guid>https://before80.github.io/go_docs/rod/doc/using/network/</guid><description>原文：https://go-rod.github.io/i18n/zh-CN/#/network/README 收录该文档时间： 2024-11-21T08:08:52+08:00 网络 代理 ​ 您</description></item><item><title>input</title><link>https://before80.github.io/go_docs/rod/input/</link><pubDate>Wed, 20 Nov 2024 18:02:07 +0800</pubDate><guid>https://before80.github.io/go_docs/rod/input/</guid><description>原文：https://pkg.go.dev/github.com/go-rod/rod/lib/input 收录该文档时间：2024-11-2</description></item><item><title>reflect</title><link>https://before80.github.io/go_docs/comm/Cpp/middle/reflect/</link><pubDate>Mon, 19 Aug 2024 09:52:19 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Cpp/middle/reflect/</guid><description/></item><item><title>reflect</title><link>https://before80.github.io/go_docs/comm/Csharp/middle/reflect/</link><pubDate>Mon, 19 Aug 2024 09:52:19 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Csharp/middle/reflect/</guid><description/></item><item><title>reflect</title><link>https://before80.github.io/go_docs/comm/Erlang/middle/reflect/</link><pubDate>Mon, 19 Aug 2024 09:52:19 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Erlang/middle/reflect/</guid><description/></item><item><title>reflect</title><link>https://before80.github.io/go_docs/comm/Go/middle/reflect/</link><pubDate>Mon, 19 Aug 2024 09:52:19 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Go/middle/reflect/</guid><description/></item><item><title>reflect</title><link>https://before80.github.io/go_docs/comm/Java/middle/reflect/</link><pubDate>Mon, 19 Aug 2024 09:52:19 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Java/middle/reflect/</guid><description/></item><item><title>reflect</title><link>https://before80.github.io/go_docs/comm/Js/middle/reflect/</link><pubDate>Mon, 19 Aug 2024 09:52:19 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Js/middle/reflect/</guid><description/></item><item><title>reflect</title><link>https://before80.github.io/go_docs/comm/PHP/middle/reflect/</link><pubDate>Mon, 19 Aug 2024 09:52:19 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/PHP/middle/reflect/</guid><description/></item><item><title>reflect</title><link>https://before80.github.io/go_docs/comm/Python/middle/reflect/</link><pubDate>Mon, 19 Aug 2024 09:52:19 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Python/middle/reflect/</guid><description/></item><item><title>reflect</title><link>https://before80.github.io/go_docs/comm/Ruby/middle/reflect/</link><pubDate>Mon, 19 Aug 2024 09:52:19 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ruby/middle/reflect/</guid><description/></item><item><title>reflect</title><link>https://before80.github.io/go_docs/comm/Rust/middle/reflect/</link><pubDate>Mon, 19 Aug 2024 09:52:19 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Rust/middle/reflect/</guid><description/></item><item><title>reflect</title><link>https://before80.github.io/go_docs/comm/Ts/middle/reflect/</link><pubDate>Mon, 19 Aug 2024 09:52:19 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ts/middle/reflect/</guid><description/></item><item><title>ctrlstatements</title><link>https://before80.github.io/go_docs/comm/Cpp/basic/ctrlstatements/</link><pubDate>Mon, 19 Aug 2024 09:34:27 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Cpp/basic/ctrlstatements/</guid><description/></item><item><title>ctrlstatements</title><link>https://before80.github.io/go_docs/comm/Csharp/basic/ctrlstatements/</link><pubDate>Mon, 19 Aug 2024 09:34:27 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Csharp/basic/ctrlstatements/</guid><description/></item><item><title>ctrlstatements</title><link>https://before80.github.io/go_docs/comm/Erlang/basic/ctrlstatements/</link><pubDate>Mon, 19 Aug 2024 09:34:27 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Erlang/basic/ctrlstatements/</guid><description/></item><item><title>ctrlstatements</title><link>https://before80.github.io/go_docs/comm/Go/basic/ctrlstatements/</link><pubDate>Mon, 19 Aug 2024 09:34:27 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Go/basic/ctrlstatements/</guid><description/></item><item><title>ctrlstatements</title><link>https://before80.github.io/go_docs/comm/Java/basic/ctrlstatements/</link><pubDate>Mon, 19 Aug 2024 09:34:27 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Java/basic/ctrlstatements/</guid><description/></item><item><title>ctrlstatements</title><link>https://before80.github.io/go_docs/comm/Js/basic/ctrlstatements/</link><pubDate>Mon, 19 Aug 2024 09:34:27 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Js/basic/ctrlstatements/</guid><description/></item><item><title>ctrlstatements</title><link>https://before80.github.io/go_docs/comm/PHP/basic/ctrlstatements/</link><pubDate>Mon, 19 Aug 2024 09:34:27 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/PHP/basic/ctrlstatements/</guid><description/></item><item><title>ctrlstatements</title><link>https://before80.github.io/go_docs/comm/Python/basic/ctrlstatements/</link><pubDate>Mon, 19 Aug 2024 09:34:27 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Python/basic/ctrlstatements/</guid><description/></item><item><title>ctrlstatements</title><link>https://before80.github.io/go_docs/comm/Ruby/basic/ctrlstatements/</link><pubDate>Mon, 19 Aug 2024 09:34:27 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ruby/basic/ctrlstatements/</guid><description/></item><item><title>ctrlstatements</title><link>https://before80.github.io/go_docs/comm/Rust/basic/ctrlstatements/</link><pubDate>Mon, 19 Aug 2024 09:34:27 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Rust/basic/ctrlstatements/</guid><description/></item><item><title>ctrlstatements</title><link>https://before80.github.io/go_docs/comm/Ts/basic/ctrlstatements/</link><pubDate>Mon, 19 Aug 2024 09:34:27 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ts/basic/ctrlstatements/</guid><description/></item><item><title>EarlyData</title><link>https://before80.github.io/go_docs/fiber/API/Middleware/EarlyData/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/Middleware/EarlyData/</guid><description>原文： https://docs.gofiber.io/api/middleware/earlydata EarlyData The Early Data middleware for Fiber adds support for TLS 1.3&amp;rsquo;s early data (&amp;ldquo;0-RTT&amp;rdquo;) feature. Citing RFC 8446, when a client and server share a PSK, TLS 1.3 allows clients to send data on the first flight (&amp;ldquo;early data&amp;rdquo;) to speed up the request, effectively reducing the regular 1-RTT request to a 0-RTT request. ​ Fiber 的 Early Data 中间件增加了</description></item><item><title>让 Fiber 更快</title><link>https://before80.github.io/go_docs/fiber/Guide/MakeFiberFaster/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/Guide/MakeFiberFaster/</guid><description>原文： https://docs.gofiber.io/guide/faster-fiber ⚡ Make Fiber Faster 让 Fiber 更快 Custom JSON Encoder/Decoder 自定义 JSON 编码器/解码器 Since Fiber v2.32.0, we use encoding/json as default json library due to stability and producibility. However, the standard library is a bit slow compared to 3rd party libraries. If you&amp;rsquo;re not happy with the performance of encoding/json, we recommend you to use these libraries:</description></item><item><title>embed-directive</title><link>https://before80.github.io/go_docs/example/embed-directive/</link><pubDate>Mon, 07 Aug 2023 13:55:49 +0800</pubDate><guid>https://before80.github.io/go_docs/example/embed-directive/</guid><description>Embed Directive 原文：https://gobyexample.com/embed-directive 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26</description></item><item><title>CSRF</title><link>https://before80.github.io/go_docs/echo/middleware/csrf/</link><pubDate>Sun, 09 Jul 2023 21:54:32 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/middleware/csrf/</guid><description>CSRF - 跨站请求伪造 原文：https://echo.labstack.com/docs/middleware/csrf ​ 跨站请求伪造（Cross</description></item><item><title>错误处理</title><link>https://before80.github.io/go_docs/echo/guide/error-handing/</link><pubDate>Sun, 09 Jul 2023 21:50:29 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/guide/error-handing/</guid><description>Error Handling - 错误处理 原文：https://echo.labstack.com/docs/error-handling ​ Echo 提倡通过从中间件和处理程序</description></item><item><title>testing-and-benchmarking</title><link>https://before80.github.io/go_docs/example/testing-and-benchmarking/</link><pubDate>Mon, 07 Aug 2023 13:56:08 +0800</pubDate><guid>https://before80.github.io/go_docs/example/testing-and-benchmarking/</guid><description>testing and benchmarking 原文：https://gobyexample.com/testing-and-benchmarking 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16</description></item><item><title>command-line-arguments</title><link>https://before80.github.io/go_docs/example/command-line-arguments/</link><pubDate>Mon, 07 Aug 2023 13:56:28 +0800</pubDate><guid>https://before80.github.io/go_docs/example/command-line-arguments/</guid><description>Command-Line Arguments 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; ) func main() { argsWithProg := os.Args argsWithoutProg := os.Args[1:] arg := os.Args[3] fmt.Printf(&amp;#34;%#v,%T\n&amp;#34;, argsWithProg, argsWithProg) fmt.Printf(&amp;#34;%v,%T\n&amp;#34;, argsWithoutProg, argsWithoutProg) fmt.Printf(&amp;#34;%v,%T\n&amp;#34;, arg, arg) } 1 2 3 4 PS D:\Dev\Go\byExample\command_line_arguments&amp;gt; .\main.exe a b c d []string{&amp;#34;D:\\Dev\\Go\\byExample\\command_line_arguments\\main.exe&amp;#34;, &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;, &amp;#34;d&amp;#34;},[]string [a b c d],[]string c,string</description></item><item><title>command-line-flags</title><link>https://before80.github.io/go_docs/example/command-line-flags/</link><pubDate>Mon, 07 Aug 2023 13:56:36 +0800</pubDate><guid>https://before80.github.io/go_docs/example/command-line-flags/</guid><description>command-line flags 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 package main import ( &amp;#34;flag&amp;#34; &amp;#34;fmt&amp;#34; ) func main() { wordPtr := flag.String(&amp;#34;word&amp;#34;, &amp;#34;foo&amp;#34;, &amp;#34;a string&amp;#34;) numbPtr := flag.Int(&amp;#34;numb&amp;#34;, 42, &amp;#34;an int&amp;#34;) forkPtr := flag.Bool(&amp;#34;fork&amp;#34;, false, &amp;#34;a bool&amp;#34;) var svar string flag.StringVar(&amp;amp;svar, &amp;#34;svar&amp;#34;, &amp;#34;bar&amp;#34;, &amp;#34;a string var&amp;#34;) flag.Parse() fmt.Println(&amp;#34;word:&amp;#34;, *wordPtr) fmt.Println(&amp;#34;numb:&amp;#34;, *numbPtr) fmt.Println(&amp;#34;fork:&amp;#34;, *forkPtr)</description></item><item><title>Command-Line Subcommands</title><link>https://before80.github.io/go_docs/example/command-line-subcommands/</link><pubDate>Mon, 07 Aug 2023 13:56:50 +0800</pubDate><guid>https://before80.github.io/go_docs/example/command-line-subcommands/</guid><description>Command-Line Subcommands 原文：https://gobyexample.com/command-line-subcommands 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17</description></item><item><title>Environment Variables</title><link>https://before80.github.io/go_docs/example/environment-variables/</link><pubDate>Mon, 07 Aug 2023 13:57:13 +0800</pubDate><guid>https://before80.github.io/go_docs/example/environment-variables/</guid><description>Environment Variables 原文：https://gobyexample.com/environment-variables 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20</description></item><item><title>http-client</title><link>https://before80.github.io/go_docs/example/http-client/</link><pubDate>Mon, 07 Aug 2023 13:57:24 +0800</pubDate><guid>https://before80.github.io/go_docs/example/http-client/</guid><description>HTTP Client 原文：https://gobyexample.com/http-client 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package main import (</description></item><item><title>HTTP Server</title><link>https://before80.github.io/go_docs/example/http-server/</link><pubDate>Mon, 07 Aug 2023 13:57:30 +0800</pubDate><guid>https://before80.github.io/go_docs/example/http-server/</guid><description>HTTP Server 原文：https://gobyexample.com/http-server 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // Note: //</description></item><item><title>context</title><link>https://before80.github.io/go_docs/example/context/</link><pubDate>Sun, 13 Aug 2023 12:57:27 +0800</pubDate><guid>https://before80.github.io/go_docs/example/context/</guid><description>context 原文：https://gobyexample.com/context 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 // Note: // This code</description></item><item><title>spawning-processes</title><link>https://before80.github.io/go_docs/example/spawning-processes/</link><pubDate>Mon, 07 Aug 2023 13:58:52 +0800</pubDate><guid>https://before80.github.io/go_docs/example/spawning-processes/</guid><description>spawning processes 原文：https://gobyexample.com/spawning-processes 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23</description></item><item><title>聊天室</title><link>https://before80.github.io/go_docs/rod/doc/res/chat-room/</link><pubDate>Thu, 21 Nov 2024 08:17:50 +0800</pubDate><guid>https://before80.github.io/go_docs/rod/doc/res/chat-room/</guid><description>原文：https://go-rod.github.io/i18n/zh-CN/#/chat-room 收录该文档时间： 2024-11-21T08:17:50+08:00 聊天室 ​ 我们使用 discord: 加入</description></item><item><title>页面资源</title><link>https://before80.github.io/go_docs/rod/doc/using/page-resources/</link><pubDate>Thu, 21 Nov 2024 08:09:06 +0800</pubDate><guid>https://before80.github.io/go_docs/rod/doc/using/page-resources/</guid><description>原文：https://go-rod.github.io/i18n/zh-CN/#/page-resources/README 收录该文档时间：</description></item><item><title>devices</title><link>https://before80.github.io/go_docs/rod/devices/</link><pubDate>Wed, 20 Nov 2024 18:02:07 +0800</pubDate><guid>https://before80.github.io/go_docs/rod/devices/</guid><description>原文：https://pkg.go.dev/github.com/go-rod/rod/lib/devices 收录该文档时间：2024-11</description></item><item><title>gc</title><link>https://before80.github.io/go_docs/comm/Cpp/middle/gc/</link><pubDate>Mon, 19 Aug 2024 09:52:27 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Cpp/middle/gc/</guid><description/></item><item><title>gc</title><link>https://before80.github.io/go_docs/comm/Csharp/middle/gc/</link><pubDate>Mon, 19 Aug 2024 09:52:27 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Csharp/middle/gc/</guid><description/></item><item><title>gc</title><link>https://before80.github.io/go_docs/comm/Erlang/middle/gc/</link><pubDate>Mon, 19 Aug 2024 09:52:27 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Erlang/middle/gc/</guid><description/></item><item><title>gc</title><link>https://before80.github.io/go_docs/comm/Go/middle/gc/</link><pubDate>Mon, 19 Aug 2024 09:52:27 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Go/middle/gc/</guid><description/></item><item><title>gc</title><link>https://before80.github.io/go_docs/comm/Java/middle/gc/</link><pubDate>Mon, 19 Aug 2024 09:52:27 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Java/middle/gc/</guid><description/></item><item><title>gc</title><link>https://before80.github.io/go_docs/comm/Js/middle/gc/</link><pubDate>Mon, 19 Aug 2024 09:52:27 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Js/middle/gc/</guid><description/></item><item><title>gc</title><link>https://before80.github.io/go_docs/comm/PHP/middle/gc/</link><pubDate>Mon, 19 Aug 2024 09:52:27 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/PHP/middle/gc/</guid><description/></item><item><title>gc</title><link>https://before80.github.io/go_docs/comm/Python/middle/gc/</link><pubDate>Mon, 19 Aug 2024 09:52:27 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Python/middle/gc/</guid><description/></item><item><title>gc</title><link>https://before80.github.io/go_docs/comm/Ruby/middle/gc/</link><pubDate>Mon, 19 Aug 2024 09:52:27 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ruby/middle/gc/</guid><description/></item><item><title>gc</title><link>https://before80.github.io/go_docs/comm/Rust/middle/gc/</link><pubDate>Mon, 19 Aug 2024 09:52:27 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Rust/middle/gc/</guid><description/></item><item><title>gc</title><link>https://before80.github.io/go_docs/comm/Ts/middle/gc/</link><pubDate>Mon, 19 Aug 2024 09:52:27 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ts/middle/gc/</guid><description/></item><item><title>strs</title><link>https://before80.github.io/go_docs/comm/Cpp/basic/strs/</link><pubDate>Mon, 19 Aug 2024 09:35:19 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Cpp/basic/strs/</guid><description/></item><item><title>strs</title><link>https://before80.github.io/go_docs/comm/Csharp/basic/strs/</link><pubDate>Mon, 19 Aug 2024 09:35:19 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Csharp/basic/strs/</guid><description/></item><item><title>strs</title><link>https://before80.github.io/go_docs/comm/Erlang/basic/strs/</link><pubDate>Mon, 19 Aug 2024 09:35:19 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Erlang/basic/strs/</guid><description/></item><item><title>strs</title><link>https://before80.github.io/go_docs/comm/Go/basic/strs/</link><pubDate>Mon, 19 Aug 2024 09:35:19 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Go/basic/strs/</guid><description/></item><item><title>strs</title><link>https://before80.github.io/go_docs/comm/Java/basic/strs/</link><pubDate>Mon, 19 Aug 2024 09:35:19 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Java/basic/strs/</guid><description/></item><item><title>strs</title><link>https://before80.github.io/go_docs/comm/Js/basic/strs/</link><pubDate>Mon, 19 Aug 2024 09:35:19 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Js/basic/strs/</guid><description/></item><item><title>strs</title><link>https://before80.github.io/go_docs/comm/PHP/basic/strs/</link><pubDate>Mon, 19 Aug 2024 09:35:19 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/PHP/basic/strs/</guid><description/></item><item><title>strs</title><link>https://before80.github.io/go_docs/comm/Python/basic/strs/</link><pubDate>Mon, 19 Aug 2024 09:35:19 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Python/basic/strs/</guid><description/></item><item><title>strs</title><link>https://before80.github.io/go_docs/comm/Ruby/basic/strs/</link><pubDate>Mon, 19 Aug 2024 09:35:19 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ruby/basic/strs/</guid><description/></item><item><title>strs</title><link>https://before80.github.io/go_docs/comm/Rust/basic/strs/</link><pubDate>Mon, 19 Aug 2024 09:35:19 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Rust/basic/strs/</guid><description/></item><item><title>strs</title><link>https://before80.github.io/go_docs/comm/Ts/basic/strs/</link><pubDate>Mon, 19 Aug 2024 09:35:19 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ts/basic/strs/</guid><description/></item><item><title>Encrypt Cookie</title><link>https://before80.github.io/go_docs/fiber/API/Middleware/EncryptCookie/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/Middleware/EncryptCookie/</guid><description>原文： https://docs.gofiber.io/api/middleware/encryptcookie Encrypt Cookie 加密 Cookie Encrypt Cookie is a middleware for Fiber that secures your cookie values through encryption. ​ Encrypt Cookie 是一个中间件，用于通过加密保护您的 cookie 值。 NOTE 注意 This middleware encrypts cookie values and not the cookie names. ​ 此中间件加密 cookie 值，而</description></item><item><title>execing-processes</title><link>https://before80.github.io/go_docs/example/execing-processes/</link><pubDate>Mon, 07 Aug 2023 13:59:15 +0800</pubDate><guid>https://before80.github.io/go_docs/example/execing-processes/</guid><description>Exec&amp;rsquo;ing processes 原文：https://gobyexample.com/execing-processes 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24</description></item><item><title>解压缩</title><link>https://before80.github.io/go_docs/echo/middleware/decompress/</link><pubDate>Sun, 09 Jul 2023 21:54:44 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/middleware/decompress/</guid><description>Decompress - 解压缩 原文：https://echo.labstack.com/docs/middleware/decompress ​ 解压缩中间件会在C</description></item><item><title>启动服务器</title><link>https://before80.github.io/go_docs/echo/guide/start-server/</link><pubDate>Sun, 09 Jul 2023 21:50:57 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/guide/start-server/</guid><description>Start Server - 启动服务器 原文：https://echo.labstack.com/docs/start-server ​ Echo 提供以下方便的方法来启动服务</description></item><item><title>signal</title><link>https://before80.github.io/go_docs/example/signals/</link><pubDate>Mon, 07 Aug 2023 13:59:31 +0800</pubDate><guid>https://before80.github.io/go_docs/example/signals/</guid><description>signals 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // Note: // This code is from https://gobyexample.com. package main import ( &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; &amp;#34;os/signal&amp;#34; &amp;#34;syscall&amp;#34; ) func main() { sigs := make(chan os.Signal, 1) signal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM) done := make(chan bool, 1) go func() { sig := &amp;lt;-sigs fmt.Println()</description></item><item><title>exit</title><link>https://before80.github.io/go_docs/example/exit/</link><pubDate>Mon, 07 Aug 2023 13:59:40 +0800</pubDate><guid>https://before80.github.io/go_docs/example/exit/</guid><description>exit 原文： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // Note: // This code is from https://gobyexample.com. package main import ( &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; ) func main() { defer fmt.Println(&amp;#34;!&amp;#34;) os.Exit(3) }</description></item><item><title>使用 deadcode 查找无法访问的函数</title><link>https://before80.github.io/go_docs/goBlog/2023/FindingUnreachableFunctionsWithDeadcode/</link><pubDate>Wed, 03 Jan 2024 21:11:13 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2023/FindingUnreachableFunctionsWithDeadcode/</guid><description>Finding unreachable functions with deadcode 使用 deadcode 查找无法访问的函数 原文：https://go.dev/blog/deadcode Alan Donovan ​ 艾伦·多诺万 12 December 2023 ​ 2023 年 12 月 12 日 Functions that are</description></item><item><title>开发者调查 2023 年下半年结果</title><link>https://before80.github.io/go_docs/goBlog/2023/GoDeveloperSurvey2023H2Results/</link><pubDate>Wed, 03 Jan 2024 21:09:23 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2023/GoDeveloperSurvey2023H2Results/</guid><description>Go Developer Survey 2023 H2 Results Go 开发者调查 2023 年下半年结果 原文：https://go.dev/blog/survey2023-h2-results Todd Kulesza 5 December 2023 ​ 2023</description></item><item><title>十四年的 Go</title><link>https://before80.github.io/go_docs/goBlog/2023/FourteenYearsOfGo/</link><pubDate>Wed, 03 Jan 2024 21:02:57 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2023/FourteenYearsOfGo/</guid><description>Fourteen Years of Go 十四年的 Go 原文：https://go.dev/blog/14years Russ Cox, for the Go team ​ Russ Cox，Go 团队 10 November 2023 ​ 2023 年 11 月 10 日 Today we celebrate the fourteenth</description></item><item><title>关于类型推断，你一直想知道的一切——以及更多</title><link>https://before80.github.io/go_docs/goBlog/2023/EverythingYouAlwaysWantedToKnowAboutTypeInferenceAndALittleBitMore/</link><pubDate>Sun, 05 Nov 2023 13:31:35 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2023/EverythingYouAlwaysWantedToKnowAboutTypeInferenceAndALittleBitMore/</guid><description>Everything You Always Wanted to Know About Type Inference - And a Little Bit More 原文：https://go.dev/blog/type-inference Robert Griesemer 9 October 2023 2023年10月9日 This is the</description></item><item><title>解构类型参数</title><link>https://before80.github.io/go_docs/goBlog/2023/DeconstructingTypeParameters/</link><pubDate>Wed, 04 Oct 2023 14:33:20 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2023/DeconstructingTypeParameters/</guid><description>Deconstructing Type Parameters - 解构类型参数 原文：https://go.dev/blog/deconstructing-type-parameters Ian Lance Taylor 26 September 2023 Ian</description></item><item><title>加入开发</title><link>https://before80.github.io/go_docs/rod/doc/res/join-development/</link><pubDate>Thu, 21 Nov 2024 08:18:07 +0800</pubDate><guid>https://before80.github.io/go_docs/rod/doc/res/join-development/</guid><description>原文：https://go-rod.github.io/i18n/zh-CN/#/join-development 收录该文档时间： 2024-11-21T08:18:07+08:00 加入开发</description></item><item><title>JavaScript 运行时</title><link>https://before80.github.io/go_docs/rod/doc/using/javascript-runtime/</link><pubDate>Thu, 21 Nov 2024 08:09:20 +0800</pubDate><guid>https://before80.github.io/go_docs/rod/doc/using/javascript-runtime/</guid><description>原文：https://go-rod.github.io/i18n/zh-CN/#/javascript-runtime 收录该文档时间： 2024-11-21T08:09:20+08:00 JavaScript 运</description></item><item><title>flags</title><link>https://before80.github.io/go_docs/rod/flags/</link><pubDate>Wed, 20 Nov 2024 18:02:07 +0800</pubDate><guid>https://before80.github.io/go_docs/rod/flags/</guid><description>原文：https://pkg.go.dev/github.com/go-rod/rod@v0.116.2/lib/launcher/flag</description></item><item><title>utils</title><link>https://before80.github.io/go_docs/rod/utils/</link><pubDate>Wed, 20 Nov 2024 18:02:07 +0800</pubDate><guid>https://before80.github.io/go_docs/rod/utils/</guid><description>原文：https://pkg.go.dev/github.com/go-rod/rod@v0.116.2/lib/utils 收录该文档时间：</description></item><item><title>builtinfuncs</title><link>https://before80.github.io/go_docs/comm/Cpp/basic/builtinfuncs/</link><pubDate>Mon, 19 Aug 2024 09:36:18 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Cpp/basic/builtinfuncs/</guid><description/></item><item><title>builtinfuncs</title><link>https://before80.github.io/go_docs/comm/Csharp/basic/builtinfuncs/</link><pubDate>Mon, 19 Aug 2024 09:36:18 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Csharp/basic/builtinfuncs/</guid><description/></item><item><title>builtinfuncs</title><link>https://before80.github.io/go_docs/comm/Erlang/basic/builtinfuncs/</link><pubDate>Mon, 19 Aug 2024 09:36:18 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Erlang/basic/builtinfuncs/</guid><description/></item><item><title>builtinfuncs</title><link>https://before80.github.io/go_docs/comm/Java/basic/builtinfuncs/</link><pubDate>Mon, 19 Aug 2024 09:36:18 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Java/basic/builtinfuncs/</guid><description/></item><item><title>builtinfuncs</title><link>https://before80.github.io/go_docs/comm/Js/basic/builtinfuncs/</link><pubDate>Mon, 19 Aug 2024 09:36:18 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Js/basic/builtinfuncs/</guid><description/></item><item><title>builtinfuncs</title><link>https://before80.github.io/go_docs/comm/PHP/basic/builtinfuncs/</link><pubDate>Mon, 19 Aug 2024 09:36:18 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/PHP/basic/builtinfuncs/</guid><description/></item><item><title>builtinfuncs</title><link>https://before80.github.io/go_docs/comm/Python/basic/builtinfuncs/</link><pubDate>Mon, 19 Aug 2024 09:36:18 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Python/basic/builtinfuncs/</guid><description/></item><item><title>builtinfuncs</title><link>https://before80.github.io/go_docs/comm/Ruby/basic/builtinfuncs/</link><pubDate>Mon, 19 Aug 2024 09:36:18 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ruby/basic/builtinfuncs/</guid><description/></item><item><title>builtinfuncs</title><link>https://before80.github.io/go_docs/comm/Rust/basic/builtinfuncs/</link><pubDate>Mon, 19 Aug 2024 09:36:18 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Rust/basic/builtinfuncs/</guid><description/></item><item><title>builtinfuncs</title><link>https://before80.github.io/go_docs/comm/Ts/basic/builtinfuncs/</link><pubDate>Mon, 19 Aug 2024 09:36:18 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ts/basic/builtinfuncs/</guid><description/></item><item><title>内置函数</title><link>https://before80.github.io/go_docs/comm/Go/basic/builtinfuncs/</link><pubDate>Mon, 19 Aug 2024 09:36:18 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Go/basic/builtinfuncs/</guid><description>截止至go1.23，目前有18个内置函数！append(slice []Type, elems &amp;hellip;Type) []Type append(slice []Type, elems ...Type) []Type 注意 ​ 仅用于切片类型变量追加元素。 elems为切片+..</description></item><item><title>EnvVar</title><link>https://before80.github.io/go_docs/fiber/API/Middleware/EnvVar/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/Middleware/EnvVar/</guid><description>原文： https://docs.gofiber.io/api/middleware/envvar EnvVar EnvVar middleware for Fiber that can be used to expose environment variables with various options. ​ Fiber 的 EnvVar 中间件，可用于公开具有各种选项的环境变量。 Signatures 签名 1 func New(config ...Config) fiber.Handler Examples 示例 Import the middleware package that is part of the Fiber web framework ​ 导</description></item><item><title>修复Go 1.22中的for循环问题</title><link>https://before80.github.io/go_docs/goBlog/2023/FixingForLoopsInGo1_22/</link><pubDate>Wed, 04 Oct 2023 14:33:00 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2023/FixingForLoopsInGo1_22/</guid><description>Fixing For Loops in Go 1.22 - 修复Go 1.22中的for循环问题 原文：https://go.dev/blog/loopvar-preview David Chase and Russ Cox 19 September 2023</description></item><item><title>Gzip</title><link>https://before80.github.io/go_docs/echo/middleware/gzip/</link><pubDate>Sun, 09 Jul 2023 21:54:52 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/middleware/gzip/</guid><description>Gzip 原文：https://echo.labstack.com/docs/middleware/gzip ​ Gzip中间件使用gzip压缩方案对H</description></item><item><title>IP 地址</title><link>https://before80.github.io/go_docs/echo/guide/ip-address/</link><pubDate>Sun, 09 Jul 2023 21:51:10 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/guide/ip-address/</guid><description>IP Address - IP 地址 原文：https://echo.labstack.com/docs/ip-address ​ IP 地址在 HTTP 中起着基础性的作用；它用于访</description></item><item><title>Go中的WASI支持</title><link>https://before80.github.io/go_docs/goBlog/2023/WASISupportInGo/</link><pubDate>Wed, 04 Oct 2023 14:32:35 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2023/WASISupportInGo/</guid><description>WASI support in Go - Go中的WASI支持 原文：https://go.dev/blog/wasi Johan Brandhorst-Satzkorn, Julien Fabre, Damian Gryski, Evan Phoenix, and Achille Roussel 13 September 2023 Johan Brandhorst-Sa</description></item><item><title>扩展Go生态系统的gopls</title><link>https://before80.github.io/go_docs/goBlog/2023/ScalingGoplsForTheGrowingGoEcosystem/</link><pubDate>Wed, 04 Oct 2023 14:32:11 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2023/ScalingGoplsForTheGrowingGoEcosystem/</guid><description>Scaling gopls for the growing Go ecosystem - 扩展Go生态系统的gopls 原文：https://go.dev/blog/gopls-scalability Robert Findley and Alan Donovan 8 September 2023</description></item><item><title>Go 1.21中的基于配置文件的优化</title><link>https://before80.github.io/go_docs/goBlog/2023/Profile-guidedoptimizationinGo1_21/</link><pubDate>Wed, 04 Oct 2023 14:31:31 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2023/Profile-guidedoptimizationinGo1_21/</guid><description>Profile-guided optimization in Go 1.21 - Go 1.21中的基于配置文件的优化 原文：https://go.dev/blog/pgo Michael Pratt 5 September 2023 迈克尔·普拉特 2023年9月5日 Earlier</description></item><item><title>完全可复制、经过验证的Go工具链</title><link>https://before80.github.io/go_docs/goBlog/2023/PerfectlyReproducibleVerifiedGoToolchains/</link><pubDate>Wed, 04 Oct 2023 14:30:46 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2023/PerfectlyReproducibleVerifiedGoToolchains/</guid><description>Perfectly Reproducible, Verified Go Toolchains - 完全可复制、经过验证的Go工具链 原文：https://go.dev/blog/rebuild Russ Cox 28 August 2023 Russ Cox 2023年8月28日 One</description></item><item><title>Go 1.18 Beta 1已经推出，有泛型的功能</title><link>https://before80.github.io/go_docs/goBlog/2021/Go1_18Beta1IsAvailableWithGenerics/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2021/Go1_18Beta1IsAvailableWithGenerics/</guid><description>Go 1.18 Beta 1 is available, with generics - go 1.18 Beta 1已经推出，有泛型的功能 原文：https://go.dev/blog/go1.18beta1 Russ Cox, for the Go team 14 December 2021 We have just</description></item><item><title>使用 slog 进行结构化日志记录</title><link>https://before80.github.io/go_docs/goBlog/2023/StructuredLoggingWithSlog/</link><pubDate>Fri, 25 Aug 2023 21:19:14 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2023/StructuredLoggingWithSlog/</guid><description>Structured Logging with slog - 使用 slog 进行结构化日志记录 原文：https://go.dev/blog/slog Jonathan Amsterdam 22 August 2023 乔纳森·阿姆斯特丹 2023年8月22日 The new</description></item><item><title>Go 12 岁了</title><link>https://before80.github.io/go_docs/goBlog/2021/TwelveYearsOfGo/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2021/TwelveYearsOfGo/</guid><description>Twelve Years of Go - go 12 岁了 原文：https://go.dev/blog/12years Russ Cox, for the Go team 10 November 2021 Today we celebrate the twelfth birthday of the Go open source release. We have had an eventful year and have a lot</description></item><item><title>Go 1.21中的向后兼容性和工具链管理</title><link>https://before80.github.io/go_docs/goBlog/2023/ForwardCompatibilityAndToolchainManagementInGo1_21/</link><pubDate>Mon, 21 Aug 2023 15:03:30 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2023/ForwardCompatibilityAndToolchainManagementInGo1_21/</guid><description>Forward Compatibility and Toolchain Management in Go 1.21 - Go 1.21中的向后兼容性和工具链管理 原文：https://go.dev/blog/toolchain Russ Cox 14 August 2023 Russ Cox 2023</description></item><item><title>pkg.go.dev上的新搜索体验</title><link>https://before80.github.io/go_docs/goBlog/2021/ANewSearchExperienceOnpkg.go.dev/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2021/ANewSearchExperienceOnpkg.go.dev/</guid><description>A new search experience on pkg.go.dev - pkg.go.dev上的新搜索体验 原文：https://go.dev/blog/pkgsite-search-redesign</description></item><item><title>2020年 Go 开发者调查结果</title><link>https://before80.github.io/go_docs/goBlog/2021/GoDeveloperSurvey2020Results/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2021/GoDeveloperSurvey2020Results/</guid><description>Go Developer Survey 2020 Results - 2020年 go 开发者调查结果 原文：https://go.dev/blog/survey2020-results Alice Merrick 9 March 2021 Thank you for the amazing</description></item><item><title>Go 13 岁了</title><link>https://before80.github.io/go_docs/goBlog/2022/ThirteenYearsOfGo/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2022/ThirteenYearsOfGo/</guid><description>Thirteen Years of Go - go 13 岁了 原文：https://go.dev/blog/13years Russ Cox, for the Go team 10 November 2022 Today we celebrate the thirteenth birthday of the Go open source release. The Gopher is a teenager! 今天我们庆</description></item><item><title>宣布2021年Go开发者调查</title><link>https://before80.github.io/go_docs/goBlog/2021/AnnouncingThe2021GoDeveloperSurvey/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2021/AnnouncingThe2021GoDeveloperSurvey/</guid><description>Announcing the 2021 Go Developer Survey - 宣布2021年Go开发者调查 原文：https://go.dev/blog/survey2021 Alice Merrick 26 October 2021 Help shape the future of Go 帮助塑造G</description></item><item><title>向后兼容性、Go 1.21和Go 2</title><link>https://before80.github.io/go_docs/goBlog/2023/BackwardCompatibilityGo1_21AndGo2/</link><pubDate>Mon, 21 Aug 2023 15:02:20 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2023/BackwardCompatibilityGo1_21AndGo2/</guid><description>Backward Compatibility, Go 1.21, and Go 2 - 向后兼容性、Go 1.21和Go 2 原文：https://go.dev/blog/compat Russ Cox 14 August 2023 Russ Cox 2023年8月14日</description></item><item><title>Go 的 runtime: 4年之后</title><link>https://before80.github.io/go_docs/goBlog/2022/GoRuntime4YearsLater/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2022/GoRuntime4YearsLater/</guid><description>Go runtime: 4 years later - go 的 runtime: 4年之后 原文：https://go.dev/blog/go119runtime Michael Knyszek 26 September 2022 Since our last blog post about the Go GC in 2018 the Go GC, and the Go</description></item><item><title>行为准则更新</title><link>https://before80.github.io/go_docs/goBlog/2021/CodeOfConductUpdates/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2021/CodeOfConductUpdates/</guid><description>Code of Conduct Updates - 行为准则更新 原文：https://go.dev/blog/conduct-2021 Carmen Andoh, Russ Cox, and Steve Francia 16 September 2021 Although the details of our Code of Conduct have been adjusted over time, our</description></item><item><title>2022年第二季度 Go 开发者调查结果</title><link>https://before80.github.io/go_docs/goBlog/2022/GoDeveloperSurvey2022Q2Results/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2022/GoDeveloperSurvey2022Q2Results/</guid><description>Go Developer Survey 2022 Q2 Results - 2022年第二季度Go开发者调查结果 原文：https://go.dev/blog/survey2022-q2-results Todd</description></item><item><title>crypto/tls中的自动密码套件排序</title><link>https://before80.github.io/go_docs/goBlog/2021/AutomaticCipherSuiteOrderingInCryptotls/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2021/AutomaticCipherSuiteOrderingInCryptotls/</guid><description>Automatic cipher suite ordering in crypto/tls - crypto/tls中的自动密码套件排序 原文：https://go.dev/blog/tls-cipher-suites Filippo Valsorda 15</description></item><item><title>贡献文档</title><link>https://before80.github.io/go_docs/rod/doc/res/contribute-doc/</link><pubDate>Thu, 21 Nov 2024 08:18:21 +0800</pubDate><guid>https://before80.github.io/go_docs/rod/doc/res/contribute-doc/</guid><description>原文：https://go-rod.github.io/i18n/zh-CN/#/contribute-doc 收录该文档时间： 2024-11-21T08:18:21+08:00 贡献文档 调试</description></item><item><title>多浏览器与多页面</title><link>https://before80.github.io/go_docs/rod/doc/using/browsers-pages/</link><pubDate>Thu, 21 Nov 2024 08:09:52 +0800</pubDate><guid>https://before80.github.io/go_docs/rod/doc/using/browsers-pages/</guid><description>原文：https://go-rod.github.io/i18n/zh-CN/#/browsers-pages 收录该文档时间： 2024-11-21T08:09:52+08:00 多浏览器与多</description></item><item><title>exceptionerrors</title><link>https://before80.github.io/go_docs/comm/Cpp/basic/exceptionerrors/</link><pubDate>Mon, 19 Aug 2024 09:37:54 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Cpp/basic/exceptionerrors/</guid><description/></item><item><title>exceptionerrors</title><link>https://before80.github.io/go_docs/comm/Csharp/basic/exceptionerrors/</link><pubDate>Mon, 19 Aug 2024 09:37:54 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Csharp/basic/exceptionerrors/</guid><description/></item><item><title>exceptionerrors</title><link>https://before80.github.io/go_docs/comm/Erlang/basic/exceptionerrors/</link><pubDate>Mon, 19 Aug 2024 09:37:54 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Erlang/basic/exceptionerrors/</guid><description/></item><item><title>exceptionerrors</title><link>https://before80.github.io/go_docs/comm/Go/basic/exceptionerrors/</link><pubDate>Mon, 19 Aug 2024 09:37:54 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Go/basic/exceptionerrors/</guid><description/></item><item><title>exceptionerrors</title><link>https://before80.github.io/go_docs/comm/Java/basic/exceptionerrors/</link><pubDate>Mon, 19 Aug 2024 09:37:54 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Java/basic/exceptionerrors/</guid><description/></item><item><title>exceptionerrors</title><link>https://before80.github.io/go_docs/comm/Js/basic/exceptionerrors/</link><pubDate>Mon, 19 Aug 2024 09:37:54 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Js/basic/exceptionerrors/</guid><description/></item><item><title>exceptionerrors</title><link>https://before80.github.io/go_docs/comm/PHP/basic/exceptionerrors/</link><pubDate>Mon, 19 Aug 2024 09:37:54 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/PHP/basic/exceptionerrors/</guid><description/></item><item><title>exceptionerrors</title><link>https://before80.github.io/go_docs/comm/Python/basic/exceptionerrors/</link><pubDate>Mon, 19 Aug 2024 09:37:54 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Python/basic/exceptionerrors/</guid><description/></item><item><title>exceptionerrors</title><link>https://before80.github.io/go_docs/comm/Ruby/basic/exceptionerrors/</link><pubDate>Mon, 19 Aug 2024 09:37:54 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ruby/basic/exceptionerrors/</guid><description/></item><item><title>exceptionerrors</title><link>https://before80.github.io/go_docs/comm/Rust/basic/exceptionerrors/</link><pubDate>Mon, 19 Aug 2024 09:37:54 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Rust/basic/exceptionerrors/</guid><description/></item><item><title>exceptionerrors</title><link>https://before80.github.io/go_docs/comm/Ts/basic/exceptionerrors/</link><pubDate>Mon, 19 Aug 2024 09:37:54 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ts/basic/exceptionerrors/</guid><description/></item><item><title>ETag</title><link>https://before80.github.io/go_docs/fiber/API/Middleware/ETag/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/Middleware/ETag/</guid><description>原文： https://docs.gofiber.io/api/middleware/etag ETag ETag middleware for Fiber that lets caches be more efficient and save bandwidth, as a web server does not need to resend a full response if the content has not changed. ​ ETag 中间件，用于 Fiber，它让缓存更高效并节省带宽，因为如果内容没</description></item><item><title>Go 1.21 发布了！</title><link>https://before80.github.io/go_docs/goBlog/2023/Go1_21IsReleased/</link><pubDate>Mon, 21 Aug 2023 15:01:16 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2023/Go1_21IsReleased/</guid><description>Go 1.21 is released! - Go 1.21 发布了！ 原文：https://go.dev/blog/go1.21 Eli Bendersky, on behalf of the Go team 8 August 2023 Eli Bendersky，代表Go团队 20</description></item><item><title>jaeger</title><link>https://before80.github.io/go_docs/echo/middleware/jaeger/</link><pubDate>Sun, 09 Jul 2023 21:55:04 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/middleware/jaeger/</guid><description>Jaeger 原文：https://echo.labstack.com/docs/middleware/jaeger 注意 ​ Echo社区贡献 ​ 使用Jaeg</description></item><item><title>请求</title><link>https://before80.github.io/go_docs/echo/guide/request/</link><pubDate>Sun, 09 Jul 2023 21:51:20 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/guide/request/</guid><description>Request - 请求 原文：https://echo.labstack.com/docs/request 检索数据 - Retrieve Data 表单数据 ​ 可以通过名称使用 Context#FormValue(name string) 来检索</description></item><item><title>Go 1.17版发布了</title><link>https://before80.github.io/go_docs/goBlog/2021/Go1_17IsReleased/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2021/Go1_17IsReleased/</guid><description>Go 1.17 is released - go 1.17版发布了 原文：https://go.dev/blog/go1.17 Matt Pearring and Alex Rakoczy 16 August 2021 Today the Go team is thrilled to release Go 1.17, which you can get by visiting the download page.</description></item><item><title>Go 的漏洞管理</title><link>https://before80.github.io/go_docs/goBlog/2022/VulnerabilityManagementForGo/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2022/VulnerabilityManagementForGo/</guid><description>Vulnerability Management for Go - go 的漏洞管理 原文：https://go.dev/blog/vuln Julie Qiu, for the Go security team 6 September 2022 We are excited to announce Go’s new support for vulnerability management, our first step towards helping Go developers learn</description></item><item><title>整理 Go 的Web体验</title><link>https://before80.github.io/go_docs/goBlog/2021/TidyingUpTheGoWebExperience/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2021/TidyingUpTheGoWebExperience/</guid><description>Tidying up the Go web experience - 整理 go 的Web体验 原文：https://go.dev/blog/tidy-web Russ Cox 18 August 2021 In 2019, which seems like a decade ago, we launched go.dev, a new hub for Go developers, along</description></item><item><title>尝试项目模板</title><link>https://before80.github.io/go_docs/goBlog/2023/ExperimentingWithProjectTemplates/</link><pubDate>Mon, 21 Aug 2023 14:59:57 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2023/ExperimentingWithProjectTemplates/</guid><description>Experimenting with project templates - 尝试项目模板 原文：https://go.dev/blog/gonew Cameron Balahan 31 July 2023 Cameron Balahan 2023年7月31日 When you start a new project in Go, you might begin by cloning an</description></item><item><title>2021年Go开发者调查结果</title><link>https://before80.github.io/go_docs/goBlog/2022/GoDeveloperSurvey2021Results/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2022/GoDeveloperSurvey2021Results/</guid><description>Go Developer Survey 2021 Results - 2021年Go开发者调查结果 原文：https://go.dev/blog/survey2021-results Alice Merrick 19 April 2022 A huge thank you</description></item><item><title>The Go Collective on Stack Overflow</title><link>https://before80.github.io/go_docs/goBlog/2021/TheGoCollectiveOnStackOverflow/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2021/TheGoCollectiveOnStackOverflow/</guid><description>The Go Collective on Stack Overflow 原文：https://go.dev/blog/stackoverflow Steve Francia 23 June 2021 Since the earliest days of Go, Stack Overflow has been a significant part of the Go user experience. For the past five years,</description></item><item><title>分享您对使用 Go 进行开发的反馈</title><link>https://before80.github.io/go_docs/goBlog/2023/ShareYourFeedbackAboutDevelopingWithGo/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2023/ShareYourFeedbackAboutDevelopingWithGo/</guid><description>Share your feedback about developing with Go - 分享您对使用 Go 进行开发的反馈 原文：https://go.dev/blog/survey2023-q1 Alice Merrick, for the Go team Go 团队 18 January 2023</description></item><item><title>何时使用泛型</title><link>https://before80.github.io/go_docs/goBlog/2022/WhenToUseGenerics/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2022/WhenToUseGenerics/</guid><description>When To Use Generics - 何时使用泛型 原文：https://go.dev/blog/when-generics Ian Lance Taylor 12 April 2022 简介 Introduction This is the blog post version of my talks at Google Open Source Live:</description></item><item><title>模糊测试已经准备好进入Beta测试</title><link>https://before80.github.io/go_docs/goBlog/2021/FuzzingIsBetaReady/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2021/FuzzingIsBetaReady/</guid><description>Fuzzing is Beta Ready - 模糊测试已经准备好进入Beta测试 原文：https://go.dev/blog/fuzz-beta Katie Hockman and Jay Conrod 3 June 2021 2021年6月3</description></item><item><title>Govulncheck v1.0.0 发布！</title><link>https://before80.github.io/go_docs/goBlog/2023/Govulncheckv1_0_0IsReleased/</link><pubDate>Mon, 21 Aug 2023 14:54:43 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2023/Govulncheckv1_0_0IsReleased/</guid><description>Govulncheck v1.0.0 is released! - Govulncheck v1.0.0 发布！ 原文：https://go.dev/blog/govulncheck Julie Qiu, for the Go security team 13 July 2023 Julie Qiu，Go 安全团队 2023 年 7 月 13</description></item><item><title>Go 1.21 候选版本</title><link>https://before80.github.io/go_docs/goBlog/2023/Go1_21ReleaseCandidate/</link><pubDate>Wed, 12 Jul 2023 20:42:31 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2023/Go1_21ReleaseCandidate/</guid><description>Go 1.21 Release Candidate - Go 1.21 候选版本 原文：https://go.dev/blog/go1.21rc Eli Bendersky, on behalf of the Go team 代表 Go 团队 21 June 2023 2023年6月21日 The Go</description></item><item><title>上下文和结构</title><link>https://before80.github.io/go_docs/goBlog/2021/ContextsAndStructs/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2021/ContextsAndStructs/</guid><description>Contexts and structs - 上下文和结构 原文：https://go.dev/blog/context-and-structs Jean de Klerk, Matt T. Proud 24 February 2021 Introduction 简介 In many Go APIs, especially modern</description></item><item><title>熟悉工作空间</title><link>https://before80.github.io/go_docs/goBlog/2022/GetFamiliarWithWorkspaces/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2022/GetFamiliarWithWorkspaces/</guid><description>Get familiar with workspaces - 熟悉工作空间 原文：https://go.dev/blog/get-familiar-with-workspaces Beth Brown, for the Go team 5 April</description></item><item><title>Go开发者调查2023年第一季度结果</title><link>https://before80.github.io/go_docs/goBlog/2023/GoDeveloperSurvey2023Q1Results/</link><pubDate>Wed, 12 Jul 2023 20:40:48 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2023/GoDeveloperSurvey2023Q1Results/</guid><description>Go Developer Survey 2023 Q1 Results - Go开发者调查2023年第一季度结果 原文：https://go.dev/blog/survey2023-q1-results Alice</description></item><item><title>Go 如何减轻供应链攻击的影响</title><link>https://before80.github.io/go_docs/goBlog/2022/HowGoMitigatesSupplyChainAttacks/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2022/HowGoMitigatesSupplyChainAttacks/</guid><description>How Go Mitigates Supply Chain Attacks - Go如何减轻供应链攻击的影响 原文：https://go.dev/blog/supply-chain Filippo Valsorda 31 March 2022 Modern software engineering is collaborative, and based on reusing</description></item><item><title>Go 1.16版发布了</title><link>https://before80.github.io/go_docs/goBlog/2021/Go1_16IsReleased/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2021/Go1_16IsReleased/</guid><description>Go 1.16 is released - go 1.16版发布了 原文：https://go.dev/blog/go1.16 Matt Pearring and Dmitri Shuralyov 16 February 2021 Today the Go team is very happy to announce the release of Go 1.16. You can get it from</description></item><item><title>Go 1.16中的新模块变化</title><link>https://before80.github.io/go_docs/goBlog/2021/NewModuleChangesInGo1_16/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2021/NewModuleChangesInGo1_16/</guid><description>New module changes in Go 1.16 - go 1.16中的新模块变化 原文：https://go.dev/blog/go116-module-changes Jay Conrod 18 February 2021 We hope y</description></item><item><title>Go 集成测试的代码覆盖率</title><link>https://before80.github.io/go_docs/goBlog/2023/CodeCoverageForGoIntegrationTests/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2023/CodeCoverageForGoIntegrationTests/</guid><description>Code coverage for Go integration tests - Go集成测试的代码覆盖率 原文：https://go.dev/blog/integration-test-coverage Than McIntosh 8</description></item><item><title>泛型简介</title><link>https://before80.github.io/go_docs/goBlog/2022/AnIntroductionToGenerics/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2022/AnIntroductionToGenerics/</guid><description>An Introduction To Generics - 泛型简介 原文：https://go.dev/blog/intro-generics Robert Griesemer and Ian Lance Taylor 22 March 2022 简介 Introduction This blog post is based on our talk at GopherCon 2021: ​</description></item><item><title>All your comparable types</title><link>https://before80.github.io/go_docs/goBlog/2023/AllYourComparableTypes/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2023/AllYourComparableTypes/</guid><description>All your comparable types - 所有可比较的类型 原文：https://go.dev/blog/comparable Robert Griesemer 17 February 2023 On February 1 we released our latest Go version, 1.20, which included a few language changes. Here we</description></item><item><title>Go 1.18发布了!</title><link>https://before80.github.io/go_docs/goBlog/2022/Go1_18IsReleased/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2022/Go1_18IsReleased/</guid><description>Go 1.18 is released! - go 1.18发布了! 原文：https://go.dev/blog/go1.18 The Go Team 15 March 2022 Today the Go team is thrilled to release Go 1.18, which you can get by visiting the download page. 今天</description></item><item><title>性能分析引导优化预览</title><link>https://before80.github.io/go_docs/goBlog/2023/Profile-guidedOptimizationPreview/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2023/Profile-guidedOptimizationPreview/</guid><description>Profile-guided optimization preview - 性能分析引导优化预览 原文：https://go.dev/blog/pgo-preview Michael Pratt 8 February 2023 2023年2月8日 When you build a Go binary, the Go</description></item><item><title>在VS Code Go扩展中默认打开gopls</title><link>https://before80.github.io/go_docs/goBlog/2021/GoplsOnByDefaultInTheVSCodeGoExtension/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2021/GoplsOnByDefaultInTheVSCodeGoExtension/</guid><description>Gopls on by default in the VS Code Go extension - 在VS Code Go扩展中默认打开gopls 原文：https://go.dev/blog/gopls-vscode-go Go tools team</description></item><item><title>Go 1.20 发布了！</title><link>https://before80.github.io/go_docs/goBlog/2023/Go1_20IsReleased/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2023/Go1_20IsReleased/</guid><description>Go 1.20 is released! - go 1.20 发布了！ 原文：https://go.dev/blog/go1.20https://go.dev/blog/go1.20 Robert Griesemer, on behalf</description></item><item><title>Go 中的指令PATH安全</title><link>https://before80.github.io/go_docs/goBlog/2021/CommandPATHSecurityInGo/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2021/CommandPATHSecurityInGo/</guid><description>Command PATH security in Go - go 中的指令PATH安全 原文：https://go.dev/blog/path-security Russ Cox 19 January 2021 Today’s Go security release fixes an</description></item><item><title>宣布Go 1.18 Beta 2</title><link>https://before80.github.io/go_docs/goBlog/2022/AnnouncingGo1_18Beta2/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2022/AnnouncingGo1_18Beta2/</guid><description>Announcing Go 1.18 Beta 2 - 宣布Go 1.18 Beta 2 原文：https://go.dev/blog/go1.18beta2 Jeremy Faller and Steve Francia, for the Go team 31 January 2022 We are encouraged by all the excitement around Go’</description></item><item><title>源代码</title><link>https://before80.github.io/go_docs/rod/doc/res/source-code/</link><pubDate>Thu, 21 Nov 2024 08:18:37 +0800</pubDate><guid>https://before80.github.io/go_docs/rod/doc/res/source-code/</guid><description>原文：https://go-rod.github.io/i18n/zh-CN/#/source-code 收录该文档时间： 2024-11-21T08:18:37+08:00 源代码 ​ 主代码仓库</description></item><item><title>custom-websocket</title><link>https://before80.github.io/go_docs/rod/doc/using/custom-websocket/</link><pubDate>Thu, 21 Nov 2024 08:10:21 +0800</pubDate><guid>https://before80.github.io/go_docs/rod/doc/using/custom-websocket/</guid><description>原文：https://go-rod.github.io/i18n/zh-CN/#/custom-websocket 收录该文档时间： 2024-11-21T08:10:21+08:00 自定义 WebSocket</description></item><item><title>regexp</title><link>https://before80.github.io/go_docs/comm/Cpp/basic/regexp/</link><pubDate>Mon, 19 Aug 2024 09:43:26 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Cpp/basic/regexp/</guid><description/></item><item><title>regexp</title><link>https://before80.github.io/go_docs/comm/Csharp/basic/regexp/</link><pubDate>Mon, 19 Aug 2024 09:43:26 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Csharp/basic/regexp/</guid><description/></item><item><title>regexp</title><link>https://before80.github.io/go_docs/comm/Erlang/basic/regexp/</link><pubDate>Mon, 19 Aug 2024 09:43:26 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Erlang/basic/regexp/</guid><description/></item><item><title>regexp</title><link>https://before80.github.io/go_docs/comm/Go/basic/regexp/</link><pubDate>Mon, 19 Aug 2024 09:43:26 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Go/basic/regexp/</guid><description/></item><item><title>regexp</title><link>https://before80.github.io/go_docs/comm/Java/basic/regexp/</link><pubDate>Mon, 19 Aug 2024 09:43:26 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Java/basic/regexp/</guid><description/></item><item><title>regexp</title><link>https://before80.github.io/go_docs/comm/Js/basic/regexp/</link><pubDate>Mon, 19 Aug 2024 09:43:26 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Js/basic/regexp/</guid><description/></item><item><title>regexp</title><link>https://before80.github.io/go_docs/comm/PHP/basic/regexp/</link><pubDate>Mon, 19 Aug 2024 09:43:26 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/PHP/basic/regexp/</guid><description/></item><item><title>regexp</title><link>https://before80.github.io/go_docs/comm/Python/basic/regexp/</link><pubDate>Mon, 19 Aug 2024 09:43:26 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Python/basic/regexp/</guid><description/></item><item><title>regexp</title><link>https://before80.github.io/go_docs/comm/Ruby/basic/regexp/</link><pubDate>Mon, 19 Aug 2024 09:43:26 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ruby/basic/regexp/</guid><description/></item><item><title>regexp</title><link>https://before80.github.io/go_docs/comm/Rust/basic/regexp/</link><pubDate>Mon, 19 Aug 2024 09:43:26 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Rust/basic/regexp/</guid><description/></item><item><title>regexp</title><link>https://before80.github.io/go_docs/comm/Ts/basic/regexp/</link><pubDate>Mon, 19 Aug 2024 09:43:26 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ts/basic/regexp/</guid><description/></item><item><title>byte</title><link>https://before80.github.io/go_docs/asu/basic/types/byte/</link><pubDate>Sat, 13 Jul 2024 14:13:07 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/types/byte/</guid><description/></item><item><title>标识符</title><link>https://before80.github.io/go_docs/asu/basic/identifier/</link><pubDate>Sat, 13 Jul 2024 10:56:22 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/identifier/</guid><description>​ 在Go的语言规范中关于标识符的描述如下： Identifiers name program entities such as variables and types. An identifier is a sequence of one or more letters and digits. The first character in an identifier must be a letter. ​ 标识符命名程序实体，如变量和类型。</description></item><item><title>ExpVar</title><link>https://before80.github.io/go_docs/fiber/API/Middleware/ExpVar/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/Middleware/ExpVar/</guid><description>原文： https://docs.gofiber.io/api/middleware/expvar ExpVar Expvar middleware for Fiber that serves via its HTTP server runtime exposed variants in the JSON format. The package is typically only imported for the side effect of registering its HTTP handlers. The handled path is /debug/vars. ​ 适用于 Fiber 的 Expvar 中间件，通过其 HTTP 服务器运行时以 JSON 格式提供公</description></item><item><title>Coverage profiling support for integration tests</title><link>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/CoverageProfilingSupportForIntegrationTests/</link><pubDate>Wed, 12 Jul 2023 20:37:11 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/CoverageProfilingSupportForIntegrationTests/</guid><description>Coverage profiling support for integration tests https://go.dev/testing/coverage/ Back to Go Testing Beginning in Go 1.20, Go supports collection of coverage profiles from applications and from integration tests, larger and more complex tests for Go programs. Overview Go provides easy-to-use support for collecting coverage profiles at the level of package unit tests via the “go test -coverprofile=... &amp;lt;pkg_targ</description></item><item><title>jwt</title><link>https://before80.github.io/go_docs/echo/middleware/jwt/</link><pubDate>Sun, 09 Jul 2023 21:55:16 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/middleware/jwt/</guid><description>JWT 原文：https://echo.labstack.com/docs/middleware/jwt ​ JWT提供了JSON Web Token（JWT</description></item><item><title>响应</title><link>https://before80.github.io/go_docs/echo/guide/response/</link><pubDate>Sun, 09 Jul 2023 21:51:30 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/guide/response/</guid><description>Response - 响应 原文：https://echo.labstack.com/docs/response 发送字符串 ​ 可以使用 Context#String(code int, s string) 发送带有状态码的纯文</description></item><item><title>1.18版的两个新教程</title><link>https://before80.github.io/go_docs/goBlog/2022/TwoNewTutorialsFor1_18/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2022/TwoNewTutorialsFor1_18/</guid><description>Two New Tutorials for 1.18 - 1.18版的两个新教程 原文：https://go.dev/blog/tutorials-go1.18 Katie Hockman, for the Go team 14 January 2022 We will be releasing Go</description></item><item><title>关于在 Go 中添加泛型的建议</title><link>https://before80.github.io/go_docs/goBlog/2021/AProposalForAddingGenericsToGo/</link><pubDate>Thu, 18 May 2023 17:03:08 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2021/AProposalForAddingGenericsToGo/</guid><description>A Proposal for Adding Generics to go - 关于在 go 中添加泛型的建议 原文：https://go.dev/blog/generics-proposal Ian Lance Taylor 12 January 2021 Generics proposal 泛型</description></item><item><title>FAQ</title><link>https://before80.github.io/go_docs/docs/FAQ/</link><pubDate>Thu, 18 May 2023 16:56:23 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/FAQ/</guid><description>Frequently Asked Questions (FAQ) 原文：https://go.dev/doc/faq Origins 起源 What is the purpose of the project? 这个项目的目的是什么？ ​ 在Go诞生的时候，也就是十年前，编程世</description></item><item><title>FAQ（中英对照）</title><link>https://before80.github.io/go_docs/docs/FAQ_En_Zh/</link><pubDate>Thu, 18 May 2023 16:56:22 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/FAQ_En_Zh/</guid><description>Frequently Asked Questions (FAQ) 原文：https://go.dev/doc/faq Origins 起源 What is the purpose of the project? 这个项目的目的是什么？ At the time of Go&amp;rsquo;s inception, only a decade ago, the programming world was different from today. Production software was</description></item><item><title>端到端测试</title><link>https://before80.github.io/go_docs/rod/doc/using/end-to-end-testing/</link><pubDate>Thu, 21 Nov 2024 08:10:39 +0800</pubDate><guid>https://before80.github.io/go_docs/rod/doc/using/end-to-end-testing/</guid><description>原文：https://go-rod.github.io/i18n/zh-CN/#/end-to-end-testing 收录该文档时间： 2024-11-21T08:10:39+08:00 端到</description></item><item><title>testings</title><link>https://before80.github.io/go_docs/comm/Cpp/basic/testings/</link><pubDate>Mon, 19 Aug 2024 09:37:17 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Cpp/basic/testings/</guid><description/></item><item><title>testings</title><link>https://before80.github.io/go_docs/comm/Csharp/basic/testings/</link><pubDate>Mon, 19 Aug 2024 09:37:17 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Csharp/basic/testings/</guid><description/></item><item><title>testings</title><link>https://before80.github.io/go_docs/comm/Erlang/basic/testings/</link><pubDate>Mon, 19 Aug 2024 09:37:17 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Erlang/basic/testings/</guid><description/></item><item><title>testings</title><link>https://before80.github.io/go_docs/comm/Java/basic/testings/</link><pubDate>Mon, 19 Aug 2024 09:37:17 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Java/basic/testings/</guid><description/></item><item><title>testings</title><link>https://before80.github.io/go_docs/comm/Js/basic/testings/</link><pubDate>Mon, 19 Aug 2024 09:37:17 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Js/basic/testings/</guid><description/></item><item><title>testings</title><link>https://before80.github.io/go_docs/comm/PHP/basic/testings/</link><pubDate>Mon, 19 Aug 2024 09:37:17 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/PHP/basic/testings/</guid><description/></item><item><title>testings</title><link>https://before80.github.io/go_docs/comm/Python/basic/testings/</link><pubDate>Mon, 19 Aug 2024 09:37:17 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Python/basic/testings/</guid><description/></item><item><title>testings</title><link>https://before80.github.io/go_docs/comm/Ruby/basic/testings/</link><pubDate>Mon, 19 Aug 2024 09:37:17 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ruby/basic/testings/</guid><description/></item><item><title>testings</title><link>https://before80.github.io/go_docs/comm/Rust/basic/testings/</link><pubDate>Mon, 19 Aug 2024 09:37:17 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Rust/basic/testings/</guid><description/></item><item><title>testings</title><link>https://before80.github.io/go_docs/comm/Ts/basic/testings/</link><pubDate>Mon, 19 Aug 2024 09:37:17 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ts/basic/testings/</guid><description/></item><item><title>Favicon</title><link>https://before80.github.io/go_docs/fiber/API/Middleware/Favicon/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/Middleware/Favicon/</guid><description>原文： https://docs.gofiber.io/api/middleware/favicon Favicon 网站图标 Favicon middleware for Fiber that ignores favicon requests or caches a provided icon in memory to improve performance by skipping disk access. User agents request favicon.ico frequently and indiscriminately, so you may wish to exclude these requests from your logs by using this middleware before your logger middleware. ​ Favicon 中间件，用于 Fiber</description></item><item><title>Key Auth</title><link>https://before80.github.io/go_docs/echo/middleware/key-auth/</link><pubDate>Sun, 09 Jul 2023 21:55:25 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/middleware/key-auth/</guid><description>Key Auth 原文：https://echo.labstack.com/docs/middleware/key-auth ​ Key Auth 中间件提供基于密钥的身份</description></item><item><title>路由</title><link>https://before80.github.io/go_docs/echo/guide/routing/</link><pubDate>Sun, 09 Jul 2023 21:52:01 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/guide/routing/</guid><description>Routing - 路由 原文：https://echo.labstack.com/docs/routing ​ Echo的路由器基于基数树（radix tree）</description></item><item><title>pointer</title><link>https://before80.github.io/go_docs/comm/Cpp/basic/pointer/</link><pubDate>Mon, 19 Aug 2024 09:35:31 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Cpp/basic/pointer/</guid><description/></item><item><title>pointer</title><link>https://before80.github.io/go_docs/comm/Csharp/basic/pointer/</link><pubDate>Mon, 19 Aug 2024 09:35:31 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Csharp/basic/pointer/</guid><description/></item><item><title>pointer</title><link>https://before80.github.io/go_docs/comm/Erlang/basic/pointer/</link><pubDate>Mon, 19 Aug 2024 09:35:31 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Erlang/basic/pointer/</guid><description/></item><item><title>pointer</title><link>https://before80.github.io/go_docs/comm/Go/basic/pointer/</link><pubDate>Mon, 19 Aug 2024 09:35:31 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Go/basic/pointer/</guid><description/></item><item><title>pointer</title><link>https://before80.github.io/go_docs/comm/Java/basic/pointer/</link><pubDate>Mon, 19 Aug 2024 09:35:31 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Java/basic/pointer/</guid><description/></item><item><title>pointer</title><link>https://before80.github.io/go_docs/comm/Js/basic/pointer/</link><pubDate>Mon, 19 Aug 2024 09:35:31 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Js/basic/pointer/</guid><description/></item><item><title>pointer</title><link>https://before80.github.io/go_docs/comm/PHP/basic/pointer/</link><pubDate>Mon, 19 Aug 2024 09:35:31 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/PHP/basic/pointer/</guid><description/></item><item><title>pointer</title><link>https://before80.github.io/go_docs/comm/Python/basic/pointer/</link><pubDate>Mon, 19 Aug 2024 09:35:31 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Python/basic/pointer/</guid><description/></item><item><title>pointer</title><link>https://before80.github.io/go_docs/comm/Ruby/basic/pointer/</link><pubDate>Mon, 19 Aug 2024 09:35:31 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ruby/basic/pointer/</guid><description/></item><item><title>pointer</title><link>https://before80.github.io/go_docs/comm/Rust/basic/pointer/</link><pubDate>Mon, 19 Aug 2024 09:35:31 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Rust/basic/pointer/</guid><description/></item><item><title>pointer</title><link>https://before80.github.io/go_docs/comm/Ts/basic/pointer/</link><pubDate>Mon, 19 Aug 2024 09:35:31 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ts/basic/pointer/</guid><description/></item><item><title>FileSystem</title><link>https://before80.github.io/go_docs/fiber/API/Middleware/FileSystem/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/Middleware/FileSystem/</guid><description>原文： https://docs.gofiber.io/api/middleware/filesystem FileSystem 文件系统 Filesystem middleware for Fiber that enables you to serve files from a directory. ​ Filesystem 中间件，用于 Fiber，它使您能够从目录提供文件。 CAUTION 注意 :params &amp;amp; :optionals? within the prefix path are not supported! 前缀路径中的 :params 和</description></item><item><title>Logger</title><link>https://before80.github.io/go_docs/echo/middleware/logger/</link><pubDate>Sun, 09 Jul 2023 21:55:43 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/middleware/logger/</guid><description>Logger 原文：https://echo.labstack.com/docs/middleware/logger ​ Logger 中间件用于记录每个 HTTP 请求的信息。</description></item><item><title>静态文件</title><link>https://before80.github.io/go_docs/echo/guide/static-files/</link><pubDate>Sun, 09 Jul 2023 21:51:46 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/guide/static-files/</guid><description>Static Files - 静态文件 原文：https://echo.labstack.com/docs/static-files ​ 图片、JavaScript、CS</description></item><item><title>extend</title><link>https://before80.github.io/go_docs/comm/Cpp/basic/extend/</link><pubDate>Mon, 19 Aug 2024 09:42:34 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Cpp/basic/extend/</guid><description/></item><item><title>extend</title><link>https://before80.github.io/go_docs/comm/Csharp/basic/extend/</link><pubDate>Mon, 19 Aug 2024 09:42:34 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Csharp/basic/extend/</guid><description/></item><item><title>extend</title><link>https://before80.github.io/go_docs/comm/Erlang/basic/extend/</link><pubDate>Mon, 19 Aug 2024 09:42:34 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Erlang/basic/extend/</guid><description/></item><item><title>extend</title><link>https://before80.github.io/go_docs/comm/Go/basic/extend/</link><pubDate>Mon, 19 Aug 2024 09:42:34 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Go/basic/extend/</guid><description/></item><item><title>extend</title><link>https://before80.github.io/go_docs/comm/Java/basic/extend/</link><pubDate>Mon, 19 Aug 2024 09:42:34 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Java/basic/extend/</guid><description/></item><item><title>extend</title><link>https://before80.github.io/go_docs/comm/Js/basic/extend/</link><pubDate>Mon, 19 Aug 2024 09:42:34 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Js/basic/extend/</guid><description/></item><item><title>extend</title><link>https://before80.github.io/go_docs/comm/PHP/basic/extend/</link><pubDate>Mon, 19 Aug 2024 09:42:34 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/PHP/basic/extend/</guid><description/></item><item><title>extend</title><link>https://before80.github.io/go_docs/comm/Python/basic/extend/</link><pubDate>Mon, 19 Aug 2024 09:42:34 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Python/basic/extend/</guid><description/></item><item><title>extend</title><link>https://before80.github.io/go_docs/comm/Ruby/basic/extend/</link><pubDate>Mon, 19 Aug 2024 09:42:34 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ruby/basic/extend/</guid><description/></item><item><title>extend</title><link>https://before80.github.io/go_docs/comm/Rust/basic/extend/</link><pubDate>Mon, 19 Aug 2024 09:42:34 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Rust/basic/extend/</guid><description/></item><item><title>extend</title><link>https://before80.github.io/go_docs/comm/Ts/basic/extend/</link><pubDate>Mon, 19 Aug 2024 09:42:34 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ts/basic/extend/</guid><description/></item><item><title>Health Check</title><link>https://before80.github.io/go_docs/fiber/API/Middleware/HealthCheck/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/Middleware/HealthCheck/</guid><description>原文： https://docs.gofiber.io/api/middleware/healthcheck Health Check 运行状况检查 Liveness and readiness probes middleware for Fiber that provides two endpoints for checking the liveness and readiness state of HTTP applications. ​ Liveness 和 readiness 探测中间件，用于 Fiber，它提供两个端点来检查 HTTP 应用程序的 liveness 和 readiness</description></item><item><title>方法重写</title><link>https://before80.github.io/go_docs/echo/middleware/method-override/</link><pubDate>Sun, 09 Jul 2023 21:56:03 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/middleware/method-override/</guid><description>Method Override - 方法重写 原文：https://echo.labstack.com/docs/middleware/method-override ​ Method Override</description></item><item><title>模板</title><link>https://before80.github.io/go_docs/echo/guide/templates/</link><pubDate>Sun, 09 Jul 2023 21:52:14 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/guide/templates/</guid><description>Templates - 模板 原文：https://echo.labstack.com/docs/templates 渲染 ​ Context#Render(code int, name string, data interface{}) error 使用数据渲染模板，并发送一</description></item><item><title>module</title><link>https://before80.github.io/go_docs/comm/Cpp/basic/module/</link><pubDate>Mon, 19 Aug 2024 09:35:57 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Cpp/basic/module/</guid><description/></item><item><title>module</title><link>https://before80.github.io/go_docs/comm/Csharp/basic/module/</link><pubDate>Mon, 19 Aug 2024 09:35:57 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Csharp/basic/module/</guid><description/></item><item><title>module</title><link>https://before80.github.io/go_docs/comm/Erlang/basic/module/</link><pubDate>Mon, 19 Aug 2024 09:35:57 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Erlang/basic/module/</guid><description/></item><item><title>module</title><link>https://before80.github.io/go_docs/comm/Go/basic/module/</link><pubDate>Mon, 19 Aug 2024 09:35:57 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Go/basic/module/</guid><description/></item><item><title>module</title><link>https://before80.github.io/go_docs/comm/Java/basic/module/</link><pubDate>Mon, 19 Aug 2024 09:35:57 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Java/basic/module/</guid><description/></item><item><title>module</title><link>https://before80.github.io/go_docs/comm/Js/basic/module/</link><pubDate>Mon, 19 Aug 2024 09:35:57 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Js/basic/module/</guid><description/></item><item><title>module</title><link>https://before80.github.io/go_docs/comm/PHP/basic/module/</link><pubDate>Mon, 19 Aug 2024 09:35:57 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/PHP/basic/module/</guid><description/></item><item><title>module</title><link>https://before80.github.io/go_docs/comm/Python/basic/module/</link><pubDate>Mon, 19 Aug 2024 09:35:57 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Python/basic/module/</guid><description/></item><item><title>module</title><link>https://before80.github.io/go_docs/comm/Ruby/basic/module/</link><pubDate>Mon, 19 Aug 2024 09:35:57 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ruby/basic/module/</guid><description/></item><item><title>module</title><link>https://before80.github.io/go_docs/comm/Rust/basic/module/</link><pubDate>Mon, 19 Aug 2024 09:35:57 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Rust/basic/module/</guid><description/></item><item><title>module</title><link>https://before80.github.io/go_docs/comm/Ts/basic/module/</link><pubDate>Mon, 19 Aug 2024 09:35:57 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ts/basic/module/</guid><description/></item><item><title>Helmet</title><link>https://before80.github.io/go_docs/fiber/API/Middleware/Helmet/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/Middleware/Helmet/</guid><description>原文： https://docs.gofiber.io/api/middleware/helmet Helmet Helmet middleware helps secure your apps by setting various HTTP headers. ​ Helmet 中间件通过设置各种 HTTP 头来帮助保护您的应用。 Signatures 签名 1 func New(config ...Config) fiber.Handler Examples 示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 package main</description></item><item><title>prometheus</title><link>https://before80.github.io/go_docs/echo/middleware/prometheus/</link><pubDate>Sun, 09 Jul 2023 21:56:27 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/middleware/prometheus/</guid><description>Prometheus 原文：https://echo.labstack.com/docs/middleware/prometheus 注意 ​ Echo 社区贡献 ​ Prometheus 中间件为</description></item><item><title>测试</title><link>https://before80.github.io/go_docs/echo/guide/testing/</link><pubDate>Sun, 09 Jul 2023 21:52:21 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/guide/testing/</guid><description>Testing - 测试 原文：https://echo.labstack.com/docs/testing 测试处理程序 GET /users/:id Handler below retrieves user by id from the database. If user is not found it returns 404</description></item><item><title>coding</title><link>https://before80.github.io/go_docs/comm/Cpp/basic/coding/</link><pubDate>Mon, 19 Aug 2024 09:43:15 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Cpp/basic/coding/</guid><description/></item><item><title>coding</title><link>https://before80.github.io/go_docs/comm/Csharp/basic/coding/</link><pubDate>Mon, 19 Aug 2024 09:43:15 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Csharp/basic/coding/</guid><description/></item><item><title>coding</title><link>https://before80.github.io/go_docs/comm/Erlang/basic/coding/</link><pubDate>Mon, 19 Aug 2024 09:43:15 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Erlang/basic/coding/</guid><description/></item><item><title>coding</title><link>https://before80.github.io/go_docs/comm/Go/basic/coding/</link><pubDate>Mon, 19 Aug 2024 09:43:15 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Go/basic/coding/</guid><description/></item><item><title>coding</title><link>https://before80.github.io/go_docs/comm/Java/basic/coding/</link><pubDate>Mon, 19 Aug 2024 09:43:15 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Java/basic/coding/</guid><description/></item><item><title>coding</title><link>https://before80.github.io/go_docs/comm/Js/basic/coding/</link><pubDate>Mon, 19 Aug 2024 09:43:15 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Js/basic/coding/</guid><description/></item><item><title>coding</title><link>https://before80.github.io/go_docs/comm/PHP/basic/coding/</link><pubDate>Mon, 19 Aug 2024 09:43:15 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/PHP/basic/coding/</guid><description/></item><item><title>coding</title><link>https://before80.github.io/go_docs/comm/Python/basic/coding/</link><pubDate>Mon, 19 Aug 2024 09:43:15 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Python/basic/coding/</guid><description/></item><item><title>coding</title><link>https://before80.github.io/go_docs/comm/Ruby/basic/coding/</link><pubDate>Mon, 19 Aug 2024 09:43:15 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ruby/basic/coding/</guid><description/></item><item><title>coding</title><link>https://before80.github.io/go_docs/comm/Rust/basic/coding/</link><pubDate>Mon, 19 Aug 2024 09:43:15 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Rust/basic/coding/</guid><description/></item><item><title>coding</title><link>https://before80.github.io/go_docs/comm/Ts/basic/coding/</link><pubDate>Mon, 19 Aug 2024 09:43:15 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ts/basic/coding/</guid><description/></item><item><title>关键字</title><link>https://before80.github.io/go_docs/asu/basic/keyword/</link><pubDate>Sat, 13 Jul 2024 10:56:35 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/keyword/</guid><description>​ Go目前有25个关键字。 break default func interface select case defer go map struct chan else goto package switch const fallthrough if range type continue for import return var</description></item><item><title>Idempotency</title><link>https://before80.github.io/go_docs/fiber/API/Middleware/Idempotency/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/Middleware/Idempotency/</guid><description>原文： https://docs.gofiber.io/api/middleware/idempotency Idempotency 幂等性 Idempotency middleware for Fiber allows for fault-tolerant APIs where duplicate requests — for example due to networking issues on the client-side — do not erroneously cause the same action performed multiple times on the server-side. ​ Fiber 的幂等性中间件允许容错 API，其中重复请求（例如由</description></item><item><title>proxy</title><link>https://before80.github.io/go_docs/echo/middleware/proxy/</link><pubDate>Sun, 09 Jul 2023 21:56:40 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/middleware/proxy/</guid><description>Proxy 原文：https://echo.labstack.com/docs/middleware/proxy Proxy provides an HTTP/WebSocket reverse proxy middleware. It forwards a request to upstream server using a configured load balancing</description></item><item><title>datastructures</title><link>https://before80.github.io/go_docs/comm/Cpp/basic/datastructures/</link><pubDate>Mon, 19 Aug 2024 09:44:26 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Cpp/basic/datastructures/</guid><description/></item><item><title>datastructures</title><link>https://before80.github.io/go_docs/comm/Csharp/basic/datastructures/</link><pubDate>Mon, 19 Aug 2024 09:44:26 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Csharp/basic/datastructures/</guid><description/></item><item><title>datastructures</title><link>https://before80.github.io/go_docs/comm/Erlang/basic/datastructures/</link><pubDate>Mon, 19 Aug 2024 09:44:26 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Erlang/basic/datastructures/</guid><description/></item><item><title>datastructures</title><link>https://before80.github.io/go_docs/comm/Java/basic/datastructures/</link><pubDate>Mon, 19 Aug 2024 09:44:26 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Java/basic/datastructures/</guid><description/></item><item><title>datastructures</title><link>https://before80.github.io/go_docs/comm/Js/basic/datastructures/</link><pubDate>Mon, 19 Aug 2024 09:44:26 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Js/basic/datastructures/</guid><description/></item><item><title>datastructures</title><link>https://before80.github.io/go_docs/comm/PHP/basic/datastructures/</link><pubDate>Mon, 19 Aug 2024 09:44:26 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/PHP/basic/datastructures/</guid><description/></item><item><title>datastructures</title><link>https://before80.github.io/go_docs/comm/Python/basic/datastructures/</link><pubDate>Mon, 19 Aug 2024 09:44:26 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Python/basic/datastructures/</guid><description/></item><item><title>datastructures</title><link>https://before80.github.io/go_docs/comm/Ruby/basic/datastructures/</link><pubDate>Mon, 19 Aug 2024 09:44:26 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ruby/basic/datastructures/</guid><description/></item><item><title>datastructures</title><link>https://before80.github.io/go_docs/comm/Rust/basic/datastructures/</link><pubDate>Mon, 19 Aug 2024 09:44:26 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Rust/basic/datastructures/</guid><description/></item><item><title>datastructures</title><link>https://before80.github.io/go_docs/comm/Ts/basic/datastructures/</link><pubDate>Mon, 19 Aug 2024 09:44:26 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ts/basic/datastructures/</guid><description/></item><item><title>Keyauth</title><link>https://before80.github.io/go_docs/fiber/API/Middleware/Keyauth/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/Middleware/Keyauth/</guid><description>原文： https://docs.gofiber.io/api/middleware/keyauth Keyauth Key auth middleware provides a key based authentication. ​ 密钥认证中间件提供基于密钥的认证。 Signatures 签名 1 func New(config ...Config) fiber.Handler Examples 示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28</description></item><item><title>rate-limiter</title><link>https://before80.github.io/go_docs/echo/middleware/rate-limiter/</link><pubDate>Sun, 09 Jul 2023 21:56:56 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/middleware/rate-limiter/</guid><description>Rate Limiter 原文：https://echo.labstack.com/docs/middleware/rate-limiter RateLimiter provides a Rate Limiter middleware for limiting the amount of</description></item><item><title>io</title><link>https://before80.github.io/go_docs/comm/Cpp/basic/io/</link><pubDate>Mon, 19 Aug 2024 09:49:58 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Cpp/basic/io/</guid><description/></item><item><title>io</title><link>https://before80.github.io/go_docs/comm/Csharp/basic/io/</link><pubDate>Mon, 19 Aug 2024 09:49:58 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Csharp/basic/io/</guid><description/></item><item><title>io</title><link>https://before80.github.io/go_docs/comm/Erlang/basic/io/</link><pubDate>Mon, 19 Aug 2024 09:49:58 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Erlang/basic/io/</guid><description/></item><item><title>io</title><link>https://before80.github.io/go_docs/comm/Go/basic/io/</link><pubDate>Mon, 19 Aug 2024 09:49:58 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Go/basic/io/</guid><description/></item><item><title>io</title><link>https://before80.github.io/go_docs/comm/Java/basic/io/</link><pubDate>Mon, 19 Aug 2024 09:49:58 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Java/basic/io/</guid><description/></item><item><title>io</title><link>https://before80.github.io/go_docs/comm/Js/basic/io/</link><pubDate>Mon, 19 Aug 2024 09:49:58 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Js/basic/io/</guid><description/></item><item><title>io</title><link>https://before80.github.io/go_docs/comm/PHP/basic/io/</link><pubDate>Mon, 19 Aug 2024 09:49:58 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/PHP/basic/io/</guid><description/></item><item><title>io</title><link>https://before80.github.io/go_docs/comm/Python/basic/io/</link><pubDate>Mon, 19 Aug 2024 09:49:58 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Python/basic/io/</guid><description/></item><item><title>io</title><link>https://before80.github.io/go_docs/comm/Ruby/basic/io/</link><pubDate>Mon, 19 Aug 2024 09:49:58 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ruby/basic/io/</guid><description/></item><item><title>io</title><link>https://before80.github.io/go_docs/comm/Rust/basic/io/</link><pubDate>Mon, 19 Aug 2024 09:49:58 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Rust/basic/io/</guid><description/></item><item><title>io</title><link>https://before80.github.io/go_docs/comm/Ts/basic/io/</link><pubDate>Mon, 19 Aug 2024 09:49:58 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/Ts/basic/io/</guid><description/></item><item><title>Limiter</title><link>https://before80.github.io/go_docs/fiber/API/Middleware/Limiter/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/Middleware/Limiter/</guid><description>原文： https://docs.gofiber.io/api/middleware/limiter Limiter Limiter middleware for Fiber that is used to limit repeat requests to public APIs and/or endpoints such as password reset. It is also useful for API clients, web crawling, or other tasks that need to be throttled. ​ Fiber 的限流器中间件用于限制对公共 API 和/或端点的重复请求，</description></item><item><title>recover</title><link>https://before80.github.io/go_docs/echo/middleware/recover/</link><pubDate>Sun, 09 Jul 2023 21:57:18 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/middleware/recover/</guid><description>Recover 原文：https://echo.labstack.com/docs/middleware/recover Recover middleware recovers from panics anywhere in the chain, prints stack trace and handles the control to</description></item><item><title>Logger</title><link>https://before80.github.io/go_docs/fiber/API/Middleware/Logger/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/Middleware/Logger/</guid><description>原文： https://docs.gofiber.io/api/middleware/logger Logger 日志记录器 Logger middleware for Fiber that logs HTTP request/response details. ​ Fiber 的日志记录器中间件记录 HTTP 请求/响应详细信息。 Signatures 签名 1 func New(config ...Config) fiber.Handler Examples 示例 Import the middleware package that is part of the Fiber web framework ​ 导入 Fiber</description></item><item><title>redirect</title><link>https://before80.github.io/go_docs/echo/middleware/redirect/</link><pubDate>Sun, 09 Jul 2023 21:57:33 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/middleware/redirect/</guid><description>Redirect 原文：https://echo.labstack.com/docs/middleware/redirect HTTPS Redirect HTTPS redirect middleware redirects http requests to https. For example, http://labstack.com will be redirected</description></item><item><title>Monitor</title><link>https://before80.github.io/go_docs/fiber/API/Middleware/Monitor/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/Middleware/Monitor/</guid><description>原文： https://docs.gofiber.io/api/middleware/monitor Monitor 监视器 Monitor middleware for Fiber that reports server metrics, inspired by express-status-monitor ​ 受 express-status-monitor 启发的 Fiber 服务器指标报告监视中间件 CAUTION 注意 Monitor is still in beta, API might change in the future! ​ Monitor 仍处于测试阶段，API 可能会在未</description></item><item><title>request-id</title><link>https://before80.github.io/go_docs/echo/middleware/request-id/</link><pubDate>Sun, 09 Jul 2023 21:57:41 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/middleware/request-id/</guid><description>Request ID 原文：https://echo.labstack.com/docs/middleware/request-id Request ID middleware generates a unique id for a request. Usage 1 e.Use(middleware.RequestID())</description></item><item><title>rune</title><link>https://before80.github.io/go_docs/asu/basic/types/rune/</link><pubDate>Sat, 13 Jul 2024 14:12:58 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/types/rune/</guid><description/></item><item><title>Pprof</title><link>https://before80.github.io/go_docs/fiber/API/Middleware/Pprof/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/Middleware/Pprof/</guid><description>原文： https://docs.gofiber.io/api/middleware/pprof Pprof Pprof middleware for Fiber that serves via its HTTP server runtime profiling data in the format expected by the pprof visualization tool. The package is typically only imported for the side effect of registering its HTTP handlers. The handled paths all begin with /debug/pprof/. ​ Fiber 的 Pprof 中间件，通过其 HTTP 服务器运行时配置文</description></item><item><title>rewrite</title><link>https://before80.github.io/go_docs/echo/middleware/rewrite/</link><pubDate>Sun, 09 Jul 2023 21:57:48 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/middleware/rewrite/</guid><description>Rewrite 原文：https://echo.labstack.com/docs/middleware/rewrite Rewrite middleware allows to rewrite an URL path based on provided rules. It can be helpful for</description></item><item><title>Proxy</title><link>https://before80.github.io/go_docs/fiber/API/Middleware/Proxy/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/Middleware/Proxy/</guid><description>原文： https://docs.gofiber.io/api/middleware/proxy Proxy 代理 Proxy middleware for Fiber that allows you to proxy requests to multiple servers. ​ Fiber 的代理中间件，允许您将请求代理到多个服务器。 Signatures 签名 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // Balancer create a load balancer among</description></item><item><title>secure</title><link>https://before80.github.io/go_docs/echo/middleware/secure/</link><pubDate>Sun, 09 Jul 2023 21:57:56 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/middleware/secure/</guid><description>Secure 原文：https://echo.labstack.com/docs/middleware/secure Secure middleware provides protection against cross-site scripting (XSS) attack, content type sniffing, clickjacking, insecure connection and other code</description></item><item><title>Recover</title><link>https://before80.github.io/go_docs/fiber/API/Middleware/Recover/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/Middleware/Recover/</guid><description>原文： https://docs.gofiber.io/api/middleware/recover Recover Recover middleware for Fiber that recovers from panics anywhere in the stack chain and handles the control to the centralized ErrorHandler. ​ Fiber 的恢复中间件，可从堆栈链中的任何位置恢复恐慌，并将控制权交给集中的 ErrorHand</description></item><item><title>session</title><link>https://before80.github.io/go_docs/echo/middleware/session/</link><pubDate>Sun, 09 Jul 2023 21:58:02 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/middleware/session/</guid><description>Session 原文：https://echo.labstack.com/docs/middleware/session Session middleware facilitates HTTP session management backed by gorilla sessions. The default implementation provides cookie and filesystem</description></item><item><title>Redirect</title><link>https://before80.github.io/go_docs/fiber/API/Middleware/Redirect/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/Middleware/Redirect/</guid><description>原文： https://docs.gofiber.io/api/middleware/redirect Redirect 重定向 Redirection middleware for Fiber. ​ Fiber 的重定向中间件。 Signatures 签名 1 func New(config ...Config) fiber.Handler Examples 示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 package main import ( &amp;#34;github.com/gofiber/fiber/v2&amp;#34; &amp;#34;github.com/gofiber/fiber/v2/middleware/redirect&amp;#34; ) func main() {</description></item><item><title>static</title><link>https://before80.github.io/go_docs/echo/middleware/static/</link><pubDate>Sun, 09 Jul 2023 21:58:17 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/middleware/static/</guid><description>Static 原文：https://echo.labstack.com/docs/middleware/static Static middleware can be used to serve static files from the provided root directory. Usage 1 2 e</description></item><item><title>RequestID</title><link>https://before80.github.io/go_docs/fiber/API/Middleware/RequestID/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/Middleware/RequestID/</guid><description>原文： https://docs.gofiber.io/api/middleware/requestid RequestID RequestID middleware for Fiber that adds an identifier to the response. ​ RequestID 中间件，为 Fiber 添加一个标识符到响应中。 Signatures 签名 1 func New(config ...Config) fiber.Handler Examples 示例 Import the middleware package that is part of the Fiber web framework ​ 导入 Fiber Web 框架的一部分</description></item><item><title>timeout</title><link>https://before80.github.io/go_docs/echo/middleware/timeout/</link><pubDate>Sun, 09 Jul 2023 21:58:27 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/middleware/timeout/</guid><description>Timeout 原文：https://echo.labstack.com/docs/middleware/timeout Timeout middleware is used to timeout at a long running operation within a predefined period. Usage 1</description></item><item><title>常量</title><link>https://before80.github.io/go_docs/asu/basic/constant/</link><pubDate>Sat, 13 Jul 2024 10:56:49 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/constant/</guid><description>常量 # 常量 ## 常量名 ## 常量值 ### 布尔字面量 - true（也是预算声明的标识符） - false（也是预算声明的标识符） ### 整数字面量 ### 浮点数字面量 ### 复数</description></item><item><title>Rewrite</title><link>https://before80.github.io/go_docs/fiber/API/Middleware/Rewrite/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/Middleware/Rewrite/</guid><description>原文： https://docs.gofiber.io/api/middleware/rewrite Rewrite 重写 Rewrite middleware rewrites the URL path based on provided rules. It can be helpful for backward compatibility or just creating cleaner and more descriptive links. ​ 重写中间件根据提供的规则重写 URL 路径。它有助于向后兼容或只是创建更简洁、更具</description></item><item><title>trailing-slash</title><link>https://before80.github.io/go_docs/echo/middleware/trailing-slash/</link><pubDate>Sun, 09 Jul 2023 21:58:43 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/middleware/trailing-slash/</guid><description>Trailing Slash 原文：https://echo.labstack.com/docs/middleware/trailing-slash Add Trailing Slash Add trailing slash middleware adds a</description></item><item><title>Session</title><link>https://before80.github.io/go_docs/fiber/API/Middleware/Session/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/Middleware/Session/</guid><description>原文： https://docs.gofiber.io/api/middleware/session Session Session middleware for Fiber. ​ Fiber 的会话中间件。 NOTE 注意 This middleware uses our Storage package to support various databases through a single interface. The default configuration for this middleware saves data to memory, see the examples below for other databases. ​ 此中间件使用我们的存储包通过单个接</description></item><item><title>Skip</title><link>https://before80.github.io/go_docs/fiber/API/Middleware/Skip/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/Middleware/Skip/</guid><description>原文： https://docs.gofiber.io/api/middleware/skip Skip 跳过 Skip middleware for Fiber that skips a wrapped handler if a predicate is true. ​ Fiber 的跳过中间件，如果谓词为真，则跳过包装的处理程序。 Signatures 签名 1 func New(handler fiber.Handler, exclude func(c *fiber.Ctx) bool) fiber.Handler Examples 示例 Import the middleware package that is part</description></item><item><title>Timeout</title><link>https://before80.github.io/go_docs/fiber/API/Middleware/Timeout/</link><pubDate>Mon, 05 Feb 2024 09:14:15 +0800</pubDate><guid>https://before80.github.io/go_docs/fiber/API/Middleware/Timeout/</guid><description>原文： https://docs.gofiber.io/api/middleware/timeout Timeout 超时 There exist two distinct implementations of timeout middleware Fiber. ​ 存在两种不同的 Fiber 超时中间件实现。 New Wraps a fiber.Handler with a timeout. If the handler takes longer than the given duration to return, the timeout error is set and forwarded to the centralized ErrorHandler. ​ 用超时包装 fiber.Handler 。</description></item><item><title>模糊测试</title><link>https://before80.github.io/go_docs/asu/basic/testings/fuzz/</link><pubDate>Sat, 13 Jul 2024 14:22:24 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/testings/fuzz/</guid><description/></item><item><title>string</title><link>https://before80.github.io/go_docs/asu/basic/types/string/</link><pubDate>Sat, 13 Jul 2024 14:04:51 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/types/string/</guid><description>字符串元素的类型是？ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 package main import &amp;#34;fmt&amp;#34; func main() { s1 := &amp;#34;你好世界！你好中国&amp;#34; s := s1[0] fmt.Printf(&amp;#34;%v,%c,%q,%b,%T,%T\n&amp;#34;, s, s, s, s, s, &amp;amp;s) s2 := &amp;#34;Hello World! Hello</description></item><item><title>变量</title><link>https://before80.github.io/go_docs/asu/basic/variable/</link><pubDate>Sat, 13 Jul 2024 10:57:00 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/variable/</guid><description/></item><item><title>作用域</title><link>https://before80.github.io/go_docs/asu/basic/scope/</link><pubDate>Sat, 13 Jul 2024 10:58:24 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/scope/</guid><description/></item><item><title>array</title><link>https://before80.github.io/go_docs/asu/basic/types/array/</link><pubDate>Sat, 13 Jul 2024 14:04:33 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/types/array/</guid><description>说明 ​ mfp包来自：github.com/before80/utils/mfp 数组的底层数据结构 ​ 在Go语言中，数组的底层定义主要涉及到Go</description></item><item><title>表达式</title><link>https://before80.github.io/go_docs/asu/basic/expression/</link><pubDate>Sat, 13 Jul 2024 10:59:08 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/expression/</guid><description/></item><item><title>go help build</title><link>https://before80.github.io/go_docs/cmd/gohelpbuild/</link><pubDate>Sat, 24 Feb 2024 11:12:32 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpbuild/</guid><description>usage: go build [-o output] [build flags] [packages] ​ 用法：go build [-o output] [build flags] [packages] Build compiles the packages named by the import paths, along with their dependencies, but it does not install the results. ​ build 编译由导入路径命名的包及其依赖项，但不会安装结果。 If the arguments</description></item><item><title>go help buildconstraint</title><link>https://before80.github.io/go_docs/cmd/gohelpbuildconstraint/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpbuildconstraint/</guid><description>A build constraint, also known as a build tag, is a condition under which a file should be included in the package. Build constraints are given by a line comment that begins ​ 构建约束，也称为构建标签，是在包中应包含文件的条件。构建约束由以 //go:build Constraints may appear in</description></item><item><title>go help buildmode</title><link>https://before80.github.io/go_docs/cmd/gohelpbuildmode/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpbuildmode/</guid><description>​ The &amp;lsquo;go build&amp;rsquo; and &amp;lsquo;go install&amp;rsquo; commands take a -buildmode argument which indicates which kind of object file is to be built. Currently supported values are: ​ &amp;lsquo;go build&amp;rsquo; 和 &amp;lsquo;go install&amp;rsquo; 命令接受一个 -buildmode 参数，指示要构建哪种类型的目标文件。当前支持的值有： -buildmode=archive ​ Build the</description></item><item><title>语句</title><link>https://before80.github.io/go_docs/asu/basic/statement/</link><pubDate>Sat, 13 Jul 2024 10:59:45 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/statement/</guid><description/></item><item><title>slice</title><link>https://before80.github.io/go_docs/asu/basic/types/slice/</link><pubDate>Sat, 13 Jul 2024 14:04:45 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/types/slice/</guid><description/></item><item><title>泛型</title><link>https://before80.github.io/go_docs/asu/basic/generic/</link><pubDate>Sat, 13 Jul 2024 11:13:29 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/generic/</guid><description/></item><item><title>go help c</title><link>https://before80.github.io/go_docs/cmd/gohelpc/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpc/</guid><description>​ There are two different ways to call between Go and C/C++ code. ​ 有两种在 Go 与 C/C++ 代码之间进行调用的方法。 The first is the cgo tool, which is part of the Go distribution. For information on how to use it see the cgo documentation (go doc cmd/cgo). ​ 第一种是 cgo 工具，它</description></item><item><title>go help cache</title><link>https://before80.github.io/go_docs/cmd/gohelpcache/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpcache/</guid><description>​ The go command caches build outputs for reuse in future builds. The default location for cache data is a subdirectory named go-build in the standard user cache directory for the current operating system. Setting the GOCACHE environment variable overrides this default,and running &amp;lsquo;go env GOCACHE&amp;rsquo; prints the current cache directory. ​ go 命令会对构建输出进行缓存，以便在将</description></item><item><title>go help env</title><link>https://before80.github.io/go_docs/cmd/gohelpenv/</link><pubDate>Sat, 24 Feb 2024 10:56:10 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpenv/</guid><description>usage: go env [-json] [-u] [-w] [var &amp;hellip;] Env prints Go environment information. ​ Env 打印 Go 环境信息。 By default env prints information as a shell script (on Windows, a batch file). If one or more variable names is given as arguments, env prints the value of each named variable on its own line. ​ 默认情况下，env 将</description></item><item><title>go help environment</title><link>https://before80.github.io/go_docs/cmd/gohelpenvironment/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpenvironment/</guid><description>​ The go command and the tools it invokes consult environment variables for configuration. If an environment variable is unset or empty, the go command uses a sensible default setting. To see the effective setting of the variable &amp;lt;NAME&amp;gt;, run &amp;lsquo;go env &amp;lt;NAME&amp;gt;&amp;rsquo;. To change the default setting, run &amp;lsquo;go env -w &amp;lt;NAME&amp;gt;=&amp;lt;VALUE&amp;gt;&amp;rsquo;. Defaults changed using &amp;lsquo;go env -w&amp;rsquo; are recorded in a Go environment configuration file stored in the</description></item><item><title>go help filetype</title><link>https://before80.github.io/go_docs/cmd/gohelpfiletype/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpfiletype/</guid><description>extensions The go command examines the contents of a restricted set of files in each directory. It identifies which files to examine based on the extension of the file name. These extensions are: ​ go 命令检查每个目录中一组受限制的文件的内容。它根据文件名的扩展名来识别要</description></item><item><title>init函数</title><link>https://before80.github.io/go_docs/asu/basic/initfunc/</link><pubDate>Sat, 13 Jul 2024 11:12:16 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/initfunc/</guid><description/></item><item><title>go help go.mod</title><link>https://before80.github.io/go_docs/cmd/gohelpgomod/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpgomod/</guid><description>​ A module version is defined by a tree of source files, with a go.mod file in its root. When the go command is run, it looks in the current directory and then successive parent directories to find the go.mod marking the root of the main (current) module. ​ 模块版本由一组源文件定义，其中包含根目录中</description></item><item><title>go help gopath</title><link>https://before80.github.io/go_docs/cmd/gohelpgopath/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpgopath/</guid><description>​ The Go path is used to resolve import statements. It is implemented by and documented in the go/build package. ​ Go路径用于解析导入语句。它由go/build包实现和记录。 The GOPATH environment variable lists places to look for Go code. On Unix, the value is a colon-separated string.</description></item><item><title>go help gopath-get</title><link>https://before80.github.io/go_docs/cmd/gohelpgopath-get/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpgopath-get/</guid><description>​ The &amp;lsquo;go get&amp;rsquo; command changes behavior depending on whether the go command is running in module-aware mode or legacy GOPATH mode. ​ &amp;lsquo;go get&amp;rsquo;命令的行为会根据go命令是在模块感知模式还是传统的GOPATH模式下运行</description></item><item><title>go help proxy</title><link>https://before80.github.io/go_docs/cmd/gohelpgoproxy/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpgoproxy/</guid><description>​ A Go module proxy is any web server that can respond to GET requests for URLs of a specified form. The requests have no query parameters, so even a site serving from a fixed file system (including a file:/// URL) can be a module proxy. ​ Go模块代理是可以响应指定形式的GET请求的任</description></item><item><title>go help importpath</title><link>https://before80.github.io/go_docs/cmd/gohelpimportpath/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpimportpath/</guid><description>​ An import path (see &amp;lsquo;go help packages&amp;rsquo;) denotes a package stored in the local file system. In general, an import path denotes either a standard package (such as &amp;ldquo;unicode/utf8&amp;rdquo;) or a package found in one of the work spaces (For more details see: &amp;lsquo;go help gopath&amp;rsquo;). ​ 导入路径（参见&amp;rsquo;go help packa</description></item><item><title>go help list</title><link>https://before80.github.io/go_docs/cmd/gohelplist/</link><pubDate>Thu, 18 Jul 2024 12:50:51 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelplist/</guid><description>usage: go list [-f format] [-json] [-m] [list flags] [build flags] [packages] List lists the named packages, one per line. The most commonly-used flags are -f and -json, which control the form of the output printed for each package. Other list flags, documented below, control more specific details. The default output shows the package import path: 1 2 3 4 bytes encoding/json github.com/gorilla/mux golang.org/x/net/html The -f flag specifies an alternate</description></item><item><title>map</title><link>https://before80.github.io/go_docs/asu/basic/types/map/</link><pubDate>Sat, 13 Jul 2024 14:05:04 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/types/map/</guid><description>关于map不得不知的知识点 map类型的默认值是nil； 1 2 3 var players map[string]int8 // map[], map[string]int8, 0, true fmt.Printf(&amp;#34;%[1]v, %[1]T, %d, %t\n&amp;#34;, players, len(players), players == nil) 当从map中请求不存在的键时，返回的是map值</description></item><item><title>内置函数</title><link>https://before80.github.io/go_docs/asu/basic/builtinfunc/</link><pubDate>Sat, 13 Jul 2024 11:00:48 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/builtinfunc/</guid><description>目前有18个 append() 定义 1 func append(slice []Type, elems ...Type) []Type 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 PS F:\Hugos\go_docs&amp;gt; go doc builtin.append package builtin // import &amp;#34;builtin&amp;#34; func append(slice []Type, elems ...Type) []Type The append built-in function appends elements to the end of a slice. If it has sufficient capacity, the destination is resliced</description></item><item><title>go help module-auth</title><link>https://before80.github.io/go_docs/cmd/gohelpmodule-auth/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpmodule-auth/</guid><description>​ When the go command downloads a module zip file or go.mod file into the module cache, it computes a cryptographic hash and compares it with a known value to verify the file hasn&amp;rsquo;t changed since it was first downloaded. Known hashes are stored in a file in the module root directory named go.sum. Hashes may also be downloaded from the checksum database depending on the values of GOSUMDB, GOPRIVATE,</description></item><item><title>pointer</title><link>https://before80.github.io/go_docs/asu/basic/types/pointer/</link><pubDate>Sat, 13 Jul 2024 14:14:10 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/types/pointer/</guid><description/></item><item><title>go help module-get</title><link>https://before80.github.io/go_docs/cmd/gohelpmodule-get/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpmodule-get/</guid><description>​ The &amp;lsquo;go get&amp;rsquo; command changes behavior depending on whether the go command is running in module-aware mode or legacy GOPATH mode. This help text, accessible as &amp;lsquo;go help module-get&amp;rsquo; even in legacy GOPATH mode, describes &amp;lsquo;go get&amp;rsquo; as it operates in module-aware mode. ​ &amp;lsquo;go get&amp;rsquo;命令的行为取决于go命令是在</description></item><item><title>go help modules</title><link>https://before80.github.io/go_docs/cmd/gohelpmodules/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpmodules/</guid><description>​ A module is a collection of packages that are released, versioned, and distributed together. Modules may be downloaded directly from version control repositories or from module proxy servers. ​ 模块是一组一起发布、进行版本管理和分发的包。可以直接从版本控制存储库或模块代理服</description></item><item><title>go help packages</title><link>https://before80.github.io/go_docs/cmd/gohelppackages/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelppackages/</guid><description>​ Many commands apply to a set of packages: ​ 许多命令适用于一组包： 1 go &amp;lt;action&amp;gt; [packages] Usually, [packages] is a list of import paths. ​ 通常，[packages] 是一组导入路径。 An import path that is a rooted path or that begins with a . or</description></item><item><title>go help private</title><link>https://before80.github.io/go_docs/cmd/gohelpprivate/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpprivate/</guid><description>​ The go command defaults to downloading modules from the public Go module mirror at proxy.golang.org. It also defaults to validating downloaded modules, regardless of source, against the public Go checksum database at sum.golang.org. These defaults work well for publicly available source code. ​ go 命令默认从公共 Go 模块镜像 proxy.golang.org 下载模块。它还默认使用公</description></item><item><title>defer、panic、recover</title><link>https://before80.github.io/go_docs/asu/basic/deferpanicrecover/</link><pubDate>Sat, 13 Jul 2024 11:12:06 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/deferpanicrecover/</guid><description/></item><item><title>go help test</title><link>https://before80.github.io/go_docs/cmd/gohelptest/</link><pubDate>Sat, 24 Feb 2024 10:57:59 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelptest/</guid><description>usage: go test [build/test flags] [packages] [build/test flags &amp;amp; test binary flags] ‘Go test’ automates testing the packages named by the import paths. ​ “go test” 自动化测试由导入路径命名的包。 It prints a summary of the test results in the format: ​ 它以以下格</description></item><item><title>go help testflag</title><link>https://before80.github.io/go_docs/cmd/gohelptestflag/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelptestflag/</guid><description>The &amp;lsquo;go test&amp;rsquo; command takes both flags that apply to &amp;lsquo;go test&amp;rsquo; itself and flags that apply to the resulting test binary. ​ go test命令既可以接受适用于 go test本身的标志，也可以接受适用于生成的测试二进制文件的标志</description></item><item><title>go help testfunc</title><link>https://before80.github.io/go_docs/cmd/gohelptestfunc/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelptestfunc/</guid><description>​ The &amp;lsquo;go test&amp;rsquo; command expects to find test, benchmark, and example functions in the &amp;ldquo;*_test.go&amp;rdquo; files corresponding to the package under test. ​ go test 命令期望在与待测试的包对应的 &amp;ldquo;*_test.go&amp;rdquo; 文件中找到测试、基准测试和示例函数。 A test function is one named TestXxx (where Xxx does not</description></item><item><title>go help vcs</title><link>https://before80.github.io/go_docs/cmd/gohelpvcs/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpvcs/</guid><description>​ The &amp;lsquo;go get&amp;rsquo; command can run version control commands like git to download imported code. This functionality is critical to the decentralized Go package ecosystem, in which code can be imported from any server, but it is also a potential security problem, if a malicious server finds a way to cause the invoked version control command to run unintended code. ​ go get 命令可以运行</description></item><item><title>struct</title><link>https://before80.github.io/go_docs/asu/basic/types/struct/</link><pubDate>Sat, 13 Jul 2024 14:05:18 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/types/struct/</guid><description/></item><item><title>包</title><link>https://before80.github.io/go_docs/asu/basic/packages/</link><pubDate>Sat, 13 Jul 2024 10:58:11 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/packages/</guid><description/></item><item><title>格式化与打印</title><link>https://before80.github.io/go_docs/asu/basic/fmtpnt/</link><pubDate>Sat, 13 Jul 2024 10:57:58 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/fmtpnt/</guid><description/></item><item><title>interface</title><link>https://before80.github.io/go_docs/asu/basic/types/interface/</link><pubDate>Sat, 13 Jul 2024 14:05:59 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/types/interface/</guid><description/></item><item><title>2024 下半年 Go 开发者调查结果</title><link>https://before80.github.io/go_docs/goBlog/2024/GoDeveloperSurvey2024H2Results/</link><pubDate>Mon, 31 Mar 2025 13:43:10 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2024/GoDeveloperSurvey2024H2Results/</guid><description>原文：https://go.dev/blog/survey2024-h2-results Go Developer Survey 2024 H2 Results - 2024 下半年 Go 开发者调查结果 Alice Merrick 20 December 2024 2024 年</description></item><item><title>o Protobuf：全新的 Opaque API</title><link>https://before80.github.io/go_docs/goBlog/2024/GoProtobufTheNewOpaqueAPI/</link><pubDate>Mon, 31 Mar 2025 11:34:43 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2024/GoProtobufTheNewOpaqueAPI/</guid><description>原文：https://go.dev/blog/protobuf-opaque Go Protobuf: The new Opaque API - Go Protobuf：全新的 Opaque API Michael Stapelberg 16 December 2024 2024年</description></item><item><title>Go迎来15周年</title><link>https://before80.github.io/go_docs/goBlog/2024/GoTurns15/</link><pubDate>Mon, 31 Mar 2025 11:17:33 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2024/GoTurns15/</guid><description>原文：https://go.dev/blog/15years Go Turns 15 Austin Clements, for the Go team ​ Go团队的Austin Clements 11 November 2024 ​ 2024年11月11日 Thanks to Renee</description></item><item><title>断言</title><link>https://before80.github.io/go_docs/asu/basic/assertion/</link><pubDate>Sat, 13 Jul 2024 11:01:58 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/assertion/</guid><description/></item><item><title>名字（别名）中有什么？</title><link>https://before80.github.io/go_docs/goBlog/2024/WhatIsInAnAliasName/</link><pubDate>Thu, 10 Oct 2024 14:40:47 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2024/WhatIsInAnAliasName/</guid><description>What&amp;rsquo;s in an (Alias) Name? - 名字（别名）中有什么？ 原文：https://go.dev/blog/alias-names Robert Griesemer 17 September 2024 2024年9月17日 This post is about</description></item><item><title>在 Go 中构建基于LLM的应用程序</title><link>https://before80.github.io/go_docs/goBlog/2024/BuildingLLM-poweredApplicationsInGo/</link><pubDate>Thu, 10 Oct 2024 14:39:16 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2024/BuildingLLM-poweredApplicationsInGo/</guid><description>Building LLM-powered applications in Go - 在 Go 中构建基于LLM的应用程序 原文：https://go.dev/blog/llmpowered Eli Bendersky 12 September 2024 2024年9月12日 As</description></item><item><title>分享你对 Go 开发的反馈 - 2</title><link>https://before80.github.io/go_docs/goBlog/2024/ShareYourFeedbackAboutDevelopingWithGo2/</link><pubDate>Thu, 10 Oct 2024 15:03:35 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2024/ShareYourFeedbackAboutDevelopingWithGo2/</guid><description>Share your feedback about developing with Go - 分享你对 Go 开发的反馈 原文：https://go.dev/blog/survey2024-h2 Alice Merrick, for the Go team 9 September 2024 Alice Merric</description></item><item><title>Go 1.23及以后版本的遥测</title><link>https://before80.github.io/go_docs/goBlog/2024/TelemetryInGo1_23AndBeyond/</link><pubDate>Fri, 06 Sep 2024 12:20:29 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2024/TelemetryInGo1_23AndBeyond/</guid><description>Telemetry in Go 1.23 and beyond - Go 1.23及以后版本的遥测 原文：https://go.dev/blog/gotelemetry Robert Findley 3 September 2024 罗伯特·芬德利 2024</description></item><item><title>新的 unique 包</title><link>https://before80.github.io/go_docs/goBlog/2024/NewUniquePackage/</link><pubDate>Fri, 06 Sep 2024 12:19:59 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2024/NewUniquePackage/</guid><description>New unique package - 新的 unique 包 原文：https://go.dev/blog/unique Michael Knyszek 27 August 2024 作者：Michael Knyszek 日期：2024 年 8 月 27 日 The standard library of Go</description></item><item><title>chan</title><link>https://before80.github.io/go_docs/asu/basic/types/chan/</link><pubDate>Sat, 13 Jul 2024 14:05:11 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/types/chan/</guid><description>会触发panic的通道操作 关闭值为nil的通道 1 2 3 4 5 6 7 8 9 10 11 12 13 14 package main import &amp;#34;fmt&amp;#34; func main() { defer func() { if r := recover(); r != nil { fmt.Println(&amp;#34;panic -&amp;gt; &amp;#34;, r) // panic -&amp;gt; close of nil channel } }() var ch</description></item><item><title>正则表达式</title><link>https://before80.github.io/go_docs/asu/basic/regexp/</link><pubDate>Sat, 13 Jul 2024 11:04:37 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/regexp/</guid><description/></item><item><title>遍历函数类型</title><link>https://before80.github.io/go_docs/goBlog/2024/RangeOverFunctionTypes/</link><pubDate>Fri, 06 Sep 2024 12:19:40 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2024/RangeOverFunctionTypes/</guid><description>Range Over Function Types - 遍历函数类型 原文：https://go.dev/blog/range-functions Ian Lance Taylor 20 August 2024 作者：Ian Lance Taylor 日期：2024</description></item><item><title>Go 1.23 发布！</title><link>https://before80.github.io/go_docs/goBlog/2024/Go1_23IsReleased/</link><pubDate>Mon, 19 Aug 2024 20:07:23 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2024/Go1_23IsReleased/</guid><description>Go 1.23 is released 原文：https://go.dev/blog/go1.23 Dmitri Shuralyov, on behalf of the Go team 13 August 2024 代表 Go 团队，Dmitri Shuralyov 2024年8月13日 Today the Go</description></item><item><title>Go 1.22 中的安全随机性</title><link>https://before80.github.io/go_docs/goBlog/2024/SecureRandomnessinGo1_22/</link><pubDate>Thu, 30 May 2024 10:14:57 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2024/SecureRandomnessinGo1_22/</guid><description>原文：https://go.dev/blog/chacha8rand Secure Randomness in Go 1.22 - Go 1.22 中的安全随机性 Russ Cox and Filippo Valsorda ​ Russ Cox 和 Filippo Valsorda 2 May 2024 ​ 2024 年 5 月 2 日</description></item><item><title>告别核心类型 - 迎接我们熟悉和喜爱的 Go！</title><link>https://before80.github.io/go_docs/goBlog/2025/GoodbyeCoreTypes-HelloGoAsWeKnowAndLoveIt/</link><pubDate>Mon, 31 Mar 2025 14:29:10 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2025/GoodbyeCoreTypes-HelloGoAsWeKnowAndLoveIt/</guid><description>原文：https://go.dev/blog/coretypes Goodbye core types - Hello Go as we know and love it! 告别核心类型 - 迎接我们熟悉和喜爱的 Go！ Robert Griesemer 26 March 2025 The</description></item><item><title>使用 math/rand/v2 演变 Go 标准库</title><link>https://before80.github.io/go_docs/goBlog/2024/EvolvingtheGoStandardLibrarywithmath_randv2/</link><pubDate>Thu, 30 May 2024 10:14:27 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2024/EvolvingtheGoStandardLibrarywithmath_randv2/</guid><description>原文：https://go.dev/blog/randv2 Evolving the Go Standard Library with math/rand/v2 - 使用 math/rand/v2 演变 Go 标准库 Russ Cox 1 May 2024 ​ 2024 年 5 月 1 日 Since Go 1 was released in March 2012, changes to the standard</description></item><item><title>抗路径穿越的文件 API</title><link>https://before80.github.io/go_docs/goBlog/2025/TraversalResistantFileAPIs/</link><pubDate>Mon, 31 Mar 2025 14:27:27 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2025/TraversalResistantFileAPIs/</guid><description>原文：https://go.dev/blog/osroot Traversal-resistant file APIs - 抗路径穿越的文件 API Damien Neil 12 March 2025 A path traversal vulnerability arises when an attacker can trick a program into opening a file other than the one it intended. This</description></item><item><title>context包</title><link>https://before80.github.io/go_docs/asu/basic/context/</link><pubDate>Sat, 13 Jul 2024 11:11:31 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/context/</guid><description>目前创建context的函数有哪些？ 这些context怎么使用？用在什么场景？</description></item><item><title>Go 开发者调查 2024 年上半年结果</title><link>https://before80.github.io/go_docs/goBlog/2024/GoDeveloperSurvey2024H1Results/</link><pubDate>Thu, 30 May 2024 10:13:24 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2024/GoDeveloperSurvey2024H1Results/</guid><description>原文：https://go.dev/blog/survey2024-h1-results Go Developer Survey 2024 H1 Results - Go 开发者调查 2024 年上半年结果 Alice Merrick and Todd Kulesza ​</description></item><item><title>从 unique 到清理和弱引用：用于效率的新低级工具</title><link>https://before80.github.io/go_docs/goBlog/2025/FromUniqueToCleanupsAndWeakNewLowLevelToolsForEfficiency/</link><pubDate>Mon, 31 Mar 2025 14:26:24 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2025/FromUniqueToCleanupsAndWeakNewLowLevelToolsForEfficiency/</guid><description>原文：https://go.dev/blog/cleanups-and-weak From unique to cleanups and weak: new low-level tools for efficiency - 从 unique 到清理和弱引用：用于效率的新低级</description></item><item><title>更强大的 Go 执行跟踪</title><link>https://before80.github.io/go_docs/goBlog/2024/MorePowerfulGoExecutionTraces/</link><pubDate>Fri, 29 Mar 2024 17:06:17 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2024/MorePowerfulGoExecutionTraces/</guid><description>原文：https://go.dev/blog/execution-traces-2024 More powerful Go execution traces 更强大的 Go 执行跟踪 Michael Knyszek ​ 迈克尔·克尼塞克 14</description></item><item><title>使用 Swiss Tables 加速 Go 的映射</title><link>https://before80.github.io/go_docs/goBlog/2025/FasterGoMapsWithSwissTables/</link><pubDate>Mon, 31 Mar 2025 14:24:48 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2025/FasterGoMapsWithSwissTables/</guid><description>原文：https://go.dev/blog/swisstable Faster Go maps with Swiss Tables - 使用 Swiss Tables 加速 Go 的映射 Michael Pratt 26 February 2025 The hash table is a central data structure in computer science, and it provides the</description></item><item><title>切片上可靠的泛型函数</title><link>https://before80.github.io/go_docs/goBlog/2024/RobustGenericFunctionsOnSlices/</link><pubDate>Fri, 29 Mar 2024 17:05:42 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2024/RobustGenericFunctionsOnSlices/</guid><description>原文：https://go.dev/blog/generic-slice-functions Robust generic functions on slices 切片上可靠的泛型函数 Valentin Deleplace ​ 瓦伦丁·德勒</description></item><item><title>使用testing/synctest测试并发代码</title><link>https://before80.github.io/go_docs/goBlog/2025/TestingConcurrentCodeWithTestingSynctest/</link><pubDate>Mon, 31 Mar 2025 14:23:28 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2025/TestingConcurrentCodeWithTestingSynctest/</guid><description>原文：https://go.dev/blog/synctest Testing concurrent code with testing/synctest - 使用testing/synctest测试并发代码 Damien Neil 19 February 2025 2025 年 2 月</description></item><item><title>Go 1.22 的路由增强功能</title><link>https://before80.github.io/go_docs/goBlog/2024/RoutingEnhancementsForGo1_22/</link><pubDate>Thu, 22 Feb 2024 20:32:05 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2024/RoutingEnhancementsForGo1_22/</guid><description>原文：https://go.dev/blog/routing-enhancements Routing Enhancements for Go 1.22 - Go 1.22 的路由增强功能 Jonathan Amsterdam, on behalf of the Go team ​ Jonathan Am</description></item><item><title>使用Go的可扩展Wasm 应用程序</title><link>https://before80.github.io/go_docs/goBlog/2025/ExtensibleWasmApplicationsWithGo/</link><pubDate>Mon, 31 Mar 2025 14:20:54 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2025/ExtensibleWasmApplicationsWithGo/</guid><description>原文：https://go.dev/blog/wasmexport Extensible Wasm Applications with Go - 使用Go的可扩展Wasm 应用程序 Cherry Mui 13 February 2025 Go 1.24 enhances its WebAssembly (Wasm) capabilities with the addition</description></item><item><title>Go 1.22 发布！</title><link>https://before80.github.io/go_docs/goBlog/2024/Go1_22IsReleased/</link><pubDate>Thu, 22 Feb 2024 20:31:34 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2024/Go1_22IsReleased/</guid><description>原文：https://go.dev/blog/go1.22 Go 1.22 is released! - Go 1.22 发布！ Eli Bendersky, on behalf of the Go team Eli Bendersky，代表 Go 团队 6 February 2024 2024 年 2 月</description></item><item><title>Go 1.24 已发布！</title><link>https://before80.github.io/go_docs/goBlog/2025/Go1_24IsReleased/</link><pubDate>Mon, 31 Mar 2025 14:05:28 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2025/Go1_24IsReleased/</guid><description>原文：https://go.dev/blog/go1.24 Go 1.24 is released! - Go 1.24 已发布！ Junyang Shao, on behalf of the Go team Junyang Shao，代表 Go 团队 11 February 2025 2025 年 2 月 11 日 Today the</description></item><item><title>uintptr</title><link>https://before80.github.io/go_docs/asu/basic/types/uintptr/</link><pubDate>Sat, 13 Jul 2024 14:14:47 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/types/uintptr/</guid><description/></item><item><title>atomic包</title><link>https://before80.github.io/go_docs/asu/basic/atomic/</link><pubDate>Sat, 13 Jul 2024 13:46:03 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/atomic/</guid><description/></item><item><title>range</title><link>https://before80.github.io/go_docs/fx/range/</link><pubDate>Tue, 02 Jul 2024 06:27:37 +0800</pubDate><guid>https://before80.github.io/go_docs/fx/range/</guid><description/></item><item><title>素数筛 - prime sieve</title><link>https://before80.github.io/go_docs/fx/prime_sieve/</link><pubDate>Tue, 02 Jul 2024 06:27:37 +0800</pubDate><guid>https://before80.github.io/go_docs/fx/prime_sieve/</guid><description>代码如下： 代码摘自https://go.dev/play/p/9U22NfrXeq prime: n. 素数，质数，盛年，壮年时期 ​ adj. 主要的，原始的，素数的 sieve</description></item><item><title>分享您对使用 Go 开发的反馈</title><link>https://before80.github.io/go_docs/goBlog/2024/ShareYourFeedbackAboutDevelopingWithGo/</link><pubDate>Thu, 22 Feb 2024 20:30:58 +0800</pubDate><guid>https://before80.github.io/go_docs/goBlog/2024/ShareYourFeedbackAboutDevelopingWithGo/</guid><description>原文：https://go.dev/blog/survey2024-h1 Share your feedback about developing with Go - 分享您对使用 Go 开发的反馈 Alice Merrick, for the Go team 23 January 2024 2024 年 1 月 23</description></item><item><title>Go 工具链</title><link>https://before80.github.io/go_docs/docs/GoToolchains/</link><pubDate>Mon, 21 Aug 2023 22:53:42 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/GoToolchains/</guid><description>Go Toolchains - Go 工具链 原文：https://go.dev/doc/toolchain 简介 Starting in Go 1.21, the Go distribution consists of a go command and a bundled Go toolchain, which is the standard library as well as the compiler, assembler, and other</description></item><item><title>unsafe</title><link>https://before80.github.io/go_docs/asu/basic/unsafe/</link><pubDate>Sat, 13 Jul 2024 14:15:06 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/unsafe/</guid><description/></item><item><title>日志</title><link>https://before80.github.io/go_docs/asu/basic/log/</link><pubDate>Sat, 13 Jul 2024 11:07:55 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/log/</guid><description/></item><item><title>complex</title><link>https://before80.github.io/go_docs/asu/basic/types/complex/</link><pubDate>Sat, 13 Jul 2024 14:13:20 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/types/complex/</guid><description/></item><item><title>数学运算</title><link>https://before80.github.io/go_docs/asu/basic/math/</link><pubDate>Sat, 13 Jul 2024 11:10:38 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/math/</guid><description/></item><item><title>日期时间操作</title><link>https://before80.github.io/go_docs/asu/basic/time/</link><pubDate>Sat, 13 Jul 2024 11:10:44 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/time/</guid><description/></item><item><title>加密与解密</title><link>https://before80.github.io/go_docs/asu/basic/encryption/</link><pubDate>Sat, 13 Jul 2024 11:09:08 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/encryption/</guid><description/></item><item><title>序列化与反序列化</title><link>https://before80.github.io/go_docs/asu/basic/serialization/</link><pubDate>Sat, 13 Jul 2024 11:07:47 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/serialization/</guid><description/></item><item><title>打包、压缩、解压缩</title><link>https://before80.github.io/go_docs/asu/basic/compression/</link><pubDate>Sat, 13 Jul 2024 11:10:13 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/compression/</guid><description/></item><item><title>图片处理</title><link>https://before80.github.io/go_docs/asu/basic/images/</link><pubDate>Sat, 13 Jul 2024 11:10:30 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/images/</guid><description/></item><item><title>字符编码</title><link>https://before80.github.io/go_docs/asu/basic/characterencoding/</link><pubDate>Sat, 13 Jul 2024 14:07:47 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/characterencoding/</guid><description/></item><item><title>那些奇怪的用法</title><link>https://before80.github.io/go_docs/asu/basic/strange/</link><pubDate>Sat, 13 Jul 2024 11:14:41 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/strange/</guid><description>代码中的指令 //go:build //go:cgo_dynamic_linker //go:cgo_export_dynamic //go:cgo_export_static //go:cgo_import_dynamic //go:cgo_import_static //go:cgo_ldflag //go:cgo_unsafe_args //go:embed //go:generate //go:linkname //go:name //go:noescape //go:noinline //go:nosplit //go:registerparams //go:systemstack //go:uintptrescapes //go:xxx //go:yeswritebarrierrec 2006-01-02T15:04:05 有什么用？ fstest 中的 var _ fs.FS = MapFS(nil) 有什么用？ fstest 中的 var _ fs.File = (*openMapFile)(nil) 有什么用？ n := 2; fmt.Println(string(n)) 输出却是空的！或</description></item><item><title>fips140</title><link>https://before80.github.io/go_docs/stdLib/crypto/fips140/</link><pubDate>Tue, 01 Apr 2025 13:15:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/crypto/fips140/</guid><description>原文：https://pkg.go.dev/crypto/fips140@go1.24.2 注意 ​ 从go1.24.0开始才可以使用该包。 常量 This</description></item><item><title>hkdf</title><link>https://before80.github.io/go_docs/stdLib/crypto/hkdf/</link><pubDate>Tue, 01 Apr 2025 13:15:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/crypto/hkdf/</guid><description>原文：https://pkg.go.dev/crypto/hkdf@go1.24.2 注意 ​ 从go1.24.0开始才可以使用该包。 Overview Package hkdf implements the HMAC-based</description></item><item><title>mlkem</title><link>https://before80.github.io/go_docs/stdLib/crypto/mlkem/</link><pubDate>Tue, 01 Apr 2025 13:15:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/crypto/mlkem/</guid><description>原文：https://pkg.go.dev/crypto/mlkem@go1.24.2 注意 ​ 从go1.24.0开始才可以使用该包。 Overview Package mlkem implements the</description></item><item><title>pbkdf2</title><link>https://before80.github.io/go_docs/stdLib/crypto/pbkdf2/</link><pubDate>Tue, 01 Apr 2025 13:15:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/crypto/pbkdf2/</guid><description>原文：https://pkg.go.dev/crypto/fips140@go1.24.2 注意 ​ 从go1.24.0开始才可以使用该包。 Overview Package pbkdf2</description></item><item><title>sha3</title><link>https://before80.github.io/go_docs/stdLib/crypto/sha3/</link><pubDate>Tue, 01 Apr 2025 13:15:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/crypto/sha3/</guid><description>原文：https://pkg.go.dev/crypto/sha3@go1.24.2 注意 ​ 从go1.24.0开始才可以使用该包。 Overview Package sha3 implements the SHA-3</description></item><item><title>常见问题</title><link>https://before80.github.io/go_docs/thirdPkg/lua/faq/</link><pubDate>Thu, 25 Jan 2024 22:09:06 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/lua/faq/</guid><description>原文： Frequently Asked Questions 常见问题 Here are answers to some frequently asked questions about Lua. ​ 以下是有关 Lua 的一些常见问题的解答。 For an introduction to what Lua is, see this summary or learn how to get started with Lua. ​ 有关 Lua 是什么的介绍，请参阅</description></item><item><title>下载</title><link>https://before80.github.io/go_docs/thirdPkg/lua/download/</link><pubDate>Thu, 25 Jan 2024 21:53:44 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/lua/download/</guid><description>原文：https://www.lua.org/download.html Download 下载 Source 源代码 Lua is free software distributed in source code. It may be used for any purpose, including commercial purposes, at absolutely no cost. ​ Lua 是以源</description></item><item><title>社区</title><link>https://before80.github.io/go_docs/thirdPkg/lua/community/</link><pubDate>Thu, 25 Jan 2024 21:49:44 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/lua/community/</guid><description>原文：https://www.lua.org/community.html Community 社区 Meeting places 会面地点 There are several places you can go to meet other people that use Lua. A good starting point is lua-users.org, a collaborative meeting place</description></item><item><title>新闻</title><link>https://before80.github.io/go_docs/thirdPkg/lua/news/</link><pubDate>Thu, 25 Jan 2024 19:01:27 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/lua/news/</guid><description>原文：https://www.lua.org/news.html Here is a summary of the main events around and about Lua. [ ​ 以下是有关 Lua 的主要事件摘要。 Check also the announcements in the mailing list, the recent</description></item><item><title>关于</title><link>https://before80.github.io/go_docs/thirdPkg/lua/about/</link><pubDate>Thu, 25 Jan 2024 17:43:19 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/lua/about/</guid><description>原文：https://www.lua.org/about.html What is Lua? Lua 是什么？ Lua is a powerful, efficient, lightweight, embeddable scripting language. It supports procedural programming, object-oriented programming, functional programming, data-driven programming, and data description. ​ Lua 是一种功能</description></item><item><title>相关参考</title><link>https://before80.github.io/go_docs/thirdPkg/lua/refs/</link><pubDate>Thu, 25 Jan 2024 17:36:19 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/lua/refs/</guid><description>原文： OneCompiler 在线体验 原文：https://onecompiler.com/lua/ 在线体验LuaOS 原文：https://wiki.luatos</description></item><item><title>开始入门</title><link>https://before80.github.io/go_docs/thirdPkg/lua/GettingStarted/</link><pubDate>Thu, 25 Jan 2024 17:30:37 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/lua/GettingStarted/</guid><description>原文： Welcome! 欢迎！ Lua is a powerful and fast programming language that is easy to learn and use and to embed into your application. ​ Lua 是一种功能强大且快速的编程语言，易于学习和使用，并且可以嵌入到您的应用程序中。 Lua</description></item><item><title>最佳实践</title><link>https://before80.github.io/go_docs/styleGuide/google/bestPractices/</link><pubDate>Mon, 22 Jan 2024 10:01:46 +0800</pubDate><guid>https://before80.github.io/go_docs/styleGuide/google/bestPractices/</guid><description>Go Style Best Practices - Go 风格最佳实践 原文：https://google.github.io/styleguide/go/best-practices Note: This</description></item><item><title>决策</title><link>https://before80.github.io/go_docs/styleGuide/google/decisions/</link><pubDate>Mon, 22 Jan 2024 10:01:26 +0800</pubDate><guid>https://before80.github.io/go_docs/styleGuide/google/decisions/</guid><description>Go Style Decisions - Go 风格决策 原文：https://google.github.io/styleguide/go/decisions Note: This is part of a series of documents that</description></item><item><title>指南</title><link>https://before80.github.io/go_docs/styleGuide/google/guide/</link><pubDate>Mon, 22 Jan 2024 10:01:15 +0800</pubDate><guid>https://before80.github.io/go_docs/styleGuide/google/guide/</guid><description>Go Style Guide - Go 风格指南 原文：https://google.github.io/styleguide/go/guide Note: This is part of a series of documents that outline Go Style at</description></item><item><title>slogtest</title><link>https://before80.github.io/go_docs/stdLib/testing/slogtest/</link><pubDate>Sun, 05 Nov 2023 14:33:11 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/testing/slogtest/</guid><description>原文：https://pkg.go.dev/testing/slogtest@go1.24.2 注意 ​ 从go1.21.0开始才可以使用该包。 概</description></item><item><title>maps</title><link>https://before80.github.io/go_docs/stdLib/maps/</link><pubDate>Sun, 05 Nov 2023 14:27:43 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/maps/</guid><description>原文：https://pkg.go.dev/maps@go1.24.2 注意 ​ 从go1.21.0开始才有该包。 概述 Package maps defines various functions useful with maps of any type. ​ ma</description></item><item><title>slog</title><link>https://before80.github.io/go_docs/stdLib/log/slog/</link><pubDate>Sun, 05 Nov 2023 14:27:24 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/log/slog/</guid><description>原文：https://pkg.go.dev/slog@go1.24.2 注意 ​ 从go1.21.0开始才有该包。 Overview Package slog provides structured logging, in which log records include a message, a severity level,</description></item><item><title>cmp</title><link>https://before80.github.io/go_docs/stdLib/cmp/</link><pubDate>Sun, 05 Nov 2023 14:26:38 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/cmp/</guid><description>原文：https://pkg.go.dev/cmp@go1.24.2 注意 从go1.21.0开始才有该包。 概述 Package cmp provides types and functions related to comparing ordered values. ​ cmp包</description></item><item><title>slices</title><link>https://before80.github.io/go_docs/stdLib/slices/</link><pubDate>Sun, 05 Nov 2023 14:26:18 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/slices/</guid><description>原文：https://pkg.go.dev/slices 注意 ​ 从go1.21.0开始才有该包。 概述 Package slices defines various functions useful with slices of any type. ​ slices 包定义了各种类型</description></item><item><title>gorm API</title><link>https://before80.github.io/go_docs/gorm/gormAPI/</link><pubDate>Mon, 30 Oct 2023 18:37:28 +0800</pubDate><guid>https://before80.github.io/go_docs/gorm/gormAPI/</guid><description>原文：https://pkg.go.dev/gorm.io/gorm@v1.25.10 The fantastic ORM library for Golang, aims to be developer friendly. Overview Full-Featured ORM Associations (Has One, Has Many, Belongs To, Many To Many, Polymorphism, Single-table inheritance)</description></item><item><title>数据库操作</title><link>https://before80.github.io/go_docs/comm/web/database/</link><pubDate>Tue, 24 Oct 2023 14:33:52 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/web/database/</guid><description>MySQL Go 使用原生 使用gorm SQLite Go TiDB Go</description></item><item><title>求值顺序</title><link>https://before80.github.io/go_docs/comm/grammar/expression/orderOfEvaluation/</link><pubDate>Fri, 06 Oct 2023 21:25:57 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/grammar/expression/orderOfEvaluation/</guid><description>求值顺序 Go C C++ Python PHP Ruby Java JavaScript TypeScript C# Erlang</description></item><item><title>转换</title><link>https://before80.github.io/go_docs/comm/grammar/expression/conversion/</link><pubDate>Fri, 06 Oct 2023 21:24:53 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/grammar/expression/conversion/</guid><description>转换 Go C C++ Python PHP Ruby Java JavaScript TypeScript C# Erlang</description></item><item><title>操作符</title><link>https://before80.github.io/go_docs/comm/grammar/expression/operator/</link><pubDate>Fri, 06 Oct 2023 21:24:31 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/grammar/expression/operator/</guid><description>操作符 Go C C++ Python PHP Ruby Java JavaScript TypeScript C# Erlang</description></item><item><title>类型推断</title><link>https://before80.github.io/go_docs/comm/grammar/expression/typeInference/</link><pubDate>Fri, 06 Oct 2023 21:23:59 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/grammar/expression/typeInference/</guid><description>类型推断 Go C C++ Python PHP Ruby Java JavaScript TypeScript C# Erlang</description></item><item><title>调用</title><link>https://before80.github.io/go_docs/comm/grammar/expression/call/</link><pubDate>Fri, 06 Oct 2023 21:23:30 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/grammar/expression/call/</guid><description>调用 Go C C++ Python PHP Ruby Java JavaScript TypeScript C# Erlang</description></item><item><title>类型断言</title><link>https://before80.github.io/go_docs/comm/grammar/expression/typeAssertion/</link><pubDate>Fri, 06 Oct 2023 21:23:13 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/grammar/expression/typeAssertion/</guid><description>类型断言 Go C C++ Python PHP Ruby Java JavaScript TypeScript C# Erlang</description></item><item><title>切片表达式</title><link>https://before80.github.io/go_docs/comm/grammar/expression/sliceExpression/</link><pubDate>Fri, 06 Oct 2023 21:22:26 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/grammar/expression/sliceExpression/</guid><description>切片表达式 Go C C++ Python PHP Ruby Java JavaScript TypeScript C# Erlang</description></item><item><title>索引表达式</title><link>https://before80.github.io/go_docs/comm/grammar/expression/indexExpression/</link><pubDate>Fri, 06 Oct 2023 21:22:14 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/grammar/expression/indexExpression/</guid><description>索引表达式 Go C C++ Python PHP Ruby Java JavaScript TypeScript C# Erlang</description></item><item><title>方法值</title><link>https://before80.github.io/go_docs/comm/grammar/expression/methodValue/</link><pubDate>Fri, 06 Oct 2023 21:21:58 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/grammar/expression/methodValue/</guid><description>方法值 Go C C++ Python PHP Ruby Java JavaScript TypeScript C# Erlang</description></item><item><title>方法表达式</title><link>https://before80.github.io/go_docs/comm/grammar/expression/methodExpression/</link><pubDate>Fri, 06 Oct 2023 21:21:50 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/grammar/expression/methodExpression/</guid><description>方法表达式 Go C C++ Python PHP Ruby Java JavaScript TypeScript C# Erlang</description></item><item><title>选择器</title><link>https://before80.github.io/go_docs/comm/grammar/expression/selector/</link><pubDate>Fri, 06 Oct 2023 21:20:58 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/grammar/expression/selector/</guid><description>选择器 Go C C++ Python PHP Ruby Java JavaScript TypeScript C# Erlang</description></item><item><title>字面量</title><link>https://before80.github.io/go_docs/comm/grammar/expression/literal/</link><pubDate>Fri, 06 Oct 2023 21:20:31 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/grammar/expression/literal/</guid><description>字面量 Go C C++ Python PHP Ruby Java JavaScript TypeScript C# Erlang</description></item><item><title>操作数</title><link>https://before80.github.io/go_docs/comm/grammar/expression/operand/</link><pubDate>Fri, 06 Oct 2023 21:19:35 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/grammar/expression/operand/</guid><description>操作数 Go C C++ Python PHP Ruby Java JavaScript TypeScript C# Erlang</description></item><item><title>定义</title><link>https://before80.github.io/go_docs/comm/grammar/define/</link><pubDate>Fri, 06 Oct 2023 21:18:03 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/grammar/define/</guid><description>定义 Go C C++ Python PHP Ruby Java JavaScript TypeScript C# Erlang</description></item><item><title>声明</title><link>https://before80.github.io/go_docs/comm/grammar/declare/</link><pubDate>Fri, 06 Oct 2023 21:17:55 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/grammar/declare/</guid><description>声明 Go C C++ Python PHP Ruby Java JavaScript TypeScript C# Erlang</description></item><item><title>变量</title><link>https://before80.github.io/go_docs/comm/grammar/variable/</link><pubDate>Fri, 06 Oct 2023 21:17:45 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/grammar/variable/</guid><description>变量 Go C C++ Python PHP Ruby Java JavaScript TypeScript C# Erlang</description></item><item><title>常量</title><link>https://before80.github.io/go_docs/comm/grammar/const/</link><pubDate>Fri, 06 Oct 2023 21:17:30 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/grammar/const/</guid><description>常量 Go C C++ Python PHP Ruby Java JavaScript TypeScript C# Erlang</description></item><item><title>类型</title><link>https://before80.github.io/go_docs/comm/grammar/type/</link><pubDate>Fri, 06 Oct 2023 21:17:22 +0800</pubDate><guid>https://before80.github.io/go_docs/comm/grammar/type/</guid><description>类型 Go C C++ Python PHP Ruby Java JavaScript TypeScript C# Erlang</description></item><item><title>echo 在pkg.go.dev上的文档</title><link>https://before80.github.io/go_docs/echo/echo/</link><pubDate>Tue, 22 Aug 2023 08:44:25 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/echo/</guid><description>echo 在pkg.go.dev上的文档 原文：https://pkg.go.dev/github.com/labstack/echo/v4 version: v4.11.1 published: 2023.7.16 支</description></item><item><title>cobra-cli 之 Cobra Generator</title><link>https://before80.github.io/go_docs/thirdPkg/Cobra/cobra-cli/</link><pubDate>Fri, 18 Aug 2023 21:30:53 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/Cobra/cobra-cli/</guid><description>Cobra Generator - Cobra 生成器 原文：https://github.com/spf13/cobra-cli ​ Cobra 提供了自己的程序，可以为你创建应用程序并添加任何</description></item><item><title>Profile-guided optimization</title><link>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/Profile-guidedOptimization/</link><pubDate>Wed, 12 Jul 2023 20:37:58 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/Profile-guidedOptimization/</guid><description>Profile-guided optimization 原文：https://go.dev/doc/pgo Starting in Go 1.20, the Go compiler supports profile-guided optimization (PGO) to further optimize builds. Overview Profile-guided optimization (PGO), also known as feedback-directed optimization (FDO), is a compiler optimization technique that feeds information (a profile) from representative runs of the application back into</description></item><item><title>websocket</title><link>https://before80.github.io/go_docs/echo/cookbook/websocket/</link><pubDate>Sun, 09 Jul 2023 22:05:29 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/cookbook/websocket/</guid><description>WebSocket 原文：https://echo.labstack.com/docs/cookbook/websocket Using net WebSocket Server cookbook/websocket/net/server.go 1 2 3 4 5 6 7 8 9 10 11 12</description></item><item><title>twitter-like-api</title><link>https://before80.github.io/go_docs/echo/cookbook/twitter-like-api/</link><pubDate>Sun, 09 Jul 2023 22:05:21 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/cookbook/twitter-like-api/</guid><description>Twitter Like API 原文：https://echo.labstack.com/docs/cookbook/twitter This recipe demonstrates how to create a Twitter like REST API using MongoDB (Database), JWT (API security)</description></item><item><title>timeout</title><link>https://before80.github.io/go_docs/echo/cookbook/timeout/</link><pubDate>Sun, 09 Jul 2023 22:05:04 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/cookbook/timeout/</guid><description>Timeout 原文：https://echo.labstack.com/docs/cookbook/timeout Server cookbook/timeout/server.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17</description></item><item><title>subdomain</title><link>https://before80.github.io/go_docs/echo/cookbook/subdomain/</link><pubDate>Sun, 09 Jul 2023 22:04:57 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/cookbook/subdomain/</guid><description>Subdomain 原文：https://echo.labstack.com/docs/cookbook/subdomain Server cookbook/subdomain/server.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15</description></item><item><title>streaming-response</title><link>https://before80.github.io/go_docs/echo/cookbook/streaming-response/</link><pubDate>Sun, 09 Jul 2023 22:04:44 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/cookbook/streaming-response/</guid><description>Streaming Response Send data as it is produced Streaming JSON response with chunked transfer encoding Server cookbook/streaming-response/server.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;time&amp;#34;</description></item><item><title>reverse-proxy</title><link>https://before80.github.io/go_docs/echo/cookbook/reverse-proxy/</link><pubDate>Sun, 09 Jul 2023 22:04:22 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/cookbook/reverse-proxy/</guid><description>Reverse Proxy 原文：https://echo.labstack.com/docs/cookbook/reverse-proxy This recipe demonstrates how you can use Echo as a reverse proxy</description></item><item><title>middleware</title><link>https://before80.github.io/go_docs/echo/cookbook/middleware/</link><pubDate>Sun, 09 Jul 2023 22:04:05 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/cookbook/middleware/</guid><description>Middleware 原文：https://echo.labstack.com/docs/cookbook/middleware Write a custom middleware Middleware to collect request count, statuses and uptime. Middleware to write custom</description></item><item><title>负载均衡</title><link>https://before80.github.io/go_docs/echo/cookbook/load-balancing/</link><pubDate>Sun, 09 Jul 2023 22:03:52 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/cookbook/load-balancing/</guid><description>Load Balancing - 负载均衡 原文：https://echo.labstack.com/docs/cookbook/load-balancing This recipe demonstrates how you can</description></item><item><title>jwt</title><link>https://before80.github.io/go_docs/echo/cookbook/jwt/</link><pubDate>Sun, 09 Jul 2023 22:03:38 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/cookbook/jwt/</guid><description>JWT 原文：https://echo.labstack.com/docs/cookbook/jwt JWT middleware configuration can be found here. This is cookbook for: JWT authentication using HS256 algorithm. JWT is retrieved from Authorization request header.</description></item><item><title>jsonp</title><link>https://before80.github.io/go_docs/echo/cookbook/jsonp/</link><pubDate>Sun, 09 Jul 2023 22:03:33 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/cookbook/jsonp/</guid><description>JSONP 原文：https://echo.labstack.com/docs/cookbook/jsonp JSONP is a method that allows cross-domain server calls. You can read more about it at the JSON versus JSONP Tutorial.</description></item><item><title>http2-server</title><link>https://before80.github.io/go_docs/echo/cookbook/http2-server/</link><pubDate>Sun, 09 Jul 2023 22:03:24 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/cookbook/http2-server/</guid><description>HTTP/2 Server 原文：https://echo.labstack.com/docs/cookbook/http2 1) Generate a self-signed X.509 TLS certificate Run the following command to generate cert.pem and key.pem files: 1 go run</description></item><item><title>http2-server-push</title><link>https://before80.github.io/go_docs/echo/cookbook/http2-server-push/</link><pubDate>Sun, 09 Jul 2023 22:03:17 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/cookbook/http2-server-push/</guid><description>HTTP/2 Server Push 原文：https://echo.labstack.com/docs/cookbook/http2-server-push NOTE Requires go1.8+ Send web assets using</description></item><item><title>hello-world</title><link>https://before80.github.io/go_docs/echo/cookbook/hello-world/</link><pubDate>Sun, 09 Jul 2023 22:03:02 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/cookbook/hello-world/</guid><description>Hello World 原文：https://echo.labstack.com/docs/cookbook/hello-world Server cookbook/hello-world/server.go 1 2 3 4 5 6 7 8 9 10 11 12</description></item><item><title>graceful-shutdown</title><link>https://before80.github.io/go_docs/echo/cookbook/graceful-shutdown/</link><pubDate>Sun, 09 Jul 2023 22:02:53 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/cookbook/graceful-shutdown/</guid><description>Graceful Shutdown Using http.Server#Shutdown() cookbook/graceful-shutdown/server.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 package main import ( &amp;#34;context&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;os&amp;#34; &amp;#34;os/signal&amp;#34; &amp;#34;time&amp;#34; &amp;#34;github.com/labstack/echo/v4&amp;#34; &amp;#34;github.com/labstack/gommon/log&amp;#34; ) func main() { // Setup e := echo.New() e.Logger.SetLevel(log.INFO) e.GET(&amp;#34;/&amp;#34;, func(c echo.Context) error</description></item><item><title>google-app-engine</title><link>https://before80.github.io/go_docs/echo/cookbook/google-app-engine/</link><pubDate>Sun, 09 Jul 2023 22:02:36 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/cookbook/google-app-engine/</guid><description>Google App Engine 原文：https://echo.labstack.com/docs/cookbook/google-app-engine Google App Engine (GAE) provides a range</description></item><item><title>file-upload</title><link>https://before80.github.io/go_docs/echo/cookbook/file-upload/</link><pubDate>Sun, 09 Jul 2023 22:02:18 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/cookbook/file-upload/</guid><description>File Upload 原文：https://echo.labstack.com/docs/cookbook/file-upload Upload single file with parameters Server cookbook/file-upload/single/server.go 1 2 3 4 5 6 7</description></item><item><title>file-download</title><link>https://before80.github.io/go_docs/echo/cookbook/file-download/</link><pubDate>Sun, 09 Jul 2023 22:02:07 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/cookbook/file-download/</guid><description>File Download 原文：https://echo.labstack.com/docs/cookbook/file-download Download file Server cookbook/file-download/server.go 1 2 3 4 5 6 7 8</description></item><item><title>embed-resources</title><link>https://before80.github.io/go_docs/echo/cookbook/embed-resources/</link><pubDate>Sun, 09 Jul 2023 22:01:58 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/cookbook/embed-resources/</guid><description>Embed Resources 原文：https://echo.labstack.com/docs/cookbook/embed-resources With go 1.16 embed feature cookbook/embed/server.go 1 2 3 4</description></item><item><title>crud</title><link>https://before80.github.io/go_docs/echo/cookbook/crud/</link><pubDate>Sun, 09 Jul 2023 22:01:42 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/cookbook/crud/</guid><description>CRUD 原文：https://echo.labstack.com/docs/cookbook/crud Server cookbook/crud/server.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20</description></item><item><title>cors</title><link>https://before80.github.io/go_docs/echo/cookbook/cors/</link><pubDate>Sun, 09 Jul 2023 22:01:33 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/cookbook/cors/</guid><description>CORS Server using a list of allowed origins cookbook/cors/origin-list/server.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 package main import ( &amp;#34;net/http&amp;#34; &amp;#34;github.com/labstack/echo/v4&amp;#34; &amp;#34;github.com/labstack/echo/v4/middleware&amp;#34; ) var ( users = []string{&amp;#34;Joe&amp;#34;, &amp;#34;Veer&amp;#34;, &amp;#34;Zion&amp;#34;} ) func getUsers(c echo.Context) error { return c.JSON(http.StatusOK,</description></item><item><title>auto-tls</title><link>https://before80.github.io/go_docs/echo/cookbook/auto-tls/</link><pubDate>Sun, 09 Jul 2023 22:01:26 +0800</pubDate><guid>https://before80.github.io/go_docs/echo/cookbook/auto-tls/</guid><description>Auto TLS 原文：https://echo.labstack.com/docs/cookbook/auto-tls This recipe demonstrates how to obtain TLS certificates for a domain automatically from Let&amp;rsquo;s Encrypt. Echo#StartAutoTLS accepts</description></item><item><title>tips</title><link>https://before80.github.io/go_docs/thirdPkg/logrus/wiki/tips/</link><pubDate>Sun, 25 Jun 2023 09:41:44 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/logrus/wiki/tips/</guid><description>Tips 原文：https://github.com/sirupsen/logrus/wiki/Tips pavel edited this page on Jul 7, 2021 · 2 revisions pavel 在 2021 年 7 月 7 日编辑了</description></item><item><title>hooks</title><link>https://before80.github.io/go_docs/thirdPkg/logrus/wiki/hooks/</link><pubDate>Sun, 25 Jun 2023 09:41:29 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/logrus/wiki/hooks/</guid><description>Hooks 原文：https://github.com/sirupsen/logrus/wiki/Hooks Owefsad 在 2 月 1 日编辑了此页面·35 次修订 ​ 本页</description></item><item><title>Logrus 的 Syslog 钩子</title><link>https://before80.github.io/go_docs/thirdPkg/logrus/hook/syslog/</link><pubDate>Sun, 25 Jun 2023 09:29:33 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/logrus/hook/syslog/</guid><description>Syslog Hooks for Logrus - Logrus 的 Syslog 钩子 原文：https://github.com/sirupsen/logrus/tree/v1.9.3/hooks/writ</description></item><item><title>Logrus 的 Writer 钩子</title><link>https://before80.github.io/go_docs/thirdPkg/logrus/hook/writer/</link><pubDate>Sun, 25 Jun 2023 09:29:23 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/logrus/hook/writer/</guid><description>Writer Hooks for Logrus - Logrus 的 Writer 钩子 原文：https://github.com/sirupsen/logrus/tree/v1.9.3/hooks/writ</description></item><item><title>Type Parameters Proposal</title><link>https://before80.github.io/go_docs/proposal/43651-type-parameters/</link><pubDate>Sun, 18 Jun 2023 15:53:12 +0800</pubDate><guid>https://before80.github.io/go_docs/proposal/43651-type-parameters/</guid><description>Type Parameters Proposal 原文：https://go.googlesource.com/proposal/+/HEAD/design/43651-type-pa</description></item><item><title>subtest-subbenchmark</title><link>https://before80.github.io/go_docs/asu/test/subtest-subbenchmark/</link><pubDate>Mon, 12 Jun 2023 17:22:42 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/test/subtest-subbenchmark/</guid><description/></item><item><title>logrus文档</title><link>https://before80.github.io/go_docs/thirdPkg/logrus/logrus/</link><pubDate>Mon, 05 Jun 2023 11:23:39 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/logrus/logrus/</guid><description>Logrus 原文：https://pkg.go.dev/github.com/sirupsen/logrus 版本：v1.9.3 发布时间：2023.5.</description></item><item><title>《Go语言精进之路——从新手到高手的编程思想、方法和技巧》白明/著</title><link>https://before80.github.io/go_docs/docs/LearnProc/Full/GoJingJinZhiLu/</link><pubDate>Tue, 23 May 2023 13:34:26 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/LearnProc/Full/GoJingJinZhiLu/</guid><description>《Go语言精进之路——从新手到高手的编程思想、方法和技巧》白明/著 第一部分 熟知Go语言的一切 第1条 了解Go语言的诞生与演进 Go语言的诞生 Go</description></item><item><title>Cobra 在pkg.go.dev上的文档</title><link>https://before80.github.io/go_docs/thirdPkg/Cobra/CobraDoc/</link><pubDate>Wed, 17 May 2023 15:03:14 +0800</pubDate><guid>https://before80.github.io/go_docs/thirdPkg/Cobra/CobraDoc/</guid><description>Cobra 在pkg.go.dev上的文档 原文：https://pkg.go.dev/github.com/spf13/cobra 版本：v1.7.0 发</description></item><item><title>adler32</title><link>https://before80.github.io/go_docs/stdLib/hash/adler32/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/hash/adler32/</guid><description>原文：https://pkg.go.dev/hash/adler32@go1.24.2 Package adler32 implements the Adler-32 checksum. ​ Package adler32 实现 Adler-32 校验和。 It is defined in RFC 1950: ​ 它在 RFC 1950</description></item><item><title>aes</title><link>https://before80.github.io/go_docs/stdLib/crypto/aes/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/crypto/aes/</guid><description>原文：https://pkg.go.dev/crypto/aes@go1.24.2 Package aes implements AES encryption (formerly Rijndael), as defined in U.S. Federal Information Processing Standards Publication 197. ​ aes 包实现了 AES 加密（以前</description></item><item><title>ascii85</title><link>https://before80.github.io/go_docs/stdLib/encoding/ascii85/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/encoding/ascii85/</guid><description>原文：https://pkg.go.dev/encoding/ascii85@go1.24.2 Package ascii85 implements the ascii85 data encoding as used in the btoa tool and Adobe&amp;rsquo;s PostScript and PDF document formats. ​ ascii85 包</description></item><item><title>asn1</title><link>https://before80.github.io/go_docs/stdLib/encoding/asn1/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/encoding/asn1/</guid><description>原文：https://pkg.go.dev/encoding/asn1@go1.24.2 Package asn1 implements parsing of DER-encoded ASN.1 data structures, as defined in ITU-T Rec X.690. ​ Package asn1 实现对 DER 编码的 ASN.1</description></item><item><title>ast</title><link>https://before80.github.io/go_docs/stdLib/go/ast/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/go/ast/</guid><description>原文：https://pkg.go.dev/go/ast@go1.24.2 Package ast declares the types used to represent syntax trees for Go packages. ​ ast 包声明用于表示 Go 包的语法树的类型。 常</description></item><item><title>atomic</title><link>https://before80.github.io/go_docs/stdLib/sync/atomic/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/sync/atomic/</guid><description>原文：https://pkg.go.dev/sync/atomic@go1.24.2 Package atomic provides low-level atomic memory primitives useful for implementing synchronization algorithms. ​ atomic包提供了低级别的原</description></item><item><title>base32</title><link>https://before80.github.io/go_docs/stdLib/encoding/base32/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/encoding/base32/</guid><description>原文：https://pkg.go.dev/encoding/base32@go1.24.2 Package base32 implements base32 encoding as specified by RFC 4648. ​ base32 包实现了 RFC 4648 中指定的 base32 编</description></item><item><title>base64</title><link>https://before80.github.io/go_docs/stdLib/encoding/base64/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/encoding/base64/</guid><description>原文：https://pkg.go.dev/encoding/base64@go1.24.2 Package base64 implements base64 encoding as specified by RFC 4648. ​ base64包实现了RFC</description></item><item><title>big</title><link>https://before80.github.io/go_docs/stdLib/math/big/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/math/big/</guid><description>原文：https://pkg.go.dev/math/big@go1.24.2 Package big implements arbitrary-precision arithmetic (big numbers). The following numeric types are supported: ​ big 包 实现任意精度算术（大数字）。支</description></item><item><title>binary</title><link>https://before80.github.io/go_docs/stdLib/encoding/binary/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/encoding/binary/</guid><description>原文：https://pkg.go.dev/encoding/binary@go1.24.2 Package binary implements simple translation between numbers and byte sequences and encoding and decoding of varints. ​ binary 包实现了数字</description></item><item><title>bits</title><link>https://before80.github.io/go_docs/stdLib/math/bits/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/math/bits/</guid><description>原文：https://pkg.go.dev/math/bits@go1.24.2 Package bits implements bit counting and manipulation functions for the predeclared unsigned integer types. ​ bits 包为预声明的无符号整数类型实</description></item><item><title>build</title><link>https://before80.github.io/go_docs/stdLib/go/build/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/go/build/</guid><description>原文：https://pkg.go.dev/go/build@go1.24.2 Package build gathers information about Go packages. ​ build 包收集了有关Go包的信息。 Go Path The Go path is a list of</description></item><item><title>build/contraint</title><link>https://before80.github.io/go_docs/stdLib/go/build_constraint/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/go/build_constraint/</guid><description>原文：https://pkg.go.dev/go/build/constraint@go1.24.2 Package constraint implements parsing and evaluation of build constraint lines. See https://golang.org/cmd/go/#hdr-Build_constraints for documentation about build constraints themselves. ​ Package</description></item><item><title>buildinfo</title><link>https://before80.github.io/go_docs/stdLib/debug/buildinfo/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/debug/buildinfo/</guid><description>原文：https://pkg.go.dev/debug/buildinfo@go1.24.2 Package buildinfo provides access to information embedded in a Go binary about how it was built. This includes the Go toolchain version, and the</description></item><item><title>cgo</title><link>https://before80.github.io/go_docs/stdLib/runtime/cgo/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/runtime/cgo/</guid><description>原文：https://pkg.go.dev/runtime/cgo@go1.24.2 Package cgo contains runtime support for code generated by the cgo tool. See the documentation for the cgo command for details on using cgo. ​ cgo 包含</description></item><item><title>cipher</title><link>https://before80.github.io/go_docs/stdLib/crypto/cipher/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/crypto/cipher/</guid><description>原文：https://pkg.go.dev/crypto/cipher@go1.24.2 Package cipher implements standard block cipher modes that can be wrapped around low-level block cipher implementations. See https://csrc.nist.gov/groups/ST/toolkit/BCM/current_modes.html and NIST Special Publication 800-38A. ​ cipher 包</description></item><item><title>cmplx</title><link>https://before80.github.io/go_docs/stdLib/math/cmplx/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/math/cmplx/</guid><description>原文：https://pkg.go.dev/math/cmplx@go1.24.2 Package cmplx provides basic constants and mathematical functions for complex numbers. Special case handling conforms to the C99 standard Annex G IEC 60559-compatible complex arithmetic. ​ cmplx 包提</description></item><item><title>color</title><link>https://before80.github.io/go_docs/stdLib/image/color/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/image/color/</guid><description>原文：https://pkg.go.dev/image/color@go1.24.2 Package color implements a basic color library. ​ color 包实现了一个基本的颜色库。 常量 This section is empty.</description></item><item><title>color/palette</title><link>https://before80.github.io/go_docs/stdLib/image/color_palette/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/image/color_palette/</guid><description>原文：https://pkg.go.dev/image/color/palette@go1.24.2 Package palette provides standard color palettes. ​ palette 包提供标准调色板。 常量 This</description></item><item><title>constant</title><link>https://before80.github.io/go_docs/stdLib/go/constant/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/go/constant/</guid><description>原文：https://pkg.go.dev/go/constant@go1.24.2 Package constant implements Values representing untyped Go constants and their corresponding operations. A special Unknown value may be used when a value is unknown due to an error.</description></item><item><title>coverage</title><link>https://before80.github.io/go_docs/stdLib/runtime/coverage/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/runtime/coverage/</guid><description>原文：https://pkg.go.dev/runtime/coverage@go1.24.2 常量 This section is empty. 变量 This section is empty. 函数 func ClearCounters 1 func ClearCounters() error ClearCounters clears/resets all</description></item><item><title>crc32</title><link>https://before80.github.io/go_docs/stdLib/hash/crc32/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/hash/crc32/</guid><description>原文：https://pkg.go.dev/hash/crc32@go1.24.2 Package crc32 implements the 32-bit cyclic redundancy check, or CRC-32, checksum. See https://en.wikipedia.org/wiki/Cyclic_redundancy_check for information. ​ crc32 包实现了 32 位循环冗余校验</description></item><item><title>crc64</title><link>https://before80.github.io/go_docs/stdLib/hash/crc64/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/hash/crc64/</guid><description>原文：https://pkg.go.dev/hash/crc64@go1.24.2 Package crc64 implements the 64-bit cyclic redundancy check, or CRC-64, checksum. See https://en.wikipedia.org/wiki/Cyclic_redundancy_check for information. ​ crc64 包实现了 64 位循环冗余校验</description></item><item><title>crypto</title><link>https://before80.github.io/go_docs/stdLib/crypto/crypto/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/crypto/crypto/</guid><description>原文：https://pkg.go.dev/crypto@go1.24.2 Package crypto collects common cryptographic constants. ​ crypto 包收集常见的加密常量。 常量 This section is empty. 变量 This section is empty. 函数</description></item><item><title>csv</title><link>https://before80.github.io/go_docs/stdLib/encoding/csv/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/encoding/csv/</guid><description>原文：https://pkg.go.dev/encoding/csv@go1.24.2 Package csv reads and writes comma-separated values (CSV) files. There are many kinds of CSV files; this package supports the format described in RFC 4180. ​ c</description></item><item><title>debug</title><link>https://before80.github.io/go_docs/stdLib/runtime/debug/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/runtime/debug/</guid><description>原文：https://pkg.go.dev/runtime/debug@go1.24.2 Package debug contains facilities for programs to debug themselves while they are running. ​ debug 包含程序在运行时调试自</description></item><item><title>des</title><link>https://before80.github.io/go_docs/stdLib/crypto/des/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/crypto/des/</guid><description>原文：https://pkg.go.dev/crypto/des@go1.24.2 Package des implements the Data Encryption Standard (DES) and the Triple Data Encryption Algorithm (TDEA) as defined in U.S. Federal Information Processing Standards Publication 46-3. ​ des 包实</description></item><item><title>doc</title><link>https://before80.github.io/go_docs/stdLib/go/doc/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/go/doc/</guid><description>原文：https://pkg.go.dev/go/doc@go1.24.2 Package doc extracts source code documentation from a Go AST. ​ doc 包从 Go AST 中提取源代码文档。 常量 This section is empty. 变量</description></item><item><title>doc/comment</title><link>https://before80.github.io/go_docs/stdLib/go/doc_comment/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/go/doc_comment/</guid><description>原文：https://pkg.go.dev/go/doc/comment@go1.24.2 Package comment implements parsing and reformatting of Go doc comments, (documentation comments), which are comments that immediately precede a top-level declaration of a package, const,</description></item><item><title>draw</title><link>https://before80.github.io/go_docs/stdLib/image/draw/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/image/draw/</guid><description>原文：https://pkg.go.dev/image/draw@go1.24.2 Package draw provides image composition functions. ​ draw 包提供图像合成函数。 See “The Go image/draw pack</description></item><item><title>dsa</title><link>https://before80.github.io/go_docs/stdLib/crypto/dsa/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/crypto/dsa/</guid><description>原文：https://pkg.go.dev/crypto/dsa@go1.24.2 Package dsa implements the Digital Signature Algorithm, as defined in FIPS 186-3. ​ dsa 包实现了数字签名算法，如 FIPS 186-3 中</description></item><item><title>dwarf</title><link>https://before80.github.io/go_docs/stdLib/debug/dwarf/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/debug/dwarf/</guid><description>原文：https://pkg.go.dev/debug/dwarf@go1.24.2 Package dwarf provides access to DWARF debugging information loaded from executable files, as defined in the DWARF 2.0 Standard at http://dwarfstd.org/doc/dwarf-2.0.0.pdf. ​ dwarf 包提供对从</description></item><item><title>ecdh</title><link>https://before80.github.io/go_docs/stdLib/crypto/ecdh/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/crypto/ecdh/</guid><description>原文：https://pkg.go.dev/crypto/ecdh@go1.24.2 Package ecdh implements Elliptic Curve Diffie-Hellman over NIST curves and Curve25519. ​ ecdh 包实现了 NIST 曲线和 Curve25519 上的椭圆曲线</description></item><item><title>ecdsa</title><link>https://before80.github.io/go_docs/stdLib/crypto/ecdsa/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/crypto/ecdsa/</guid><description>原文：https://pkg.go.dev/crypto/ecdsa@go1.24.2 Package ecdsa implements the Elliptic Curve Digital Signature Algorithm, as defined in FIPS 186-4 and SEC 1, Version 2.0. ​ ecdsa 包实现了椭圆</description></item><item><title>ed25519</title><link>https://before80.github.io/go_docs/stdLib/crypto/ed25519/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/crypto/ed25519/</guid><description>原文：https://pkg.go.dev/crypto/ed25519@go1.24.2 Package ed25519 implements the Ed25519 signature algorithm. See https://ed25519.cr.yp.to/. ​ ed25519 包实现了 Ed25519 签名算法。请参阅 h</description></item><item><title>elf</title><link>https://before80.github.io/go_docs/stdLib/debug/elf/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/debug/elf/</guid><description>原文：https://pkg.go.dev/debug/elf@go1.24.2 Package elf implements access to ELF object files. ​ elf 包实现了对 ELF 目标文件的访问。 Security This package is not designed</description></item><item><title>elliptic</title><link>https://before80.github.io/go_docs/stdLib/crypto/elliptic/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/crypto/elliptic/</guid><description>原文：https://pkg.go.dev/crypto/elliptic@go1.24.2 Package elliptic implements the standard NIST P-224, P-256, P-384, and P-521 elliptic curves over prime fields. ​ elliptic 包实现标准 NIST</description></item><item><title>encoding</title><link>https://before80.github.io/go_docs/stdLib/encoding/encoding/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/encoding/encoding/</guid><description>原文：https://pkg.go.dev/encoding@go1.24.2 Package encoding defines interfaces shared by other packages that convert data to and from byte-level and textual representations. Packages that check for these interfaces include encoding/gob, encoding/json, and encoding/xml. As a</description></item><item><title>exec</title><link>https://before80.github.io/go_docs/stdLib/os/exec/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/os/exec/</guid><description>原文：https://pkg.go.dev/os/exec@go1.24.2 Package exec runs external commands. It wraps os.StartProcess to make it easier to remap stdin and stdout, connect I/O with pipes, and do other adjustments. ​ exec包可</description></item><item><title>fcgi</title><link>https://before80.github.io/go_docs/stdLib/net/http_fcgi/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/net/http_fcgi/</guid><description>原文：https://pkg.go.dev/net/http/fcgi@go1.24.2 Package fcgi implements the FastCGI protocol. ​ fcgi 包实现了 FastCGI 协议。 See https://fast-cgi.github.io/ for an unofficial mirror of the original documentation.</description></item><item><title>filepath</title><link>https://before80.github.io/go_docs/stdLib/path/filepath/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/path/filepath/</guid><description>原文：https://pkg.go.dev/path/filepath@go1.24.2 Package filepath implements utility routines for manipulating filename paths in a way compatible with the target operating system-defined file paths. ​ filepath 包实现了</description></item><item><title>fnv</title><link>https://before80.github.io/go_docs/stdLib/hash/fnv/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/hash/fnv/</guid><description>原文：https://pkg.go.dev/hash/fnv@go1.24.2 Package fnv implements FNV-1 and FNV-1a, non-cryptographic hash functions created by Glenn Fowler, Landon Curt Noll, and Phong Vo. See https://en.wikipedia.org/wiki/Fowler-Noll-Vo_hash_function. ​ 包 fnv 实现 FNV-1 和 FNV</description></item><item><title>format</title><link>https://before80.github.io/go_docs/stdLib/go/format/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/go/format/</guid><description>原文：https://pkg.go.dev/go/format@go1.24.2 Package format implements standard formatting of Go source. ​ format 包实现 Go 源代码的标准格式化。 Note that formatting of Go source</description></item><item><title>fs</title><link>https://before80.github.io/go_docs/stdLib/io/fs/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/io/fs/</guid><description>原文：https://pkg.go.dev/io/fs@go1.24.2 Package fs defines basic interfaces to a file system. A file system can be provided by the host operating system but also by other packages. ​ fs包定义了与文</description></item><item><title>fstest</title><link>https://before80.github.io/go_docs/stdLib/testing/fstest/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/testing/fstest/</guid><description>原文：https://pkg.go.dev/testing/fstest@go1.24.2 Package fstest implements support for testing implementations and users of file systems. ​ fstest包实现了用于</description></item><item><title>gif</title><link>https://before80.github.io/go_docs/stdLib/image/gif/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/image/gif/</guid><description>原文：https://pkg.go.dev/image/gif@go1.24.2 Package gif implements a GIF image decoder and encoder. ​ gif 包实现了一个 GIF 图像解码器和编码器。 The GIF</description></item><item><title>gob</title><link>https://before80.github.io/go_docs/stdLib/encoding/gob/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/encoding/gob/</guid><description>原文：https://pkg.go.dev/encoding/gob@go1.24.2 Package gob manages streams of gobs - binary values exchanged between an Encoder (transmitter) and a Decoder (receiver). A typical use is transporting arguments and results of</description></item><item><title>gosym</title><link>https://before80.github.io/go_docs/stdLib/debug/gosym/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/debug/gosym/</guid><description>原文：https://pkg.go.dev/debug/gosym@go1.24.2 Package gosym implements access to the Go symbol and line number tables embedded in Go binaries generated by the gc compilers. ​ gosym 包实现了对</description></item><item><title>hash</title><link>https://before80.github.io/go_docs/stdLib/hash/hash/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/hash/hash/</guid><description>原文：https://pkg.go.dev/hash@go1.24.2 Package hash provides interfaces for hash functions. hash 包提供了哈希函数的接口。 Example (BinaryMarshaler) 1 2 3 4 5 6 7 8 9 10 11 12 13</description></item><item><title>hex</title><link>https://before80.github.io/go_docs/stdLib/encoding/hex/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/encoding/hex/</guid><description>原文：https://pkg.go.dev/encoding/hex@go1.24.2 Package hex implements hexadecimal encoding and decoding. ​ hex包实现了十六进制的编码和解码。 常</description></item><item><title>hmac</title><link>https://before80.github.io/go_docs/stdLib/crypto/hmac/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/crypto/hmac/</guid><description>原文：https://pkg.go.dev/crypto/hmac@go1.24.2 Package hmac implements the Keyed-Hash Message Authentication Code (HMAC) as defined in U.S. Federal Information Processing Standards Publication 198. An HMAC is a cryptographic hash that uses a</description></item><item><title>html</title><link>https://before80.github.io/go_docs/stdLib/html/html/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/html/html/</guid><description>原文：https://pkg.go.dev/html@go1.24.2 Package html provides functions for escaping and unescaping HTML text. ​ html包提供了用于转义和反转义HTML文本的函</description></item><item><title>http</title><link>https://before80.github.io/go_docs/stdLib/net/http/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/net/http/</guid><description>原文：https://pkg.go.dev/net/http@go1.24.2 Package http provides HTTP client and server implementations. ​ http包提供了 HTTP 客户端和服务端的实现。 Get, Head,</description></item><item><title>http/cgi</title><link>https://before80.github.io/go_docs/stdLib/net/http_cgi/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/net/http_cgi/</guid><description>原文：https://pkg.go.dev/net/http/cgi@go1.24.2 Package cgi implements CGI (Common Gateway Interface) as specified in RFC 3875. ​ cgi 包实现了 CGI（通用网关接</description></item><item><title>http/cookiejar</title><link>https://before80.github.io/go_docs/stdLib/net/http_cookiejar/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/net/http_cookiejar/</guid><description>原文：https://pkg.go.dev/net/http/cookiejar@go1.24.2 Package cookiejar implements an in-memory RFC 6265-compliant http.CookieJar. ​ cookiejar 包实现了一个内存中符合</description></item><item><title>http/httptest</title><link>https://before80.github.io/go_docs/stdLib/net/http_httptest/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/net/http_httptest/</guid><description>原文：https://pkg.go.dev/net/http/httptest@go1.24.2 Package httptest provides utilities for HTTP testing. ​ httptest 包提供了用于 HTTP 测试的实用工</description></item><item><title>http/httptrace</title><link>https://before80.github.io/go_docs/stdLib/net/http_httptrace/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/net/http_httptrace/</guid><description>原文：https://pkg.go.dev/net/http/httptrace@go1.24.2 Package httptrace provides mechanisms to trace the events within HTTP client requests. ​ httptrace 包提供了在 HTTP 客</description></item><item><title>http/httputil</title><link>https://before80.github.io/go_docs/stdLib/net/http_httputil/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/net/http_httputil/</guid><description>原文：https://pkg.go.dev/net/http/httputil@go1.24.2 Package httputil provides HTTP utility functions, complementing the more common ones in the net/http package. ​ httputil 包提供了 HTTP</description></item><item><title>http/pprof</title><link>https://before80.github.io/go_docs/stdLib/net/http_pprof/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/net/http_pprof/</guid><description>原文：https://pkg.go.dev/net/http/pprof@go1.24.2 Package pprof serves via its HTTP server runtime profiling data in the format expected by the pprof visualization tool. ​ pprof 包通过其</description></item><item><title>image</title><link>https://before80.github.io/go_docs/stdLib/image/image/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/image/image/</guid><description>原文：https://pkg.go.dev/image@go1.24.2 Package image implements a basic 2-D image library. ​ image 包实现了一个基本的 2-D 图像库。 The fundamental interface is called Image. An Image contains colors,</description></item><item><title>importer</title><link>https://before80.github.io/go_docs/stdLib/go/importer/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/go/importer/</guid><description>原文：https://pkg.go.dev/go/importer@go1.24.2 Package importer provides access to export data importers. ​ importer 包提供对导出数据导入器的访问。 常量 This</description></item><item><title>io</title><link>https://before80.github.io/go_docs/stdLib/io/io/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/io/io/</guid><description>原文：https://pkg.go.dev/io@go1.24.2 Package io provides basic interfaces to I/O primitives. Its primary job is to wrap existing implementations of such primitives, such as those in package os, into shared public interfaces that abstract the functionality, plus some other related</description></item><item><title>iotest</title><link>https://before80.github.io/go_docs/stdLib/testing/iotest/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/testing/iotest/</guid><description>原文：https://pkg.go.dev/testing/iotest@go1.24.2 Package iotest implements Readers and Writers useful mainly for testing. ​ iotest 包实现了一些用于测试的 Reader 和</description></item><item><title>ioutil</title><link>https://before80.github.io/go_docs/stdLib/io/ioutil/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/io/ioutil/</guid><description>原文：https://pkg.go.dev/io/ioutil@go1.24.2 Package ioutil implements some I/O utility functions. Deprecated: As of Go 1.16, the same functionality is now provided by package io or package os, and those implementations should be preferred</description></item><item><title>jpeg</title><link>https://before80.github.io/go_docs/stdLib/image/jpeg/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/image/jpeg/</guid><description>原文：https://pkg.go.dev/image/jpeg@go1.24.2 Package jpeg implements a JPEG image decoder and encoder. ​ jpeg 包实现了一个 JPEG 图像解码器和编码器。 JPEG</description></item><item><title>js</title><link>https://before80.github.io/go_docs/stdLib/syscall/js/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/syscall/js/</guid><description>原文：https://pkg.go.dev/syscall/js@go1.24.2 Package js gives access to the WebAssembly host environment when using the js/wasm architecture. Its API is based on JavaScript semantics. ​ js 包在使用 js/wasm 架</description></item><item><title>json</title><link>https://before80.github.io/go_docs/stdLib/encoding/json/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/encoding/json/</guid><description>原文：https://pkg.go.dev/encoding/json@go1.24.2 Package json implements encoding and decoding of JSON as defined in RFC 7159. The mapping between JSON and Go values is described in the documentation for</description></item><item><title>log</title><link>https://before80.github.io/go_docs/stdLib/log/log/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/log/log/</guid><description>原文：https://pkg.go.dev/log@go1.24.2 Package log implements a simple logging package. It defines a type, Logger, with methods for formatting output. It also has a predefined &amp;lsquo;standard&amp;rsquo; Logger accessible through helper functions Print[f|ln], Fatal[f|ln], and Panic[f|ln], which are easier to</description></item><item><title>logAnalysis</title><link>https://before80.github.io/go_docs/stdLib/log/logAnalysis/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/log/logAnalysis/</guid><description>log包分析 参考网址： 掘金——Go语言之log包源码分析 InfoQ - Go 入门很简单：如何在 Go 中使用日志包 Tony Bai - 聊聊Go应用输出日志的工程实践</description></item><item><title>macho</title><link>https://before80.github.io/go_docs/stdLib/debug/macho/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/debug/macho/</guid><description>原文：https://pkg.go.dev/debug/macho@go1.24.2 Package macho implements access to Mach-O object files. ​ macho 包实现了对 Mach-O 目标文件的访问。 Security 安全性</description></item><item><title>mail</title><link>https://before80.github.io/go_docs/stdLib/net/mail/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/net/mail/</guid><description>原文：https://pkg.go.dev/net/mail@go1.24.2 Package mail implements parsing of mail messages. ​ mail 包实现了邮件消息的解析。 For the most part, this package follows the syntax as</description></item><item><title>maphash</title><link>https://before80.github.io/go_docs/stdLib/hash/maphash/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/hash/maphash/</guid><description>原文：https://pkg.go.dev/hash/maphash@go1.24.2 Package maphash provides hash functions on byte sequences. These hash functions are intended to be used to implement hash tables or other data structures that need to</description></item><item><title>math</title><link>https://before80.github.io/go_docs/stdLib/math/math/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/math/math/</guid><description>原文：https://pkg.go.dev/math@go1.24.2 Package math provides basic constants and mathematical functions. ​ math包提供基本常量和数学函数。 This package does not guarantee bit-identical results across architectures.</description></item><item><title>md5</title><link>https://before80.github.io/go_docs/stdLib/crypto/md5/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/crypto/md5/</guid><description>原文：https://pkg.go.dev/crypto/md5@go1.24.2 Package md5 implements the MD5 hash algorithm as defined in RFC 1321. ​ Package md5 实现 RFC 1321 中定义的 MD5 哈希算法。</description></item><item><title>metrics</title><link>https://before80.github.io/go_docs/stdLib/runtime/metrics/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/runtime/metrics/</guid><description>原文：https://pkg.go.dev/runtime/metrics@go1.24.2 Package metrics provides a stable interface to access implementation-defined metrics exported by the Go runtime. This package is similar to existing functions like runtime.ReadMemStats</description></item><item><title>mime</title><link>https://before80.github.io/go_docs/stdLib/mime/mime/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/mime/mime/</guid><description>原文：https://pkg.go.dev/mime@go1.24.2 Package mime implements parts of the MIME spec. ​ mime 包实现了 MIME 规范的部分内容。 常量 View Source 1 2 3 4 5 6 const (</description></item><item><title>multipart</title><link>https://before80.github.io/go_docs/stdLib/mime/multipart/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/mime/multipart/</guid><description>原文：https://pkg.go.dev/mime/multipart@go1.24.2 Package multipart implements MIME multipart parsing, as defined in RFC 2046. ​ Package multipart 实现 MIME multipart 解析，如 RFC 2046 中</description></item><item><title>net</title><link>https://before80.github.io/go_docs/stdLib/net/net/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/net/net/</guid><description>原文：https://pkg.go.dev/net@go1.24.2 Package net provides a portable interface for network I/O, including TCP/IP, UDP, domain name resolution, and Unix domain sockets. ​ net包提供了一个可移植的网络 I/O</description></item><item><title>netip</title><link>https://before80.github.io/go_docs/stdLib/net/netip/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/net/netip/</guid><description>原文：https://pkg.go.dev/net/netip@go1.24.2 Package netip defines an IP address type that’s a small value type. Building on that Addr type, the package also defines AddrPort (an IP address</description></item><item><title>os</title><link>https://before80.github.io/go_docs/stdLib/os/os/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/os/os/</guid><description>原文：https://pkg.go.dev/os@go1.24.2 Package os provides a platform-independent interface to operating system functionality. The design is Unix-like, although the error handling is Go-like; failing calls return values of type error rather than error numbers. Often, more information is available within</description></item><item><title>parser</title><link>https://before80.github.io/go_docs/stdLib/go/parser/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/go/parser/</guid><description>原文：https://pkg.go.dev/go/parser@go1.24.2 Package parser implements a parser for Go source files. Input may be provided in a variety of forms (see the various Parse* functions); the output is an abstract syntax tree</description></item><item><title>path</title><link>https://before80.github.io/go_docs/stdLib/path/path/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/path/path/</guid><description>原文：https://pkg.go.dev/path@go1.24.2 Package path implements utility routines for manipulating slash-separated paths. ​ path包实现了用于操作斜杠分隔路径的实用程序函数</description></item><item><title>pe</title><link>https://before80.github.io/go_docs/stdLib/debug/pe/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/debug/pe/</guid><description>原文：https://pkg.go.dev/debug/pe@go1.24.2 Package pe implements access to PE (Microsoft Windows Portable Executable) files. ​ pe 包实现对 PE（Microsoft Windows Portable</description></item><item><title>pem</title><link>https://before80.github.io/go_docs/stdLib/encoding/pem/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/encoding/pem/</guid><description>原文：https://pkg.go.dev/encoding/pem@go1.24.2 Package pem implements the PEM data encoding, which originated in Privacy Enhanced Mail. The most common use of PEM encoding today is in TLS keys and certificates.</description></item><item><title>plan9obj</title><link>https://before80.github.io/go_docs/stdLib/debug/plan9obj/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/debug/plan9obj/</guid><description>原文：https://pkg.go.dev/debug/plan9obj@go1.24.2 Package plan9obj implements access to Plan 9 a.out object files. ​ plan9obj 包实现对 Plan 9 a.out 对象文件的访</description></item><item><title>png</title><link>https://before80.github.io/go_docs/stdLib/image/png/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/image/png/</guid><description>原文：https://pkg.go.dev/image/png@go1.24.2 Package png implements a PNG image decoder and encoder. ​ png 包实现了一个 PNG 图像解码器和编码器。 The PNG</description></item><item><title>pprof</title><link>https://before80.github.io/go_docs/stdLib/runtime/pprof/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/runtime/pprof/</guid><description>原文：https://pkg.go.dev/runtime/pprof@go1.24.2 Package pprof writes runtime profiling data in the format expected by the pprof visualization tool. ​ pprof 包以 pprof 可视化工具期</description></item><item><title>printer</title><link>https://before80.github.io/go_docs/stdLib/go/printer/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/go/printer/</guid><description>原文：https://pkg.go.dev/go/printer@go1.24.2 Package printer implements printing of AST nodes. ​ Package printer 实现 AST 节点的打印。 常量 This section is empty. 变量 This section</description></item><item><title>quick</title><link>https://before80.github.io/go_docs/stdLib/testing/quick/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/testing/quick/</guid><description>原文：https://pkg.go.dev/testing/quick@go1.24.2 Package quick implements utility functions to help with black box testing. ​ quick包实现了一些实用的</description></item><item><title>quotedprintable</title><link>https://before80.github.io/go_docs/stdLib/mime/quotedprintable/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/mime/quotedprintable/</guid><description>原文：https://pkg.go.dev/mime/quotedprintable@go1.24.2 Package quotedprintable implements quoted-printable encoding as specified by RFC 2045. ​ Package quotedprintable 实现 RFC 2045 中指</description></item><item><title>race</title><link>https://before80.github.io/go_docs/stdLib/runtime/race/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/runtime/race/</guid><description>原文：https://pkg.go.dev/runtime/race@go1.24.2 Package race implements data race detection logic. No public interface is provided. For details about the race detector see https://golang.org/doc/articles/race_detector.html ​ race 包实现数据</description></item><item><title>rand</title><link>https://before80.github.io/go_docs/stdLib/crypto/rand/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/crypto/rand/</guid><description>原文：https://pkg.go.dev/crypto/rand@go1.24.2 Package rand implements a cryptographically secure random number generator. ​ Package rand 实现了一个密码安全随机数生成器。</description></item><item><title>rand</title><link>https://before80.github.io/go_docs/stdLib/math/rand/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/math/rand/</guid><description>原文：https://pkg.go.dev/math/rand@go1.24.2 Package rand implements pseudo-random number generators unsuitable for security-sensitive work. ​ rand包实现了伪随机数生成器，不适合</description></item><item><title>rc4</title><link>https://before80.github.io/go_docs/stdLib/crypto/rc4/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/crypto/rc4/</guid><description>原文：https://pkg.go.dev/crypto/rc4@go1.24.2 Package rc4 implements RC4 encryption, as defined in Bruce Schneier&amp;rsquo;s Applied Cryptography. ​ rc4 包实现 RC4 加密，如 Bruce Schneier 的应用密码</description></item><item><title>regexp</title><link>https://before80.github.io/go_docs/stdLib/regexp/regexp/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/regexp/regexp/</guid><description>原文：https://pkg.go.dev/regexp@go1.24.2 Package regexp implements regular expression search. ​ regexp包实现了正则表达式搜索。 The syntax of the regular expressions accepted is</description></item><item><title>rpc</title><link>https://before80.github.io/go_docs/stdLib/net/rpc/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/net/rpc/</guid><description>原文：https://pkg.go.dev/net/rpc@go1.24.2 Package rpc provides access to the exported methods of an object across a network or other I/O connection. A server registers an object, making it visible as a service with the name</description></item><item><title>rpc/jsonrpc</title><link>https://before80.github.io/go_docs/stdLib/net/rpc_jsonrpc/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/net/rpc_jsonrpc/</guid><description>原文：https://pkg.go.dev/net/rpc/jsonrpc@go1.24.2 Package jsonrpc implements a JSON-RPC 1.0 ClientCodec and ServerCodec for the rpc package. For JSON-RPC 2.0 support, see https://godoc.org/?q=json-rpc+2.0 ​ Package jsonrpc 实现</description></item><item><title>rsa</title><link>https://before80.github.io/go_docs/stdLib/crypto/rsa/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/crypto/rsa/</guid><description>原文：https://pkg.go.dev/crypto/rsa@go1.24.2 Package rsa implements RSA encryption as specified in PKCS #1 and RFC 8017. ​ RSA 包实现了 PKCS #1 和 RFC 8017 中指定的 RSA</description></item><item><title>runtime</title><link>https://before80.github.io/go_docs/stdLib/runtime/runtime/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/runtime/runtime/</guid><description>原文：https://pkg.go.dev/runtime@go1.24.2 Package runtime contains operations that interact with Go&amp;rsquo;s runtime system, such as functions to control goroutines. It also includes the low-level type information used by the reflect package; see reflect&amp;rsquo;s documentation for</description></item><item><title>scanner</title><link>https://before80.github.io/go_docs/stdLib/go/scanner/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/go/scanner/</guid><description>原文：https://pkg.go.dev/go/scanner@go1.24.2 Package scanner implements a scanner for Go source text. It takes a []byte as source which can then be tokenized through repeated calls to the Scan method. ​ scanner</description></item><item><title>scanner</title><link>https://before80.github.io/go_docs/stdLib/text/scanner/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/text/scanner/</guid><description>原文：https://pkg.go.dev/text/scanner@go1.24.2 Package scanner provides a scanner and tokenizer for UTF-8-encoded text. It takes an io.Reader providing the source, which then can be tokenized through repeated calls to the</description></item><item><title>sha1</title><link>https://before80.github.io/go_docs/stdLib/crypto/sha1/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/crypto/sha1/</guid><description>原文：https://pkg.go.dev/crypto/sha1@go1.24.2 Package sha1 implements the SHA-1 hash algorithm as defined in RFC 3174. ​ sha1 包实现了 RFC 3174 中定义的 SHA-1 哈希算</description></item><item><title>sha256</title><link>https://before80.github.io/go_docs/stdLib/crypto/sha256/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/crypto/sha256/</guid><description>原文：https://pkg.go.dev/crypto/sha256@go1.24.2 Package sha256 implements the SHA224 and SHA256 hash algorithms as defined in FIPS 180-4. ​ sha256 包实现 FIPS 180-4 中定义的 SHA224</description></item><item><title>sha512</title><link>https://before80.github.io/go_docs/stdLib/crypto/sha512/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/crypto/sha512/</guid><description>原文：https://pkg.go.dev/crypto/sha512@go1.24.2 Package sha512 implements the SHA-384, SHA-512, SHA-512/224, and SHA-512/256 hash algorithms as defined in FIPS 180-4. ​ sha512 包实现 FIPS 180-4 中定义</description></item><item><title>signal</title><link>https://before80.github.io/go_docs/stdLib/os/signal/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/os/signal/</guid><description>原文：https://pkg.go.dev/os/signal@go1.24.2 Package signal implements access to incoming signals. ​ signal包实现对进入的信号的访问。 Signals are primarily</description></item><item><title>smtp</title><link>https://before80.github.io/go_docs/stdLib/net/smtp/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/net/smtp/</guid><description>原文：https://pkg.go.dev/net/smtp@go1.24.2 Package smtp implements the Simple Mail Transfer Protocol as defined in RFC 5321. It also implements the following extensions: ​ smtp 包实现了 RFC 5321 中定义的</description></item><item><title>sql</title><link>https://before80.github.io/go_docs/stdLib/database/sql/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/database/sql/</guid><description>原文：https://pkg.go.dev/database/sql@go1.24.2 关系图 Package sql provides a generic interface around SQL (or SQL-like) databases. ​ sql包提供了一个围绕S</description></item><item><title>sql/driver</title><link>https://before80.github.io/go_docs/stdLib/database/sql_driver/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/database/sql_driver/</guid><description>原文：https://pkg.go.dev/database/sql/driver@go1.24.2 Package driver defines interfaces to be implemented by database drivers as used by package sql. ​ driv</description></item><item><title>subtle</title><link>https://before80.github.io/go_docs/stdLib/crypto/subtle/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/crypto/subtle/</guid><description>原文：https://pkg.go.dev/crypto/subtle@go1.24.2 Package subtle implements functions that are often useful in cryptographic code but require careful thought to use correctly. ​ Package subtle 实现通常在</description></item><item><title>suffixarray</title><link>https://before80.github.io/go_docs/stdLib/idx/suffixarray/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/idx/suffixarray/</guid><description>原文：https://pkg.go.dev/index/suffixarray@go1.24.2 Package suffixarray implements substring search in logarithmic time using an in-memory suffix array. ​ suffixarray 包实现使用内存</description></item><item><title>sync</title><link>https://before80.github.io/go_docs/stdLib/sync/sync/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/sync/sync/</guid><description>原文：https://pkg.go.dev/sync@go1.24.2 Package sync provides basic synchronization primitives such as mutual exclusion locks. Other than the Once and WaitGroup types, most are intended for use by low-level library routines. Higher-level synchronization is better done via channels and</description></item><item><title>syntax</title><link>https://before80.github.io/go_docs/stdLib/regexp/syntax/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/regexp/syntax/</guid><description>原文：https://pkg.go.dev/regexp/syntax@go1.24.2 Package syntax parses regular expressions into parse trees and compiles parse trees into programs. Most clients of regular expressions will use the facilities of package regexp</description></item><item><title>syscall</title><link>https://before80.github.io/go_docs/stdLib/syscall/syscall/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/syscall/syscall/</guid><description>原文：https://pkg.go.dev/syscall@go1.24.2 Package syscall contains an interface to the low-level operating system primitives. The details vary depending on the underlying system, and by default, godoc will display the syscall documentation for the current system.</description></item><item><title>syslog</title><link>https://before80.github.io/go_docs/stdLib/log/syslog/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/log/syslog/</guid><description>原文：https://pkg.go.dev/log/syslog@go1.24.2 Package syslog provides a simple interface to the system log service. It can send messages to the syslog daemon using UNIX domain sockets, UDP or TCP. ​ sy</description></item><item><title>tabwriter</title><link>https://before80.github.io/go_docs/stdLib/text/tabwriter/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/text/tabwriter/</guid><description>原文：https://pkg.go.dev/text/tabwriter@go1.24.2 Package tabwriter implements a write filter (tabwriter.Writer) that translates tabbed columns in input into properly aligned text. ​ tabwrit</description></item><item><title>template</title><link>https://before80.github.io/go_docs/stdLib/html/template/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/html/template/</guid><description>原文：https://pkg.go.dev/html/template@go1.24.2 GO-2023-1703: Templates do not properly consider backticks (`) as Javascript string delimiters, and do not escape them as expected. Backticks are used, since ES6, for JS</description></item><item><title>template</title><link>https://before80.github.io/go_docs/stdLib/text/template/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/text/template/</guid><description>原文：https://pkg.go.dev/text/template@go1.24.2 Package template implements data-driven templates for generating textual output. ​ template 包实现了基于数据驱动的模板，用</description></item><item><title>template/parse</title><link>https://before80.github.io/go_docs/stdLib/text/template_parse/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/text/template_parse/</guid><description>原文：https://pkg.go.dev/text/template/parse@go1.24.2 Package parse builds parse trees for templates as defined by text/template and html/template. Clients should use those packages to construct</description></item><item><title>testing</title><link>https://before80.github.io/go_docs/stdLib/testing/testing/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/testing/testing/</guid><description>原文：https://pkg.go.dev/testing@go1.24.2 Package testing provides support for automated testing of Go packages. It is intended to be used in concert with the &amp;ldquo;go test&amp;rdquo; command, which automates execution of any function of the form</description></item><item><title>textproto</title><link>https://before80.github.io/go_docs/stdLib/net/textproto/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/net/textproto/</guid><description>原文：https://pkg.go.dev/net/textproto@go1.24.2 Package textproto implements generic support for text-based request/response protocols in the style of HTTP, NNTP, and SMTP. ​ textproto 包为 HTTP、</description></item><item><title>time</title><link>https://before80.github.io/go_docs/stdLib/time/time/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/time/time/</guid><description>原文：https://pkg.go.dev/time@go1.24.2 Package time provides functionality for measuring and displaying time. ​ time包提供了测量和显示时间的功能。 The calendrical calculations always assume a</description></item><item><title>tls</title><link>https://before80.github.io/go_docs/stdLib/crypto/tls/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/crypto/tls/</guid><description>原文：https://pkg.go.dev/crypto/tls@go1.24.2 Package tls partially implements TLS 1.2, as specified in RFC 5246, and TLS 1.3, as specified in RFC 8446. ​ tls 包部分实现了 TLS 1</description></item><item><title>token</title><link>https://before80.github.io/go_docs/stdLib/go/token/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/go/token/</guid><description>原文：https://pkg.go.dev/go/token@go1.24.2 Package token defines constants representing the lexical tokens of the Go programming language and basic operations on tokens (printing, predicates). ​ token 包定义表示 Go 编程语</description></item><item><title>trace</title><link>https://before80.github.io/go_docs/stdLib/runtime/trace/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/runtime/trace/</guid><description>原文：https://pkg.go.dev/runtime/trace@go1.24.2 Package trace contains facilities for programs to generate traces for the Go execution tracer. ​ trace 包包含程序为 Go 执行跟</description></item><item><title>types</title><link>https://before80.github.io/go_docs/stdLib/go/types/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/go/types/</guid><description>原文：https://pkg.go.dev/go/types@go1.24.2 Package types declares the data types and implements the algorithms for type-checking of Go packages. Use Config.Check to invoke the type checker for a package. Alternatively, create a new type checker</description></item><item><title>tzdata</title><link>https://before80.github.io/go_docs/stdLib/time/tzdata/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/time/tzdata/</guid><description>原文：https://pkg.go.dev/time/tzdata@go1.24.2 Package tzdata provides an embedded copy of the timezone database. If this package is imported anywhere in the program, then if the time package cannot find tzdata files</description></item><item><title>url</title><link>https://before80.github.io/go_docs/stdLib/net/url/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/net/url/</guid><description>原文：https://pkg.go.dev/net/url@go1.24.2 Package url parses URLs and implements query escaping. ​ url 包解析 URL 并实现查询转义。 常量 This section is empty. 变量 This section</description></item><item><title>user</title><link>https://before80.github.io/go_docs/stdLib/os/user/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/os/user/</guid><description>原文：https://pkg.go.dev/os/user@go1.24.2 Package user allows user account lookups by name or id. ​ user包允许按名称或 ID 查找用户帐户。 For most</description></item><item><title>x509</title><link>https://before80.github.io/go_docs/stdLib/crypto/x509/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/crypto/x509/</guid><description>原文：https://pkg.go.dev/crypto/x509@go1.24.2 Package x509 implements a subset of the X.509 standard. ​ x509 包实现 X.509 标准的子集。 It allows parsing and generating certificates, certificate</description></item><item><title>x509/pkix</title><link>https://before80.github.io/go_docs/stdLib/crypto/x509_pkix/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/crypto/x509_pkix/</guid><description>原文：https://pkg.go.dev/crypto/x509/pkix@go1.24.2 Package pkix contains shared, low level structures used for ASN.1 parsing and serialization of X.509 certificates, CRL and OCSP. ​ pkix 包包</description></item><item><title>xml</title><link>https://before80.github.io/go_docs/stdLib/encoding/xml/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/encoding/xml/</guid><description>原文：https://pkg.go.dev/encoding/xml@go1.24.2 Package xml implements a simple XML 1.0 parser that understands XML name spaces. ​ xml包实现了一个简单的X</description></item><item><title>addr2line</title><link>https://before80.github.io/go_docs/cmd/addr2line/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/addr2line/</guid><description>addr2line 原文：https://pkg.go.dev/cmd/addr2line@go1.19.3 Overview 概述 Addr2line is a minimal simulation of the GNU addr2line tool, just enough to support pprof. ​ addr2l</description></item><item><title>api</title><link>https://before80.github.io/go_docs/cmd/api/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/api/</guid><description>api 原文：https://pkg.go.dev/cmd/api@go1.19.3 Overview Api computes the exported API of a set of Go packages. ​ api计算一组Go包的导出API。 ===</description></item><item><title>asm</title><link>https://before80.github.io/go_docs/cmd/asm/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/asm/</guid><description>asm 原文：https://pkg.go.dev/cmd/asm@go1.19.3 Overview 概述 Asm, typically invoked as “go tool asm”, assembles the source file into an object file named for the basename of the argument</description></item><item><title>bufio</title><link>https://before80.github.io/go_docs/stdLib/bufio/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/bufio/</guid><description>原文：https://pkg.go.dev/bufio@go1.24.2 Package bufio implements buffered I/O. It wraps an io.Reader or io.Writer object, creating another object (Reader or Writer) that also implements the interface but provides buffering and some help for textual I/O. ​ b</description></item><item><title>buildid</title><link>https://before80.github.io/go_docs/cmd/buildid/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/buildid/</guid><description>buildid Overview Buildid displays or updates the build ID stored in a Go package or binary. ​ buildid 显示或更新存储在 Go 包或二进制文件中的构建 ID。 用法： ​ Usage: go tool buildid [-w] file By default, buildid prints the build ID found in the named file. If the -w option is given, buildid</description></item><item><title>builtin</title><link>https://before80.github.io/go_docs/stdLib/builtin/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/builtin/</guid><description>原文：https://pkg.go.dev/builtin@go1.24.2 Package builtin provides documentation for Go&amp;rsquo;s predeclared identifiers. The items documented here are not actually in package builtin but their descriptions here allow godoc to present documentation for the language&amp;rsquo;s special identifiers.</description></item><item><title>bytes</title><link>https://before80.github.io/go_docs/stdLib/bytes/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/bytes/</guid><description>原文：https://pkg.go.dev/bytes@go1.24.2 Package bytes implements functions for the manipulation of byte slices. It is analogous to the facilities of the strings package. ​ bytes包实现了操作字节</description></item><item><title>cgo</title><link>https://before80.github.io/go_docs/cmd/cgo/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/cgo/</guid><description>cgo 原文：https://pkg.go.dev/cmd/cgo@go1.19.3 Overview Cgo enables the creation of Go packages that call C code. ​ cgo 允许创建调用 C 代码的 Go 包。 Using cgo with the</description></item><item><title>compile</title><link>https://before80.github.io/go_docs/cmd/compile/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/compile/</guid><description>compile 原文：https://pkg.go.dev/cmd/compile@go1.19.3 Overview Compile, typically invoked as “go tool compile,” compiles a single Go package comprising the files named</description></item><item><title>context</title><link>https://before80.github.io/go_docs/stdLib/context/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/context/</guid><description>原文：https://pkg.go.dev/context@go1.24.2 Package context defines the Context type, which carries deadlines, cancellation signals, and other request-scoped values across API boundaries and between processes. ​ context包定义</description></item><item><title>cover</title><link>https://before80.github.io/go_docs/cmd/cover/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/cover/</guid><description>cover 原文：https://pkg.go.dev/cmd/cover@go1.19.3 Overview Cover is a program for analyzing the coverage profiles generated by &amp;lsquo;go test -coverprofile=cover.out&amp;rsquo;. ​ Cover 是一个用于分析“go test -</description></item><item><title>dist</title><link>https://before80.github.io/go_docs/cmd/dist/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/dist/</guid><description>dist 原文：https://pkg.go.dev/cmd/dist@go1.19.3 Overview Dist helps bootstrap, build, and test the Go distribution. ​ dist 帮助引导、构建和测试 Go 发行版。 Usage: ​ 用</description></item><item><title>doc</title><link>https://before80.github.io/go_docs/cmd/doc/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/doc/</guid><description>doc 原文：https://pkg.go.dev/cmd/doc@go1.19.3 Overview Doc (usually run as go doc) accepts zero, one or two arguments. ​ doc（通常作为 go doc 运行）接受零个</description></item><item><title>embed</title><link>https://before80.github.io/go_docs/stdLib/embed/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/embed/</guid><description>原文：https://pkg.go.dev/embed@go1.24.2 Package embed provides access to files embedded in the running Go program. ​ embed包提供了访问嵌入在运行的 Go 程序中</description></item><item><title>errors</title><link>https://before80.github.io/go_docs/stdLib/errors/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/errors/</guid><description>原文：https://pkg.go.dev/errors@go1.24.2 Package errors implements functions to manipulate errors. ​ errors 包实现了操作错误的函数。 The New function creates errors whose only content is a text message.</description></item><item><title>expvar</title><link>https://before80.github.io/go_docs/stdLib/expvar/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/expvar/</guid><description>原文：https://pkg.go.dev/expvar@go1.24.2 Package expvar provides a standardized interface to public variables, such as operation counters in servers. It exposes these variables via HTTP at /debug/vars in JSON format. As of Go 1.22, the /debug/vars request</description></item><item><title>fix</title><link>https://before80.github.io/go_docs/cmd/fix/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/fix/</guid><description>fix 原文：https://pkg.go.dev/cmd/fix@go1.19.3 Overview Fix finds Go programs that use old APIs and rewrites them to use newer ones. After you update to a new Go release, fix helps make the necessary changes to</description></item><item><title>flag</title><link>https://before80.github.io/go_docs/stdLib/flag/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/flag/</guid><description>原文：https://pkg.go.dev/flag@go1.24.2 Package flag implements command-line flag parsing. ​ flag包实现了命令行标志解析。 Usage Define flags using flag.String(), Bool(), Int(), etc. ​ 使用 f</description></item><item><title>fmt</title><link>https://before80.github.io/go_docs/stdLib/fmt/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/fmt/</guid><description>原文：https://pkg.go.dev/fmt@go1.24.2 Package fmt implements formatted I/O with functions analogous to C&amp;rsquo;s printf and scanf. The format &amp;lsquo;verbs&amp;rsquo; are derived from C&amp;rsquo;s but are simpler. ​ fmt包实现了类似于C的</description></item><item><title>godoc</title><link>https://before80.github.io/go_docs/cmd/godoc/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/godoc/</guid><description>godoc 原文：https://pkg.go.dev/golang.org/x/tools/cmd/godoc Overview 概述 Godoc extracts and generates documentation for Go programs. ​ godoc 提取并生成G</description></item><item><title>gofmt</title><link>https://before80.github.io/go_docs/cmd/gofmt/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gofmt/</guid><description>gofmt 原文：https://pkg.go.dev/cmd/gofmt@go1.19.3 Overview 概述 Gofmt formats Go programs. It uses tabs for indentation and blanks for alignment. Alignment assumes that an editor is using a fixed-width font. ​ go</description></item><item><title>gofmt 2</title><link>https://before80.github.io/go_docs/cmd/fmt/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/fmt/</guid><description>gofmt Gofmt formats Go programs. It uses tabs for indentation and blanks for alignment. Alignment assumes that an editor is using a fixed-width font. Without an explicit path, it processes the standard input. Given a file, it operates on that file; given a directory, it operates on all .go files in that directory, recursively. (Files starting with a period are ignored.) By default, gofmt prints the reformatted sources to standard</description></item><item><title>link</title><link>https://before80.github.io/go_docs/cmd/link/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/link/</guid><description>link 原文：https://pkg.go.dev/cmd/link@go1.19.3 Overview 概述 Link, typically invoked as “go tool link”, reads the Go archive or object for a package main, along with its</description></item><item><title>nm</title><link>https://before80.github.io/go_docs/cmd/nm/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/nm/</guid><description>nm 原文：https://pkg.go.dev/cmd/nm@go1.19.3 Overview 概述 Nm lists the symbols defined or used by an object file, archive, or executable. ​ nm列出对象文件、存案或可执</description></item><item><title>objabi</title><link>https://before80.github.io/go_docs/cmd/objabi/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/objabi/</guid><description/></item><item><title>objdump</title><link>https://before80.github.io/go_docs/cmd/objdump/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/objdump/</guid><description>objdump 原文：https://pkg.go.dev/cmd/objdump@go1.19.3 Overview Objdump disassembles executable files. ​ objdump 反汇编可执行文件。 Usage: ​ 用法： go tool objdump [-s symregexp] binary</description></item><item><title>pack</title><link>https://before80.github.io/go_docs/cmd/pack/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/pack/</guid><description>pack 原文：https://pkg.go.dev/cmd/pack@go1.19.3 Overview 概述 Pack is a simple version of the traditional Unix ar tool. It implements only the operations needed by Go. ​ pack是传统</description></item><item><title>plugin</title><link>https://before80.github.io/go_docs/stdLib/plugin/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/plugin/</guid><description>原文：https://pkg.go.dev/plugin@go1.24.2 Package plugin implements loading and symbol resolution of Go plugins. ​ plugin 包实现了Go插件的加载和符号解析。 A plugin is a</description></item><item><title>pprof</title><link>https://before80.github.io/go_docs/cmd/pprof/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/pprof/</guid><description>pprof 原文：https://pkg.go.dev/cmd/pprof@go1.19.3 Overview 概述 Pprof interprets and displays profiles of Go programs. ​ pprof 解释（interprets ）并显</description></item><item><title>reflect</title><link>https://before80.github.io/go_docs/stdLib/reflect/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/reflect/</guid><description>原文：https://pkg.go.dev/reflect@go1.24.2 Package reflect implements run-time reflection, allowing a program to manipulate objects with arbitrary types. The typical use is to take a value with static type interface{} and extract its dynamic type information</description></item><item><title>sort</title><link>https://before80.github.io/go_docs/stdLib/sort/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/sort/</guid><description>原文：https://pkg.go.dev/sort@go1.24.2 注意 ​ 从go1.21.0开始才有该包。 Package sort provides primitives for sorting slices and user-defined collections. ​ sort包</description></item><item><title>strconv</title><link>https://before80.github.io/go_docs/stdLib/strconv/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/strconv/</guid><description>原文：https://pkg.go.dev/strconv@go1.24.2 Package strconv implements conversions to and from string representations of basic data types. ​ strconv包实现了基本数据类型的</description></item><item><title>strings</title><link>https://before80.github.io/go_docs/stdLib/strings/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/strings/</guid><description>原文：https://pkg.go.dev/strings@go1.24.2 Package strings implements simple functions to manipulate UTF-8 encoded strings. ​ strings包实现了一些简单的函数来操作</description></item><item><title>test2json</title><link>https://before80.github.io/go_docs/cmd/test2json/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/test2json/</guid><description>test2json 原文：https://pkg.go.dev/cmd/test2json@go1.19.3 Overview Test2json converts go test output to a machine-readable JSON stream. ​ Test2json 将 go 测试输出转换为可供机</description></item><item><title>trace</title><link>https://before80.github.io/go_docs/cmd/trace/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/trace/</guid><description>trace 原文：https://pkg.go.dev/cmd/trace@go1.19.3 Overview 概述 Trace is a tool for viewing trace files. ​ trace 是一个查看跟踪文件的工具。 Trace files can</description></item><item><title>unsafe</title><link>https://before80.github.io/go_docs/stdLib/unsafe/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/unsafe/</guid><description>原文：https://pkg.go.dev/unsafe@go1.24.2 Package unsafe contains operations that step around the type safety of Go programs. ​ unsafe包包含了绕过Go程序类型安</description></item><item><title>vet</title><link>https://before80.github.io/go_docs/cmd/vet/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/vet/</guid><description>vet 原文：https://pkg.go.dev/cmd/vet@go1.19.3 Overview 概述 Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string. Vet uses heuristics that do not</description></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/abi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/abi/</guid><description>abi 原文：https://pkg.go.dev/internal/abi@go1.24.2 常量 View Source 1 2 3 4 5 6 7 8 9 10 11 const ( // RAX, RBX, RCX, RDI, RSI, R8, R9, R10,</description></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/buildcfg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/buildcfg/</guid><description>buildcfg 原文：https://pkg.go.dev/internal/buildcfg@go1.24.2 Package buildcfg provides access to the build configuration described by the current environment. It is for use by build tools such</description></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/bytealg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/bytealg/</guid><description>bytealg 原文：https://pkg.go.dev/internal/bytealg@go1.24.2 常量 View Source 1 const MaxBruteForce = 64 View Source 1 const PrimeRK = 16777619 PrimeRK is the prime base used</description></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/cfg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/cfg/</guid><description>cfg 原文：https://pkg.go.dev/internal/cfg@go1.24.2 Package cfg holds configuration shared by the Go command and internal/testenv. Definitions that don&amp;rsquo;t need to be exposed outside of cmd/go should be in cmd/go/internal/cfg instead</description></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/coverage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/coverage/</guid><description>coverage 原文：https://pkg.go.dev/internal/coverage@go1.24.2 常量 View Source 1 const CounterFilePref = &amp;#34;covcounters&amp;#34; CounterFilePref is the file prefix used when emitting coverage data output files.</description></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/coverage_calloc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/coverage_calloc/</guid><description>calloc 原文：https://pkg.go.dev/internal/coverage/calloc@go1.24.2 常量 This section is empty. 变量 This section is empty. 函数</description></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/coverage_cformat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/coverage_cformat/</guid><description>cformat 原文：https://pkg.go.dev/internal/coverage/cformat@go1.24.2 常量 This section is empty. 变量 This section is empty. 函</description></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/coverage_cmerge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/coverage_cmerge/</guid><description>cmerge 原文：https://pkg.go.dev/internal/coverage/cmerge@go1.24.2 常量 This section is empty. 变量 This section is empty. 函数</description></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/coverage_decodecounter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/coverage_decodecounter/</guid><description>decodecounter 原文：https://pkg.go.dev/internal/coverage/decodecounter@go1.24.2 常量 This section is empty. 变</description></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/coverage_decodemeta/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/coverage_decodemeta/</guid><description>decodemeta 原文：https://pkg.go.dev/internal/coverage/decodemeta@go1.24.2 常量 This section is empty. 变量 This section</description></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/coverage_encodecounter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/coverage_encodecounter/</guid><description>encodecounter 原文：https://pkg.go.dev/internal/coverage/encodecounter@go1.24.2 常量 This section is empty. 变</description></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/coverage_encodemeta/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/coverage_encodemeta/</guid><description>encodemeta 原文：https://pkg.go.dev/internal/coverage/encodemeta@go1.24.2 常量 This section is empty. 变量 This section</description></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/coverage_pods/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/coverage_pods/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/coverage_rtcov/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/coverage_rtcov/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/coverage_slicereader/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/coverage_slicereader/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/coverage_slicewriter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/coverage_slicewriter/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/coverage_stringtab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/coverage_stringtab/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/coverage_uleb128/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/coverage_uleb128/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/cpu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/cpu/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/dag/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/dag/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/diff/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/diff/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/fmtsort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/fmtsort/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/fuzz/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/fuzz/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/goarch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/goarch/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/godebug/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/godebug/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/goexperiment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/goexperiment/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/goos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/goos/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/goroot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/goroot/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/goversion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/goversion/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/intern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/intern/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/itoa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/itoa/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/lazyregexp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/lazyregexp/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/lazytemplate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/lazytemplate/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/nettrace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/nettrace/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/obsuretestada/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/obsuretestada/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/oserror/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/oserror/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/pkgbits/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/pkgbits/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/platform/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/platform/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/poll/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/poll/</guid><description>poll 原文：https://pkg.go.dev/internal/poll@go1.24.2 Package poll supports non-blocking I/O on file descriptors with polling. This supports I/O operations that block only a goroutine, not a thread. This is used</description></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/profile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/profile/</guid><description>profile 原文：https://pkg.go.dev/internal/profile@go1.24.2 Package profile provides a representation of github.com/google/pprof/proto/profile.proto and methods to encode/decode/merge profiles in this format. 常量 This section is empty. 变</description></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/race/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/race/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/reflectlite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/reflectlite/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/safefilepath/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/safefilepath/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/saferio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/saferio/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/singleflight/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/singleflight/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/syscall_execenv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/syscall_execenv/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/syscall_unix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/syscall_unix/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/syscall_windows/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/syscall_windows/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/syscall_windows_registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/syscall_windows_registry/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/syscall_windows_sysdll/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/syscall_windows_sysdll/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/sysinfo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/sysinfo/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/testenv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/testenv/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/testlog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/testlog/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/testpty/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/testpty/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/trace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/trace/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/txtar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/txtar/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/types_error/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/types_error/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/unsafehader/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/unsafehader/</guid><description/></item><item><title/><link>https://before80.github.io/go_docs/stdLib/internal/xcoff/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://before80.github.io/go_docs/stdLib/internal/xcoff/</guid><description/></item></channel></rss>