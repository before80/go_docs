<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>类型 on Go 中文档集</title><link>https://before80.github.io/go_docs/asu/basic/types/</link><description>Recent content in 类型 on Go 中文档集</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 13 Jul 2024 10:57:15 +0800</lastBuildDate><atom:link href="https://before80.github.io/go_docs/asu/basic/types/index.xml" rel="self" type="application/rss+xml"/><item><title>nil</title><link>https://before80.github.io/go_docs/asu/basic/types/nil/</link><pubDate>Sat, 13 Jul 2024 14:14:47 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/types/nil/</guid><description>注意 ​ nil并不是类型的一种！ 哪些类型的值的默认值是nil？ slice pointer map channel interface func 共6种预定义类型。</description></item><item><title>func</title><link>https://before80.github.io/go_docs/asu/basic/types/funcs/</link><pubDate>Sat, 13 Jul 2024 14:14:47 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/types/funcs/</guid><description/></item><item><title>byte</title><link>https://before80.github.io/go_docs/asu/basic/types/byte/</link><pubDate>Sat, 13 Jul 2024 14:13:07 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/types/byte/</guid><description/></item><item><title>rune</title><link>https://before80.github.io/go_docs/asu/basic/types/rune/</link><pubDate>Sat, 13 Jul 2024 14:12:58 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/types/rune/</guid><description/></item><item><title>string</title><link>https://before80.github.io/go_docs/asu/basic/types/string/</link><pubDate>Sat, 13 Jul 2024 14:04:51 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/types/string/</guid><description>字符串元素的类型是？ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 package main import &amp;#34;fmt&amp;#34; func main() { s1 := &amp;#34;你好世界！你好中国&amp;#34; s := s1[0] fmt.Printf(&amp;#34;%v,%c,%q,%b,%T,%T\n&amp;#34;, s, s, s, s, s, &amp;amp;s) s2 := &amp;#34;Hello World! Hello</description></item><item><title>array</title><link>https://before80.github.io/go_docs/asu/basic/types/array/</link><pubDate>Sat, 13 Jul 2024 14:04:33 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/types/array/</guid><description>说明 ​ mfp包来自：github.com/before80/utils/mfp 数组的底层数据结构 ​ 在Go语言中，数组的底层定义主要涉及到Go</description></item><item><title>slice</title><link>https://before80.github.io/go_docs/asu/basic/types/slice/</link><pubDate>Sat, 13 Jul 2024 14:04:45 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/types/slice/</guid><description/></item><item><title>map</title><link>https://before80.github.io/go_docs/asu/basic/types/map/</link><pubDate>Sat, 13 Jul 2024 14:05:04 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/types/map/</guid><description>关于map不得不知的知识点 map类型的默认值是nil； 1 2 3 var players map[string]int8 // map[], map[string]int8, 0, true fmt.Printf(&amp;#34;%[1]v, %[1]T, %d, %t\n&amp;#34;, players, len(players), players == nil) 当从map中请求不存在的键时，返回的是map值</description></item><item><title>pointer</title><link>https://before80.github.io/go_docs/asu/basic/types/pointer/</link><pubDate>Sat, 13 Jul 2024 14:14:10 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/types/pointer/</guid><description/></item><item><title>struct</title><link>https://before80.github.io/go_docs/asu/basic/types/struct/</link><pubDate>Sat, 13 Jul 2024 14:05:18 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/types/struct/</guid><description/></item><item><title>interface</title><link>https://before80.github.io/go_docs/asu/basic/types/interface/</link><pubDate>Sat, 13 Jul 2024 14:05:59 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/types/interface/</guid><description/></item><item><title>chan</title><link>https://before80.github.io/go_docs/asu/basic/types/chan/</link><pubDate>Sat, 13 Jul 2024 14:05:11 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/types/chan/</guid><description>会触发panic的通道操作 关闭值为nil的通道 1 2 3 4 5 6 7 8 9 10 11 12 13 14 package main import &amp;#34;fmt&amp;#34; func main() { defer func() { if r := recover(); r != nil { fmt.Println(&amp;#34;panic -&amp;gt; &amp;#34;, r) // panic -&amp;gt; close of nil channel } }() var ch</description></item><item><title>uintptr</title><link>https://before80.github.io/go_docs/asu/basic/types/uintptr/</link><pubDate>Sat, 13 Jul 2024 14:14:47 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/types/uintptr/</guid><description/></item><item><title>complex</title><link>https://before80.github.io/go_docs/asu/basic/types/complex/</link><pubDate>Sat, 13 Jul 2024 14:13:20 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/types/complex/</guid><description/></item></channel></rss>