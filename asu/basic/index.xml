<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>基础 on Go 中文档集</title><link>https://before80.github.io/go_docs/asu/basic/</link><description>Recent content in 基础 on Go 中文档集</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 13 Jul 2024 10:50:20 +0800</lastBuildDate><atom:link href="https://before80.github.io/go_docs/asu/basic/index.xml" rel="self" type="application/rss+xml"/><item><title>标识符</title><link>https://before80.github.io/go_docs/asu/basic/identifier/</link><pubDate>Sat, 13 Jul 2024 10:56:22 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/identifier/</guid><description>​ 在Go的语言规范中关于标识符的描述如下： Identifiers name program entities such as variables and types. An identifier is a sequence of one or more letters and digits. The first character in an identifier must be a letter. ​ 标识符命名程序实体，如变量和类型。</description></item><item><title>关键字</title><link>https://before80.github.io/go_docs/asu/basic/keyword/</link><pubDate>Sat, 13 Jul 2024 10:56:35 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/keyword/</guid><description>​ Go目前有25个关键字。 break default func interface select case defer go map struct chan else goto package switch const fallthrough if range type continue for import return var</description></item><item><title>常量</title><link>https://before80.github.io/go_docs/asu/basic/constant/</link><pubDate>Sat, 13 Jul 2024 10:56:49 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/constant/</guid><description>常量 # 常量 ## 常量名 ## 常量值 ### 布尔字面量 - true（也是预算声明的标识符） - false（也是预算声明的标识符） ### 整数字面量 ### 浮点数字面量 ### 复数</description></item><item><title>变量</title><link>https://before80.github.io/go_docs/asu/basic/variable/</link><pubDate>Sat, 13 Jul 2024 10:57:00 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/variable/</guid><description/></item><item><title>作用域</title><link>https://before80.github.io/go_docs/asu/basic/scope/</link><pubDate>Sat, 13 Jul 2024 10:58:24 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/scope/</guid><description/></item><item><title>表达式</title><link>https://before80.github.io/go_docs/asu/basic/expression/</link><pubDate>Sat, 13 Jul 2024 10:59:08 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/expression/</guid><description/></item><item><title>语句</title><link>https://before80.github.io/go_docs/asu/basic/statement/</link><pubDate>Sat, 13 Jul 2024 10:59:45 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/statement/</guid><description/></item><item><title>泛型</title><link>https://before80.github.io/go_docs/asu/basic/generic/</link><pubDate>Sat, 13 Jul 2024 11:13:29 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/generic/</guid><description/></item><item><title>init函数</title><link>https://before80.github.io/go_docs/asu/basic/initfunc/</link><pubDate>Sat, 13 Jul 2024 11:12:16 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/initfunc/</guid><description/></item><item><title>内置函数</title><link>https://before80.github.io/go_docs/asu/basic/builtinfunc/</link><pubDate>Sat, 13 Jul 2024 11:00:48 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/builtinfunc/</guid><description>目前有18个 append() 定义 1 func append(slice []Type, elems ...Type) []Type 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 PS F:\Hugos\go_docs&amp;gt; go doc builtin.append package builtin // import &amp;#34;builtin&amp;#34; func append(slice []Type, elems ...Type) []Type The append built-in function appends elements to the end of a slice. If it has sufficient capacity, the destination is resliced</description></item><item><title>defer、panic、recover</title><link>https://before80.github.io/go_docs/asu/basic/deferpanicrecover/</link><pubDate>Sat, 13 Jul 2024 11:12:06 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/deferpanicrecover/</guid><description/></item><item><title>包</title><link>https://before80.github.io/go_docs/asu/basic/packages/</link><pubDate>Sat, 13 Jul 2024 10:58:11 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/packages/</guid><description/></item><item><title>格式化与打印</title><link>https://before80.github.io/go_docs/asu/basic/fmtpnt/</link><pubDate>Sat, 13 Jul 2024 10:57:58 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/fmtpnt/</guid><description/></item><item><title>断言</title><link>https://before80.github.io/go_docs/asu/basic/assertion/</link><pubDate>Sat, 13 Jul 2024 11:01:58 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/assertion/</guid><description/></item><item><title>正则表达式</title><link>https://before80.github.io/go_docs/asu/basic/regexp/</link><pubDate>Sat, 13 Jul 2024 11:04:37 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/regexp/</guid><description/></item><item><title>context包</title><link>https://before80.github.io/go_docs/asu/basic/context/</link><pubDate>Sat, 13 Jul 2024 11:11:31 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/context/</guid><description>目前创建context的函数有哪些？ 这些context怎么使用？用在什么场景？</description></item><item><title>atomic包</title><link>https://before80.github.io/go_docs/asu/basic/atomic/</link><pubDate>Sat, 13 Jul 2024 13:46:03 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/atomic/</guid><description/></item><item><title>unsafe</title><link>https://before80.github.io/go_docs/asu/basic/unsafe/</link><pubDate>Sat, 13 Jul 2024 14:15:06 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/unsafe/</guid><description/></item><item><title>日志</title><link>https://before80.github.io/go_docs/asu/basic/log/</link><pubDate>Sat, 13 Jul 2024 11:07:55 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/log/</guid><description/></item><item><title>数学运算</title><link>https://before80.github.io/go_docs/asu/basic/math/</link><pubDate>Sat, 13 Jul 2024 11:10:38 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/math/</guid><description/></item><item><title>日期时间操作</title><link>https://before80.github.io/go_docs/asu/basic/time/</link><pubDate>Sat, 13 Jul 2024 11:10:44 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/time/</guid><description/></item><item><title>加密与解密</title><link>https://before80.github.io/go_docs/asu/basic/encryption/</link><pubDate>Sat, 13 Jul 2024 11:09:08 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/encryption/</guid><description/></item><item><title>序列化与反序列化</title><link>https://before80.github.io/go_docs/asu/basic/serialization/</link><pubDate>Sat, 13 Jul 2024 11:07:47 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/serialization/</guid><description/></item><item><title>打包、压缩、解压缩</title><link>https://before80.github.io/go_docs/asu/basic/compression/</link><pubDate>Sat, 13 Jul 2024 11:10:13 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/compression/</guid><description/></item><item><title>图片处理</title><link>https://before80.github.io/go_docs/asu/basic/images/</link><pubDate>Sat, 13 Jul 2024 11:10:30 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/images/</guid><description/></item><item><title>字符编码</title><link>https://before80.github.io/go_docs/asu/basic/characterencoding/</link><pubDate>Sat, 13 Jul 2024 14:07:47 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/characterencoding/</guid><description/></item><item><title>那些奇怪的用法</title><link>https://before80.github.io/go_docs/asu/basic/strange/</link><pubDate>Sat, 13 Jul 2024 11:14:41 +0800</pubDate><guid>https://before80.github.io/go_docs/asu/basic/strange/</guid><description>代码中的指令 //go:build //go:cgo_dynamic_linker //go:cgo_export_dynamic //go:cgo_export_static //go:cgo_import_dynamic //go:cgo_import_static //go:cgo_ldflag //go:cgo_unsafe_args //go:embed //go:generate //go:linkname //go:name //go:noescape //go:noinline //go:nosplit //go:registerparams //go:systemstack //go:uintptrescapes //go:xxx //go:yeswritebarrierrec 2006-01-02T15:04:05 有什么用？ fstest 中的 var _ fs.FS = MapFS(nil) 有什么用？ fstest 中的 var _ fs.File = (*openMapFile)(nil) 有什么用？ n := 2; fmt.Println(string(n)) 输出却是空的！或</description></item></channel></rss>