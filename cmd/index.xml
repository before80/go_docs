<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go命令 on Go 中文档集</title><link>https://before80.github.io/go_docs/cmd/</link><description>Recent content in go命令 on Go 中文档集</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 17 May 2023 13:22:45 +0800</lastBuildDate><atom:link href="https://before80.github.io/go_docs/cmd/index.xml" rel="self" type="application/rss+xml"/><item><title>全部命令</title><link>https://before80.github.io/go_docs/cmd/FullCommandReference/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/FullCommandReference/</guid><description>原文：https://pkg.go.dev/cmd Name Synopsis 简述 addr2line addr2line是对GNU addr2line工具的最小模拟，刚好足以支持ppr</description></item><item><title>go 命令首页表格</title><link>https://before80.github.io/go_docs/cmd/first_index_table/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/first_index_table/</guid><description>Command Documentation - 命令文档 原文：https://go.dev/doc/cmd There is a suite of programs to build and process Go source code. Instead of being run directly, programs in the suite are usually invoked by the go program. ​ 有一套程序用于构</description></item><item><title>go</title><link>https://before80.github.io/go_docs/cmd/go1_23/</link><pubDate>Fri, 06 Sep 2024 21:04:40 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/go1_23/</guid><description>Overview Go is a tool for managing Go source code. ​ Go 是一个用于管理 Go 源代码的工具。 Usage: go &amp;lt;command&amp;gt; [arguments] The commands are: ​ 可用的命令有： bug 开始一个错误报告 start a bug report build 编译包及其依赖项 compile packages and dependencies clean 移</description></item><item><title>go1.21</title><link>https://before80.github.io/go_docs/cmd/go/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/go/</guid><description>原文：https://pkg.go.dev/cmd/go@go1.21.5 Overview go Go is a tool for managing Go source code. ​ go 是管理go 源代码的工具。 Usage: ​ 用法： go &amp;lt;command&amp;gt; [arguments]</description></item><item><title>go1.19.3</title><link>https://before80.github.io/go_docs/cmd/go1/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/go1/</guid><description>go 原文：https://pkg.go.dev/cmd/go@go1.19.3 Overview 概述 ​ Go是一个管理Go源代码的工具。 用法： 1 go &amp;lt;command&amp;gt; [arguments] 这些命令（</description></item><item><title>go help build</title><link>https://before80.github.io/go_docs/cmd/gohelpbuild/</link><pubDate>Sat, 24 Feb 2024 11:12:32 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpbuild/</guid><description>usage: go build [-o output] [build flags] [packages] ​ 用法：go build [-o output] [build flags] [packages] Build compiles the packages named by the import paths, along with their dependencies, but it does not install the results. ​ build 编译由导入路径命名的包及其依赖项，但不会安装结果。 If the arguments</description></item><item><title>go help buildconstraint</title><link>https://before80.github.io/go_docs/cmd/gohelpbuildconstraint/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpbuildconstraint/</guid><description>A build constraint, also known as a build tag, is a condition under which a file should be included in the package. Build constraints are given by a line comment that begins ​ 构建约束，也称为构建标签，是在包中应包含文件的条件。构建约束由以 //go:build Constraints may appear in</description></item><item><title>go help buildmode</title><link>https://before80.github.io/go_docs/cmd/gohelpbuildmode/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpbuildmode/</guid><description>​ The &amp;lsquo;go build&amp;rsquo; and &amp;lsquo;go install&amp;rsquo; commands take a -buildmode argument which indicates which kind of object file is to be built. Currently supported values are: ​ &amp;lsquo;go build&amp;rsquo; 和 &amp;lsquo;go install&amp;rsquo; 命令接受一个 -buildmode 参数，指示要构建哪种类型的目标文件。当前支持的值有： -buildmode=archive ​ Build the</description></item><item><title>go help c</title><link>https://before80.github.io/go_docs/cmd/gohelpc/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpc/</guid><description>​ There are two different ways to call between Go and C/C++ code. ​ 有两种在 Go 与 C/C++ 代码之间进行调用的方法。 The first is the cgo tool, which is part of the Go distribution. For information on how to use it see the cgo documentation (go doc cmd/cgo). ​ 第一种是 cgo 工具，它</description></item><item><title>go help cache</title><link>https://before80.github.io/go_docs/cmd/gohelpcache/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpcache/</guid><description>​ The go command caches build outputs for reuse in future builds. The default location for cache data is a subdirectory named go-build in the standard user cache directory for the current operating system. Setting the GOCACHE environment variable overrides this default,and running &amp;lsquo;go env GOCACHE&amp;rsquo; prints the current cache directory. ​ go 命令会对构建输出进行缓存，以便在将</description></item><item><title>go help env</title><link>https://before80.github.io/go_docs/cmd/gohelpenv/</link><pubDate>Sat, 24 Feb 2024 10:56:10 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpenv/</guid><description>usage: go env [-json] [-u] [-w] [var &amp;hellip;] Env prints Go environment information. ​ Env 打印 Go 环境信息。 By default env prints information as a shell script (on Windows, a batch file). If one or more variable names is given as arguments, env prints the value of each named variable on its own line. ​ 默认情况下，env 将</description></item><item><title>go help environment</title><link>https://before80.github.io/go_docs/cmd/gohelpenvironment/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpenvironment/</guid><description>​ The go command and the tools it invokes consult environment variables for configuration. If an environment variable is unset or empty, the go command uses a sensible default setting. To see the effective setting of the variable &amp;lt;NAME&amp;gt;, run &amp;lsquo;go env &amp;lt;NAME&amp;gt;&amp;rsquo;. To change the default setting, run &amp;lsquo;go env -w &amp;lt;NAME&amp;gt;=&amp;lt;VALUE&amp;gt;&amp;rsquo;. Defaults changed using &amp;lsquo;go env -w&amp;rsquo; are recorded in a Go environment configuration file stored in the</description></item><item><title>go help filetype</title><link>https://before80.github.io/go_docs/cmd/gohelpfiletype/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpfiletype/</guid><description>extensions The go command examines the contents of a restricted set of files in each directory. It identifies which files to examine based on the extension of the file name. These extensions are: ​ go 命令检查每个目录中一组受限制的文件的内容。它根据文件名的扩展名来识别要</description></item><item><title>go help go.mod</title><link>https://before80.github.io/go_docs/cmd/gohelpgomod/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpgomod/</guid><description>​ A module version is defined by a tree of source files, with a go.mod file in its root. When the go command is run, it looks in the current directory and then successive parent directories to find the go.mod marking the root of the main (current) module. ​ 模块版本由一组源文件定义，其中包含根目录中</description></item><item><title>go help gopath</title><link>https://before80.github.io/go_docs/cmd/gohelpgopath/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpgopath/</guid><description>​ The Go path is used to resolve import statements. It is implemented by and documented in the go/build package. ​ Go路径用于解析导入语句。它由go/build包实现和记录。 The GOPATH environment variable lists places to look for Go code. On Unix, the value is a colon-separated string.</description></item><item><title>go help gopath-get</title><link>https://before80.github.io/go_docs/cmd/gohelpgopath-get/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpgopath-get/</guid><description>​ The &amp;lsquo;go get&amp;rsquo; command changes behavior depending on whether the go command is running in module-aware mode or legacy GOPATH mode. ​ &amp;lsquo;go get&amp;rsquo;命令的行为会根据go命令是在模块感知模式还是传统的GOPATH模式下运行</description></item><item><title>go help proxy</title><link>https://before80.github.io/go_docs/cmd/gohelpgoproxy/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpgoproxy/</guid><description>​ A Go module proxy is any web server that can respond to GET requests for URLs of a specified form. The requests have no query parameters, so even a site serving from a fixed file system (including a file:/// URL) can be a module proxy. ​ Go模块代理是可以响应指定形式的GET请求的任</description></item><item><title>go help importpath</title><link>https://before80.github.io/go_docs/cmd/gohelpimportpath/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpimportpath/</guid><description>​ An import path (see &amp;lsquo;go help packages&amp;rsquo;) denotes a package stored in the local file system. In general, an import path denotes either a standard package (such as &amp;ldquo;unicode/utf8&amp;rdquo;) or a package found in one of the work spaces (For more details see: &amp;lsquo;go help gopath&amp;rsquo;). ​ 导入路径（参见&amp;rsquo;go help packa</description></item><item><title>go help list</title><link>https://before80.github.io/go_docs/cmd/gohelplist/</link><pubDate>Thu, 18 Jul 2024 12:50:51 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelplist/</guid><description>usage: go list [-f format] [-json] [-m] [list flags] [build flags] [packages] List lists the named packages, one per line. The most commonly-used flags are -f and -json, which control the form of the output printed for each package. Other list flags, documented below, control more specific details. The default output shows the package import path: 1 2 3 4 bytes encoding/json github.com/gorilla/mux golang.org/x/net/html The -f flag specifies an alternate</description></item><item><title>go help module-auth</title><link>https://before80.github.io/go_docs/cmd/gohelpmodule-auth/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpmodule-auth/</guid><description>​ When the go command downloads a module zip file or go.mod file into the module cache, it computes a cryptographic hash and compares it with a known value to verify the file hasn&amp;rsquo;t changed since it was first downloaded. Known hashes are stored in a file in the module root directory named go.sum. Hashes may also be downloaded from the checksum database depending on the values of GOSUMDB, GOPRIVATE,</description></item><item><title>go help module-get</title><link>https://before80.github.io/go_docs/cmd/gohelpmodule-get/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpmodule-get/</guid><description>​ The &amp;lsquo;go get&amp;rsquo; command changes behavior depending on whether the go command is running in module-aware mode or legacy GOPATH mode. This help text, accessible as &amp;lsquo;go help module-get&amp;rsquo; even in legacy GOPATH mode, describes &amp;lsquo;go get&amp;rsquo; as it operates in module-aware mode. ​ &amp;lsquo;go get&amp;rsquo;命令的行为取决于go命令是在</description></item><item><title>go help modules</title><link>https://before80.github.io/go_docs/cmd/gohelpmodules/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpmodules/</guid><description>​ A module is a collection of packages that are released, versioned, and distributed together. Modules may be downloaded directly from version control repositories or from module proxy servers. ​ 模块是一组一起发布、进行版本管理和分发的包。可以直接从版本控制存储库或模块代理服</description></item><item><title>go help packages</title><link>https://before80.github.io/go_docs/cmd/gohelppackages/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelppackages/</guid><description>​ Many commands apply to a set of packages: ​ 许多命令适用于一组包： 1 go &amp;lt;action&amp;gt; [packages] Usually, [packages] is a list of import paths. ​ 通常，[packages] 是一组导入路径。 An import path that is a rooted path or that begins with a . or</description></item><item><title>go help private</title><link>https://before80.github.io/go_docs/cmd/gohelpprivate/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpprivate/</guid><description>​ The go command defaults to downloading modules from the public Go module mirror at proxy.golang.org. It also defaults to validating downloaded modules, regardless of source, against the public Go checksum database at sum.golang.org. These defaults work well for publicly available source code. ​ go 命令默认从公共 Go 模块镜像 proxy.golang.org 下载模块。它还默认使用公</description></item><item><title>go help test</title><link>https://before80.github.io/go_docs/cmd/gohelptest/</link><pubDate>Sat, 24 Feb 2024 10:57:59 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelptest/</guid><description>usage: go test [build/test flags] [packages] [build/test flags &amp;amp; test binary flags] ‘Go test’ automates testing the packages named by the import paths. ​ “go test” 自动化测试由导入路径命名的包。 It prints a summary of the test results in the format: ​ 它以以下格</description></item><item><title>go help testflag</title><link>https://before80.github.io/go_docs/cmd/gohelptestflag/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelptestflag/</guid><description>The &amp;lsquo;go test&amp;rsquo; command takes both flags that apply to &amp;lsquo;go test&amp;rsquo; itself and flags that apply to the resulting test binary. ​ go test命令既可以接受适用于 go test本身的标志，也可以接受适用于生成的测试二进制文件的标志</description></item><item><title>go help testfunc</title><link>https://before80.github.io/go_docs/cmd/gohelptestfunc/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelptestfunc/</guid><description>​ The &amp;lsquo;go test&amp;rsquo; command expects to find test, benchmark, and example functions in the &amp;ldquo;*_test.go&amp;rdquo; files corresponding to the package under test. ​ go test 命令期望在与待测试的包对应的 &amp;ldquo;*_test.go&amp;rdquo; 文件中找到测试、基准测试和示例函数。 A test function is one named TestXxx (where Xxx does not</description></item><item><title>go help vcs</title><link>https://before80.github.io/go_docs/cmd/gohelpvcs/</link><pubDate>Tue, 12 Dec 2023 14:13:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gohelpvcs/</guid><description>​ The &amp;lsquo;go get&amp;rsquo; command can run version control commands like git to download imported code. This functionality is critical to the decentralized Go package ecosystem, in which code can be imported from any server, but it is also a potential security problem, if a malicious server finds a way to cause the invoked version control command to run unintended code. ​ go get 命令可以运行</description></item><item><title>addr2line</title><link>https://before80.github.io/go_docs/cmd/addr2line/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/addr2line/</guid><description>addr2line 原文：https://pkg.go.dev/cmd/addr2line@go1.19.3 Overview 概述 Addr2line is a minimal simulation of the GNU addr2line tool, just enough to support pprof. ​ addr2l</description></item><item><title>api</title><link>https://before80.github.io/go_docs/cmd/api/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/api/</guid><description>api 原文：https://pkg.go.dev/cmd/api@go1.19.3 Overview Api computes the exported API of a set of Go packages. ​ api计算一组Go包的导出API。 ===</description></item><item><title>asm</title><link>https://before80.github.io/go_docs/cmd/asm/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/asm/</guid><description>asm 原文：https://pkg.go.dev/cmd/asm@go1.19.3 Overview 概述 Asm, typically invoked as “go tool asm”, assembles the source file into an object file named for the basename of the argument</description></item><item><title>buildid</title><link>https://before80.github.io/go_docs/cmd/buildid/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/buildid/</guid><description>buildid Overview Buildid displays or updates the build ID stored in a Go package or binary. ​ buildid 显示或更新存储在 Go 包或二进制文件中的构建 ID。 用法： ​ Usage: go tool buildid [-w] file By default, buildid prints the build ID found in the named file. If the -w option is given, buildid</description></item><item><title>cgo</title><link>https://before80.github.io/go_docs/cmd/cgo/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/cgo/</guid><description>cgo 原文：https://pkg.go.dev/cmd/cgo@go1.19.3 Overview Cgo enables the creation of Go packages that call C code. ​ cgo 允许创建调用 C 代码的 Go 包。 Using cgo with the</description></item><item><title>compile</title><link>https://before80.github.io/go_docs/cmd/compile/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/compile/</guid><description>compile 原文：https://pkg.go.dev/cmd/compile@go1.19.3 Overview Compile, typically invoked as “go tool compile,” compiles a single Go package comprising the files named</description></item><item><title>cover</title><link>https://before80.github.io/go_docs/cmd/cover/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/cover/</guid><description>cover 原文：https://pkg.go.dev/cmd/cover@go1.19.3 Overview Cover is a program for analyzing the coverage profiles generated by &amp;lsquo;go test -coverprofile=cover.out&amp;rsquo;. ​ Cover 是一个用于分析“go test -</description></item><item><title>dist</title><link>https://before80.github.io/go_docs/cmd/dist/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/dist/</guid><description>dist 原文：https://pkg.go.dev/cmd/dist@go1.19.3 Overview Dist helps bootstrap, build, and test the Go distribution. ​ dist 帮助引导、构建和测试 Go 发行版。 Usage: ​ 用</description></item><item><title>doc</title><link>https://before80.github.io/go_docs/cmd/doc/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/doc/</guid><description>doc 原文：https://pkg.go.dev/cmd/doc@go1.19.3 Overview Doc (usually run as go doc) accepts zero, one or two arguments. ​ doc（通常作为 go doc 运行）接受零个</description></item><item><title>fix</title><link>https://before80.github.io/go_docs/cmd/fix/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/fix/</guid><description>fix 原文：https://pkg.go.dev/cmd/fix@go1.19.3 Overview Fix finds Go programs that use old APIs and rewrites them to use newer ones. After you update to a new Go release, fix helps make the necessary changes to</description></item><item><title>godoc</title><link>https://before80.github.io/go_docs/cmd/godoc/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/godoc/</guid><description>godoc 原文：https://pkg.go.dev/golang.org/x/tools/cmd/godoc Overview 概述 Godoc extracts and generates documentation for Go programs. ​ godoc 提取并生成G</description></item><item><title>gofmt</title><link>https://before80.github.io/go_docs/cmd/gofmt/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/gofmt/</guid><description>gofmt 原文：https://pkg.go.dev/cmd/gofmt@go1.19.3 Overview 概述 Gofmt formats Go programs. It uses tabs for indentation and blanks for alignment. Alignment assumes that an editor is using a fixed-width font. ​ go</description></item><item><title>gofmt 2</title><link>https://before80.github.io/go_docs/cmd/fmt/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/fmt/</guid><description>gofmt Gofmt formats Go programs. It uses tabs for indentation and blanks for alignment. Alignment assumes that an editor is using a fixed-width font. Without an explicit path, it processes the standard input. Given a file, it operates on that file; given a directory, it operates on all .go files in that directory, recursively. (Files starting with a period are ignored.) By default, gofmt prints the reformatted sources to standard</description></item><item><title>link</title><link>https://before80.github.io/go_docs/cmd/link/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/link/</guid><description>link 原文：https://pkg.go.dev/cmd/link@go1.19.3 Overview 概述 Link, typically invoked as “go tool link”, reads the Go archive or object for a package main, along with its</description></item><item><title>nm</title><link>https://before80.github.io/go_docs/cmd/nm/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/nm/</guid><description>nm 原文：https://pkg.go.dev/cmd/nm@go1.19.3 Overview 概述 Nm lists the symbols defined or used by an object file, archive, or executable. ​ nm列出对象文件、存案或可执</description></item><item><title>objabi</title><link>https://before80.github.io/go_docs/cmd/objabi/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/objabi/</guid><description/></item><item><title>objdump</title><link>https://before80.github.io/go_docs/cmd/objdump/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/objdump/</guid><description>objdump 原文：https://pkg.go.dev/cmd/objdump@go1.19.3 Overview Objdump disassembles executable files. ​ objdump 反汇编可执行文件。 Usage: ​ 用法： go tool objdump [-s symregexp] binary</description></item><item><title>pack</title><link>https://before80.github.io/go_docs/cmd/pack/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/pack/</guid><description>pack 原文：https://pkg.go.dev/cmd/pack@go1.19.3 Overview 概述 Pack is a simple version of the traditional Unix ar tool. It implements only the operations needed by Go. ​ pack是传统</description></item><item><title>pprof</title><link>https://before80.github.io/go_docs/cmd/pprof/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/pprof/</guid><description>pprof 原文：https://pkg.go.dev/cmd/pprof@go1.19.3 Overview 概述 Pprof interprets and displays profiles of Go programs. ​ pprof 解释（interprets ）并显</description></item><item><title>test2json</title><link>https://before80.github.io/go_docs/cmd/test2json/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/test2json/</guid><description>test2json 原文：https://pkg.go.dev/cmd/test2json@go1.19.3 Overview Test2json converts go test output to a machine-readable JSON stream. ​ Test2json 将 go 测试输出转换为可供机</description></item><item><title>trace</title><link>https://before80.github.io/go_docs/cmd/trace/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/trace/</guid><description>trace 原文：https://pkg.go.dev/cmd/trace@go1.19.3 Overview 概述 Trace is a tool for viewing trace files. ​ trace 是一个查看跟踪文件的工具。 Trace files can</description></item><item><title>vet</title><link>https://before80.github.io/go_docs/cmd/vet/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/cmd/vet/</guid><description>vet 原文：https://pkg.go.dev/cmd/vet@go1.19.3 Overview 概述 Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string. Vet uses heuristics that do not</description></item></channel></rss>