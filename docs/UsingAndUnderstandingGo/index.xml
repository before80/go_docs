<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>使用和理解 Go on Go 中文档集</title><link>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/</link><description>Recent content in 使用和理解 Go on Go 中文档集</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 17 May 2023 15:03:14 +0800</lastBuildDate><atom:link href="https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/index.xml" rel="self" type="application/rss+xml"/><item><title>Effective Go</title><link>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/EffectiveGo/</link><pubDate>Wed, 17 May 2023 15:03:14 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/EffectiveGo/</guid><description>Effective Go 原文：https://go.dev/doc/effective_go 简介 ​ Go是一种新的语言。虽然它借鉴了现有语言的思想，但它具有不寻常</description></item><item><title>Go Fuzzing</title><link>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/Fuzzing/</link><pubDate>Wed, 17 May 2023 15:03:14 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/Fuzzing/</guid><description>Go Fuzzing 原文：https://go.dev/security/fuzz/ ​ 从Go 1.18开始，Go在其标准工具链中支持模糊测试。OSS-Fuzz</description></item><item><title>Go 垃圾收集器指南</title><link>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/AGuideToTheGoGarbageCollector/</link><pubDate>Wed, 17 May 2023 15:03:14 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/AGuideToTheGoGarbageCollector/</guid><description>A Guide to the Go Garbage Collector - Go 垃圾收集器指南 原文：https://go.dev/doc/gc-guide Introduction 简介 This guide is intended to aid advanced Go users in better understanding their application costs by providing insights into the Go</description></item><item><title>编辑器插件和IDEs</title><link>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/EditorPluginsAndIDEs/</link><pubDate>Wed, 17 May 2023 15:03:14 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/EditorPluginsAndIDEs/</guid><description>Editor plugins and IDEs - 编辑器插件和IDEs 原文：https://go.dev/doc/editors 简介 ​ 本文列出了Go生态系统（Go ecosystem</description></item><item><title>管理依赖项</title><link>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/ManagingDependencies/</link><pubDate>Wed, 17 May 2023 15:03:14 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/ManagingDependencies/</guid><description>Managing dependencies - 管理依赖项 原文：https://go.dev/doc/modules/managing-dependencies ​ 当您的代码使用外部包</description></item><item><title>诊断</title><link>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/Diagnostics/</link><pubDate>Wed, 17 May 2023 15:03:14 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/Diagnostics/</guid><description>Diagnostics 诊断 原文：https://go.dev/doc/diagnostics 简介 ​ Go 生态系统提供了大量的 API 和工具来诊断 Go 程序中的逻辑和性能问题。</description></item><item><title>Coverage profiling support for integration tests</title><link>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/CoverageProfilingSupportForIntegrationTests/</link><pubDate>Wed, 12 Jul 2023 20:37:11 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/CoverageProfilingSupportForIntegrationTests/</guid><description>Coverage profiling support for integration tests https://go.dev/testing/coverage/ Back to Go Testing Beginning in Go 1.20, Go supports collection of coverage profiles from applications and from integration tests, larger and more complex tests for Go programs. Overview Go provides easy-to-use support for collecting coverage profiles at the level of package unit tests via the “go test -coverprofile=... &amp;lt;pkg_targ</description></item><item><title>Profile-guided optimization</title><link>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/Profile-guidedOptimization/</link><pubDate>Wed, 12 Jul 2023 20:37:58 +0800</pubDate><guid>https://before80.github.io/go_docs/docs/UsingAndUnderstandingGo/Profile-guidedOptimization/</guid><description>Profile-guided optimization 原文：https://go.dev/doc/pgo Starting in Go 1.20, the Go compiler supports profile-guided optimization (PGO) to further optimize builds. Overview Profile-guided optimization (PGO), also known as feedback-directed optimization (FDO), is a compiler optimization technique that feeds information (a profile) from representative runs of the application back into</description></item></channel></rss>