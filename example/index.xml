<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>示例 on Go 中文档集</title><link>https://before80.github.io/go_docs/example/</link><description>Recent content in 示例 on Go 中文档集</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 07 Aug 2023 13:28:52 +0800</lastBuildDate><atom:link href="https://before80.github.io/go_docs/example/index.xml" rel="self" type="application/rss+xml"/><item><title>Hello World</title><link>https://before80.github.io/go_docs/example/hello-world/</link><pubDate>Mon, 07 Aug 2023 13:31:05 +0800</pubDate><guid>https://before80.github.io/go_docs/example/hello-world/</guid><description>Hello World 1 2 3 4 5 6 7 8 9 package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;Hello World&amp;#34;) } // Output: // Hello World</description></item><item><title>Variables</title><link>https://before80.github.io/go_docs/example/variables/</link><pubDate>Mon, 07 Aug 2023 13:31:21 +0800</pubDate><guid>https://before80.github.io/go_docs/example/variables/</guid><description>Variables 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69</description></item><item><title>values</title><link>https://before80.github.io/go_docs/example/values/</link><pubDate>Mon, 07 Aug 2023 13:31:12 +0800</pubDate><guid>https://before80.github.io/go_docs/example/values/</guid><description>Values 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 package main import &amp;#34;fmt&amp;#34; func main() { // 字符串 fmt.Printf(&amp;#34;%v,%T\n&amp;#34;, &amp;#34;Hi&amp;#34;, &amp;#34;Hi&amp;#34;) fmt.Printf(&amp;#34;%v,%T\n&amp;#34;, &amp;#34;Hi &amp;#34;+&amp;#34;golang&amp;#34;, &amp;#34;Hi &amp;#34;+&amp;#34;golang&amp;#34;) //</description></item><item><title>constants</title><link>https://before80.github.io/go_docs/example/constants/</link><pubDate>Mon, 07 Aug 2023 13:31:30 +0800</pubDate><guid>https://before80.github.io/go_docs/example/constants/</guid><description>constants 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69</description></item><item><title>for</title><link>https://before80.github.io/go_docs/example/for/</link><pubDate>Mon, 07 Aug 2023 13:31:41 +0800</pubDate><guid>https://before80.github.io/go_docs/example/for/</guid><description>for 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69</description></item><item><title>if else</title><link>https://before80.github.io/go_docs/example/if-else/</link><pubDate>Mon, 07 Aug 2023 13:31:51 +0800</pubDate><guid>https://before80.github.io/go_docs/example/if-else/</guid><description>if else 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;math/rand&amp;#34; ) func main() { if true { fmt.Println(&amp;#34;Condition is true.&amp;#34;) } else { fmt.Println(&amp;#34;Condition is false.&amp;#34;) } score := rand.Intn(100) if score &amp;lt; 60 { fmt.Println(&amp;#34;E&amp;#34;) } else if 60 &amp;lt;= score &amp;amp;&amp;amp; score</description></item><item><title>break</title><link>https://before80.github.io/go_docs/example/break/</link><pubDate>Sat, 26 Aug 2023 11:06:21 +0800</pubDate><guid>https://before80.github.io/go_docs/example/break/</guid><description>break 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69</description></item><item><title>continue</title><link>https://before80.github.io/go_docs/example/continue/</link><pubDate>Sat, 26 Aug 2023 11:03:47 +0800</pubDate><guid>https://before80.github.io/go_docs/example/continue/</guid><description>continue 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69</description></item><item><title>switch</title><link>https://before80.github.io/go_docs/example/switch/</link><pubDate>Mon, 07 Aug 2023 13:31:58 +0800</pubDate><guid>https://before80.github.io/go_docs/example/switch/</guid><description>switch 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69</description></item><item><title>array</title><link>https://before80.github.io/go_docs/example/defer/</link><pubDate>Thu, 27 Jun 2024 11:32:07 +0800</pubDate><guid>https://before80.github.io/go_docs/example/defer/</guid><description>defer 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 package main import &amp;#34;fmt&amp;#34; func main() { // 一维数组 a1 := [3]int{1, 2, 3} // 二维</description></item><item><title>array</title><link>https://before80.github.io/go_docs/example/arrays/</link><pubDate>Mon, 07 Aug 2023 13:32:07 +0800</pubDate><guid>https://before80.github.io/go_docs/example/arrays/</guid><description>array 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 package main import &amp;#34;fmt&amp;#34; func main() { // 一维数组 a1 := [3]int{1, 2, 3} // 二维</description></item><item><title>slices</title><link>https://before80.github.io/go_docs/example/slices/</link><pubDate>Mon, 07 Aug 2023 13:32:23 +0800</pubDate><guid>https://before80.github.io/go_docs/example/slices/</guid><description>slices 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69</description></item><item><title>map</title><link>https://before80.github.io/go_docs/example/maps/</link><pubDate>Mon, 07 Aug 2023 13:32:29 +0800</pubDate><guid>https://before80.github.io/go_docs/example/maps/</guid><description>map 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 package main import &amp;#34;fmt&amp;#34; type K interface{} func main() { var m0 map[string]int fmt.Printf(&amp;#34;%v,%T,len=%d\n&amp;#34;, m0, m0, len(m0)) // map[],map[string]int,len=0 fmt.Printf(&amp;#34;%#v,%T,len=%d\n&amp;#34;, m0, m0, len(m0)) // map[string]int(nil),map[string]int,len=0 m01 := make(map[string]int) fmt.Printf(&amp;#34;%v,%T,len=%d\n&amp;#34;, m01, m01, len(m01)) //</description></item><item><title>range</title><link>https://before80.github.io/go_docs/example/range/</link><pubDate>Mon, 07 Aug 2023 13:32:37 +0800</pubDate><guid>https://before80.github.io/go_docs/example/range/</guid><description>range 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69</description></item><item><title>function</title><link>https://before80.github.io/go_docs/example/functions/</link><pubDate>Mon, 07 Aug 2023 13:32:45 +0800</pubDate><guid>https://before80.github.io/go_docs/example/functions/</guid><description>function 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 package main import &amp;#34;fmt&amp;#34; // 求两 int 类型</description></item><item><title>Variadic Function</title><link>https://before80.github.io/go_docs/example/variadic-functions/</link><pubDate>Mon, 07 Aug 2023 13:33:44 +0800</pubDate><guid>https://before80.github.io/go_docs/example/variadic-functions/</guid><description>Variadic Function - 可变参数函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;math&amp;#34; ) func findMax(nums ...int) int { max := math.MinInt for _, num := range nums { if num &amp;gt;</description></item><item><title>closure</title><link>https://before80.github.io/go_docs/example/closures/</link><pubDate>Mon, 07 Aug 2023 13:33:53 +0800</pubDate><guid>https://before80.github.io/go_docs/example/closures/</guid><description>closure - 闭包 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 package main import &amp;#34;fmt&amp;#34; // 步骤 func step() func() int { i := 0 return func() int {</description></item><item><title>Recursion</title><link>https://before80.github.io/go_docs/example/recursion/</link><pubDate>Mon, 07 Aug 2023 13:34:13 +0800</pubDate><guid>https://before80.github.io/go_docs/example/recursion/</guid><description>Recursion - 递归 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 package main import &amp;#34;fmt&amp;#34; // 递归计算阶乘 func factorial(n int) int { if n &amp;lt;= 0 { return 1 } return n * factorial(n-1) } // 递</description></item><item><title>pointers</title><link>https://before80.github.io/go_docs/example/pointers/</link><pubDate>Mon, 07 Aug 2023 13:34:25 +0800</pubDate><guid>https://before80.github.io/go_docs/example/pointers/</guid><description/></item><item><title>Strings and Runes</title><link>https://before80.github.io/go_docs/example/strings-and-runes/</link><pubDate>Mon, 07 Aug 2023 13:34:38 +0800</pubDate><guid>https://before80.github.io/go_docs/example/strings-and-runes/</guid><description>Strings and Runes 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67</description></item><item><title>struct</title><link>https://before80.github.io/go_docs/example/structs/</link><pubDate>Mon, 07 Aug 2023 13:35:18 +0800</pubDate><guid>https://before80.github.io/go_docs/example/structs/</guid><description>struct 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69</description></item><item><title>method</title><link>https://before80.github.io/go_docs/example/methods/</link><pubDate>Mon, 07 Aug 2023 13:35:26 +0800</pubDate><guid>https://before80.github.io/go_docs/example/methods/</guid><description>method 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69</description></item><item><title>interface</title><link>https://before80.github.io/go_docs/example/interface/</link><pubDate>Mon, 07 Aug 2023 13:35:34 +0800</pubDate><guid>https://before80.github.io/go_docs/example/interface/</guid><description>interface 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69</description></item><item><title>struct-embedding</title><link>https://before80.github.io/go_docs/example/struct-embedding/</link><pubDate>Mon, 07 Aug 2023 13:35:47 +0800</pubDate><guid>https://before80.github.io/go_docs/example/struct-embedding/</guid><description/></item><item><title>generic</title><link>https://before80.github.io/go_docs/example/generics/</link><pubDate>Mon, 07 Aug 2023 13:36:02 +0800</pubDate><guid>https://before80.github.io/go_docs/example/generics/</guid><description>generic 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 package main import &amp;#34;fmt&amp;#34; // 泛型类型 type List[T any] struct { next *List[T] value T } // 泛型函数 func SumIntsOrFloats[K comparable, V int64 | float64](m map[K]V)</description></item><item><title>error</title><link>https://before80.github.io/go_docs/example/errors/</link><pubDate>Mon, 07 Aug 2023 13:36:12 +0800</pubDate><guid>https://before80.github.io/go_docs/example/errors/</guid><description>error 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 package main import</description></item><item><title>goroutine</title><link>https://before80.github.io/go_docs/example/goroutines/</link><pubDate>Mon, 07 Aug 2023 13:36:27 +0800</pubDate><guid>https://before80.github.io/go_docs/example/goroutines/</guid><description>goroutine 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 package main import ( &amp;#34;fmt&amp;#34;</description></item><item><title>channel</title><link>https://before80.github.io/go_docs/example/channels/</link><pubDate>Mon, 07 Aug 2023 13:36:37 +0800</pubDate><guid>https://before80.github.io/go_docs/example/channels/</guid><description>channel channel 是什么？ ​ channel是Go语言中的一种内置数据类型。 channel有什么用？ ​ 可用于： 信息交流： 数据传递： 信号通知： 任务编排： 互斥锁</description></item><item><title>select</title><link>https://before80.github.io/go_docs/example/select/</link><pubDate>Mon, 07 Aug 2023 13:37:10 +0800</pubDate><guid>https://before80.github.io/go_docs/example/select/</guid><description>select 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 package main import</description></item><item><title>timeouts</title><link>https://before80.github.io/go_docs/example/timeouts/</link><pubDate>Mon, 07 Aug 2023 13:37:27 +0800</pubDate><guid>https://before80.github.io/go_docs/example/timeouts/</guid><description/></item><item><title>non-blocking-channel-operations</title><link>https://before80.github.io/go_docs/example/non-blocking-channel-operations/</link><pubDate>Mon, 07 Aug 2023 13:37:54 +0800</pubDate><guid>https://before80.github.io/go_docs/example/non-blocking-channel-operations/</guid><description>Non-Blocking Channel Operations 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 package main import ( &amp;#34;errors&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func main() { chErr := make(chan error) signal := make(chan bool) select { case err := &amp;lt;-chErr: fmt.Println(&amp;#34;found</description></item><item><title>ticker</title><link>https://before80.github.io/go_docs/example/tickers/</link><pubDate>Mon, 07 Aug 2023 13:39:34 +0800</pubDate><guid>https://before80.github.io/go_docs/example/tickers/</guid><description>ticker 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func main() { ticker := time.NewTicker(time.Second) defer ticker.Stop() done := make(chan bool) go func() { time.Sleep(10 * time.Second) done &amp;lt;- true }() for { select { case &amp;lt;-done: fmt.Println(&amp;#34;Done!&amp;#34;) return case t := &amp;lt;-ticker.C: fmt.Println(&amp;#34;Current</description></item><item><title>timers</title><link>https://before80.github.io/go_docs/example/timers/</link><pubDate>Mon, 07 Aug 2023 13:39:23 +0800</pubDate><guid>https://before80.github.io/go_docs/example/timers/</guid><description>timer 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func main() { timer1 := time.NewTimer(2 * time.Second) fmt.Println(&amp;#34;Waiting...&amp;#34;) &amp;lt;-timer1.C fmt.Println(&amp;#34;timer1 expired&amp;#34;) _ = time.AfterFunc(2*time.Second, func() { fmt.Println(&amp;#34;timer2 expired&amp;#34;) }) fmt.Println(&amp;#34;Waiting...&amp;#34;) time.Sleep(2010 * time.Millisecond) // 2.01s &amp;gt; 前面的 2s fmt.Println(&amp;#34;End&amp;#34;) }</description></item><item><title>worker-pools</title><link>https://before80.github.io/go_docs/example/worker-pools/</link><pubDate>Mon, 07 Aug 2023 13:40:11 +0800</pubDate><guid>https://before80.github.io/go_docs/example/worker-pools/</guid><description>worker pools 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func worker(id int, jobs &amp;lt;-chan int, results chan&amp;lt;- int) { for j := range jobs { fmt.Println(&amp;#34;worker&amp;#34;, id, &amp;#34;started job&amp;#34;, j) time.Sleep(time.Second) fmt.Println(&amp;#34;worker&amp;#34;, id, &amp;#34;finished</description></item><item><title>waitGroup</title><link>https://before80.github.io/go_docs/example/wait-groups/</link><pubDate>Mon, 07 Aug 2023 13:40:25 +0800</pubDate><guid>https://before80.github.io/go_docs/example/wait-groups/</guid><description>waitGroup 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;math/rand&amp;#34; &amp;#34;sync&amp;#34; &amp;#34;time&amp;#34; ) func worker(id int) { fmt.Printf(&amp;#34;Worker %d starting at %s\n&amp;#34;, id, time.Now()) time.Sleep(time.Duration(rand.Intn(3)) * time.Second) fmt.Printf(&amp;#34;Worker %d done at %s\n&amp;#34;, id, time.Now()) } func main() { var wg sync.WaitGroup for</description></item><item><title>rate limiting</title><link>https://before80.github.io/go_docs/example/rate-limiting/</link><pubDate>Mon, 07 Aug 2023 13:40:48 +0800</pubDate><guid>https://before80.github.io/go_docs/example/rate-limiting/</guid><description>rate limiting 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func main() { requests := make(chan int, 5) for i := 1; i &amp;lt;= 5; i++ {</description></item><item><title>atomic counter</title><link>https://before80.github.io/go_docs/example/atomic-counters/</link><pubDate>Mon, 07 Aug 2023 13:41:08 +0800</pubDate><guid>https://before80.github.io/go_docs/example/atomic-counters/</guid><description>atomic counter 原文：https://gobyexample.com/atomic-counters 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26</description></item><item><title>Mutex</title><link>https://before80.github.io/go_docs/example/mutexes/</link><pubDate>Mon, 07 Aug 2023 13:48:45 +0800</pubDate><guid>https://before80.github.io/go_docs/example/mutexes/</guid><description>Mutex 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;sync&amp;#34; ) type Container struct { mu sync.Mutex counters map[string]int } func (c *Container) inc(name string) { c.mu.Lock() defer c.mu.Unlock() c.counters[name]++ } func</description></item><item><title>Stateful Goroutines</title><link>https://before80.github.io/go_docs/example/stateful-goroutines/</link><pubDate>Mon, 07 Aug 2023 13:49:05 +0800</pubDate><guid>https://before80.github.io/go_docs/example/stateful-goroutines/</guid><description>Stateful Goroutines 原文：https://gobyexample.com/stateful-goroutines 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22</description></item><item><title>sorting</title><link>https://before80.github.io/go_docs/example/sorting/</link><pubDate>Mon, 07 Aug 2023 13:49:18 +0800</pubDate><guid>https://before80.github.io/go_docs/example/sorting/</guid><description>sorting 原文：https://gobyexample.com/sorting 存在修改 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31</description></item><item><title>sorting by functions</title><link>https://before80.github.io/go_docs/example/sorting-by-functions/</link><pubDate>Mon, 07 Aug 2023 13:49:29 +0800</pubDate><guid>https://before80.github.io/go_docs/example/sorting-by-functions/</guid><description>sorting by functions 原文：https://gobyexample.com/sorting-by-functions 存在修改 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16</description></item><item><title>panic 和 recover</title><link>https://before80.github.io/go_docs/example/panic/</link><pubDate>Mon, 07 Aug 2023 13:49:38 +0800</pubDate><guid>https://before80.github.io/go_docs/example/panic/</guid><description>panic 和 recover 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package main import &amp;#34;fmt&amp;#34; func main() { defer func() { if r := recover(); r != nil { fmt.Printf(&amp;#34;%v,%T\n&amp;#34;, r, r) } }() panic(&amp;#34;a problem&amp;#34;) } // Output: // a problem,string</description></item><item><title>string functions</title><link>https://before80.github.io/go_docs/example/string-functions/</link><pubDate>Mon, 07 Aug 2023 13:50:09 +0800</pubDate><guid>https://before80.github.io/go_docs/example/string-functions/</guid><description>string functions 原文：https://gobyexample.com/string-functions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25</description></item><item><title>string formatting</title><link>https://before80.github.io/go_docs/example/string_formatting/</link><pubDate>Thu, 10 Aug 2023 12:31:45 +0800</pubDate><guid>https://before80.github.io/go_docs/example/string_formatting/</guid><description>string formatting 原文：https://gobyexample.com/string-formatting 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24</description></item><item><title>text templates</title><link>https://before80.github.io/go_docs/example/text-templates/</link><pubDate>Mon, 07 Aug 2023 13:50:27 +0800</pubDate><guid>https://before80.github.io/go_docs/example/text-templates/</guid><description>text templates 原文：https://gobyexample.com/text-templates 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27</description></item><item><title>Regular Expressions</title><link>https://before80.github.io/go_docs/example/regular-expressions/</link><pubDate>Mon, 07 Aug 2023 13:50:46 +0800</pubDate><guid>https://before80.github.io/go_docs/example/regular-expressions/</guid><description>Regular Expressions 原文：https://gobyexample.com/regular-expressions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22</description></item><item><title>JSON</title><link>https://before80.github.io/go_docs/example/json/</link><pubDate>Mon, 07 Aug 2023 13:50:55 +0800</pubDate><guid>https://before80.github.io/go_docs/example/json/</guid><description>JSON 原文：https://gobyexample.com/json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38</description></item><item><title>xml</title><link>https://before80.github.io/go_docs/example/xml/</link><pubDate>Mon, 07 Aug 2023 13:51:02 +0800</pubDate><guid>https://before80.github.io/go_docs/example/xml/</guid><description>xml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69</description></item><item><title>time</title><link>https://before80.github.io/go_docs/example/time/</link><pubDate>Mon, 07 Aug 2023 13:51:08 +0800</pubDate><guid>https://before80.github.io/go_docs/example/time/</guid><description>time 原文：https://gobyexample.com/time 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38</description></item><item><title>epoch</title><link>https://before80.github.io/go_docs/example/epoch/</link><pubDate>Mon, 07 Aug 2023 13:51:16 +0800</pubDate><guid>https://before80.github.io/go_docs/example/epoch/</guid><description>epoch 原文：https://gobyexample.com/epoch 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func main() { now := time.Now() fmt.Println(now) // 2023-08-10 16:46:30.7978556 +0800</description></item><item><title>Time Formatting / Parsing</title><link>https://before80.github.io/go_docs/example/time-formatting-parsing/</link><pubDate>Mon, 07 Aug 2023 13:51:32 +0800</pubDate><guid>https://before80.github.io/go_docs/example/time-formatting-parsing/</guid><description>Time Formatting / Parsing 原文：https://gobyexample.com/time-formatting-parsing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16</description></item><item><title>random number</title><link>https://before80.github.io/go_docs/example/random-numbers/</link><pubDate>Mon, 07 Aug 2023 13:51:50 +0800</pubDate><guid>https://before80.github.io/go_docs/example/random-numbers/</guid><description>random number 原文：https://gobyexample.com/random-numbers 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27</description></item><item><title>number-parsing</title><link>https://before80.github.io/go_docs/example/number-parsing/</link><pubDate>Mon, 07 Aug 2023 13:52:11 +0800</pubDate><guid>https://before80.github.io/go_docs/example/number-parsing/</guid><description>number parsing 原文：https://gobyexample.com/number-parsing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27</description></item><item><title>url-parsing</title><link>https://before80.github.io/go_docs/example/url-parsing/</link><pubDate>Mon, 07 Aug 2023 13:52:21 +0800</pubDate><guid>https://before80.github.io/go_docs/example/url-parsing/</guid><description>url parsing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;net&amp;#34; &amp;#34;net/url&amp;#34; ) func main() { s := &amp;#34;postgres://user:pass@host.com:5432/path?k=v#f&amp;#34; u, err := url.Parse(s) if err != nil { panic(err) } fmt.Println(u.Scheme) // postgres fmt.Println(u.User) // user:pass fmt.Println(u.User.Username())</description></item><item><title>sha256-hashes</title><link>https://before80.github.io/go_docs/example/sha256-hashes/</link><pubDate>Mon, 07 Aug 2023 13:52:41 +0800</pubDate><guid>https://before80.github.io/go_docs/example/sha256-hashes/</guid><description>sha256 hashes 原文：https://gobyexample.com/sha256-hashes 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package main import ( &amp;#34;crypto/sha256&amp;#34; &amp;#34;fmt&amp;#34; ) func main()</description></item><item><title>base64 encoding</title><link>https://before80.github.io/go_docs/example/base64-encoding/</link><pubDate>Mon, 07 Aug 2023 13:53:05 +0800</pubDate><guid>https://before80.github.io/go_docs/example/base64-encoding/</guid><description>base64 encoding 原文：https://gobyexample.com/base64-encoding 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import (</description></item><item><title>reading-files</title><link>https://before80.github.io/go_docs/example/reading-files/</link><pubDate>Mon, 07 Aug 2023 13:53:25 +0800</pubDate><guid>https://before80.github.io/go_docs/example/reading-files/</guid><description>reading files 原文：https://gobyexample.com/reading-files 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28</description></item><item><title>writing-files</title><link>https://before80.github.io/go_docs/example/writing-files/</link><pubDate>Mon, 07 Aug 2023 13:53:44 +0800</pubDate><guid>https://before80.github.io/go_docs/example/writing-files/</guid><description>writing files 原文：https://gobyexample.com/writing-files 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28</description></item><item><title>line-filters</title><link>https://before80.github.io/go_docs/example/line-filters/</link><pubDate>Mon, 07 Aug 2023 13:54:05 +0800</pubDate><guid>https://before80.github.io/go_docs/example/line-filters/</guid><description>line filters 原文：https://gobyexample.com/line-filters 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( &amp;#34;bufio&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34;</description></item><item><title>file paths</title><link>https://before80.github.io/go_docs/example/file-paths/</link><pubDate>Mon, 07 Aug 2023 13:54:22 +0800</pubDate><guid>https://before80.github.io/go_docs/example/file-paths/</guid><description>file paths 原文：https://gobyexample.com/file-paths 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31</description></item><item><title>Directories</title><link>https://before80.github.io/go_docs/example/directories/</link><pubDate>Mon, 07 Aug 2023 13:54:47 +0800</pubDate><guid>https://before80.github.io/go_docs/example/directories/</guid><description>Directories 原文：https://gobyexample.com/directories 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31</description></item><item><title>temporary files and directories</title><link>https://before80.github.io/go_docs/example/temporary-files-and-directories/</link><pubDate>Mon, 07 Aug 2023 13:55:19 +0800</pubDate><guid>https://before80.github.io/go_docs/example/temporary-files-and-directories/</guid><description>temporary files and directories 原文：https://gobyexample.com/temporary-files-and-directories 1 2 3 4 5 6 7 8</description></item><item><title>embed-directive</title><link>https://before80.github.io/go_docs/example/embed-directive/</link><pubDate>Mon, 07 Aug 2023 13:55:49 +0800</pubDate><guid>https://before80.github.io/go_docs/example/embed-directive/</guid><description>Embed Directive 原文：https://gobyexample.com/embed-directive 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26</description></item><item><title>testing-and-benchmarking</title><link>https://before80.github.io/go_docs/example/testing-and-benchmarking/</link><pubDate>Mon, 07 Aug 2023 13:56:08 +0800</pubDate><guid>https://before80.github.io/go_docs/example/testing-and-benchmarking/</guid><description>testing and benchmarking 原文：https://gobyexample.com/testing-and-benchmarking 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16</description></item><item><title>command-line-arguments</title><link>https://before80.github.io/go_docs/example/command-line-arguments/</link><pubDate>Mon, 07 Aug 2023 13:56:28 +0800</pubDate><guid>https://before80.github.io/go_docs/example/command-line-arguments/</guid><description>Command-Line Arguments 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; ) func main() { argsWithProg := os.Args argsWithoutProg := os.Args[1:] arg := os.Args[3] fmt.Printf(&amp;#34;%#v,%T\n&amp;#34;, argsWithProg, argsWithProg) fmt.Printf(&amp;#34;%v,%T\n&amp;#34;, argsWithoutProg, argsWithoutProg) fmt.Printf(&amp;#34;%v,%T\n&amp;#34;, arg, arg) } 1 2 3 4 PS D:\Dev\Go\byExample\command_line_arguments&amp;gt; .\main.exe a b c d []string{&amp;#34;D:\\Dev\\Go\\byExample\\command_line_arguments\\main.exe&amp;#34;, &amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;, &amp;#34;d&amp;#34;},[]string [a b c d],[]string c,string</description></item><item><title>command-line-flags</title><link>https://before80.github.io/go_docs/example/command-line-flags/</link><pubDate>Mon, 07 Aug 2023 13:56:36 +0800</pubDate><guid>https://before80.github.io/go_docs/example/command-line-flags/</guid><description>command-line flags 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 package main import ( &amp;#34;flag&amp;#34; &amp;#34;fmt&amp;#34; ) func main() { wordPtr := flag.String(&amp;#34;word&amp;#34;, &amp;#34;foo&amp;#34;, &amp;#34;a string&amp;#34;) numbPtr := flag.Int(&amp;#34;numb&amp;#34;, 42, &amp;#34;an int&amp;#34;) forkPtr := flag.Bool(&amp;#34;fork&amp;#34;, false, &amp;#34;a bool&amp;#34;) var svar string flag.StringVar(&amp;amp;svar, &amp;#34;svar&amp;#34;, &amp;#34;bar&amp;#34;, &amp;#34;a string var&amp;#34;) flag.Parse() fmt.Println(&amp;#34;word:&amp;#34;, *wordPtr) fmt.Println(&amp;#34;numb:&amp;#34;, *numbPtr) fmt.Println(&amp;#34;fork:&amp;#34;, *forkPtr)</description></item><item><title>Command-Line Subcommands</title><link>https://before80.github.io/go_docs/example/command-line-subcommands/</link><pubDate>Mon, 07 Aug 2023 13:56:50 +0800</pubDate><guid>https://before80.github.io/go_docs/example/command-line-subcommands/</guid><description>Command-Line Subcommands 原文：https://gobyexample.com/command-line-subcommands 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17</description></item><item><title>Environment Variables</title><link>https://before80.github.io/go_docs/example/environment-variables/</link><pubDate>Mon, 07 Aug 2023 13:57:13 +0800</pubDate><guid>https://before80.github.io/go_docs/example/environment-variables/</guid><description>Environment Variables 原文：https://gobyexample.com/environment-variables 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20</description></item><item><title>http-client</title><link>https://before80.github.io/go_docs/example/http-client/</link><pubDate>Mon, 07 Aug 2023 13:57:24 +0800</pubDate><guid>https://before80.github.io/go_docs/example/http-client/</guid><description>HTTP Client 原文：https://gobyexample.com/http-client 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package main import (</description></item><item><title>HTTP Server</title><link>https://before80.github.io/go_docs/example/http-server/</link><pubDate>Mon, 07 Aug 2023 13:57:30 +0800</pubDate><guid>https://before80.github.io/go_docs/example/http-server/</guid><description>HTTP Server 原文：https://gobyexample.com/http-server 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // Note: //</description></item><item><title>context</title><link>https://before80.github.io/go_docs/example/context/</link><pubDate>Sun, 13 Aug 2023 12:57:27 +0800</pubDate><guid>https://before80.github.io/go_docs/example/context/</guid><description>context 原文：https://gobyexample.com/context 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 // Note: // This code</description></item><item><title>spawning-processes</title><link>https://before80.github.io/go_docs/example/spawning-processes/</link><pubDate>Mon, 07 Aug 2023 13:58:52 +0800</pubDate><guid>https://before80.github.io/go_docs/example/spawning-processes/</guid><description>spawning processes 原文：https://gobyexample.com/spawning-processes 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23</description></item><item><title>execing-processes</title><link>https://before80.github.io/go_docs/example/execing-processes/</link><pubDate>Mon, 07 Aug 2023 13:59:15 +0800</pubDate><guid>https://before80.github.io/go_docs/example/execing-processes/</guid><description>Exec&amp;rsquo;ing processes 原文：https://gobyexample.com/execing-processes 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24</description></item><item><title>signal</title><link>https://before80.github.io/go_docs/example/signals/</link><pubDate>Mon, 07 Aug 2023 13:59:31 +0800</pubDate><guid>https://before80.github.io/go_docs/example/signals/</guid><description>signals 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // Note: // This code is from https://gobyexample.com. package main import ( &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; &amp;#34;os/signal&amp;#34; &amp;#34;syscall&amp;#34; ) func main() { sigs := make(chan os.Signal, 1) signal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM) done := make(chan bool, 1) go func() { sig := &amp;lt;-sigs fmt.Println()</description></item><item><title>exit</title><link>https://before80.github.io/go_docs/example/exit/</link><pubDate>Mon, 07 Aug 2023 13:59:40 +0800</pubDate><guid>https://before80.github.io/go_docs/example/exit/</guid><description>exit 原文： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // Note: // This code is from https://gobyexample.com. package main import ( &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; ) func main() { defer fmt.Println(&amp;#34;!&amp;#34;) os.Exit(3) }</description></item></channel></rss>