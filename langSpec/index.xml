<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>语言规范 on Go 中文档集</title><link>https://before80.github.io/go_docs/langSpec/</link><description>Recent content in 语言规范 on Go 中文档集</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 17 May 2023 12:16:28 +0800</lastBuildDate><atom:link href="https://before80.github.io/go_docs/langSpec/index.xml" rel="self" type="application/rss+xml"/><item><title>简介</title><link>https://before80.github.io/go_docs/langSpec/Introduction/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/Introduction/</guid><description>The Go Programming Language Specification Version of June 29, 2022 Introduction 简介 原文：https://go.dev/ref/spec#Introduction This is the reference manual for the Go programming language. The pre-Go1.18 version, without generics, can be found</description></item><item><title>标记法</title><link>https://before80.github.io/go_docs/langSpec/Notation/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/Notation/</guid><description>Notation 标记法 原文：https://go.dev/ref/spec#Notation The syntax is specified using a variant of Extended Backus-Naur Form (EBNF): ​ （标记法的）语法是用 Extended Backus-Naur Form (EBNF) 的一个变</description></item><item><title>源代码表示</title><link>https://before80.github.io/go_docs/langSpec/SourceCodeRepresentation/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/SourceCodeRepresentation/</guid><description>Source code representation 源代码表示 原文：https://go.dev/ref/spec#Source_code_representation Source code is Unicode text encoded in UTF-8. The</description></item><item><title>词汇元素</title><link>https://before80.github.io/go_docs/langSpec/LexicalElements/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/LexicalElements/</guid><description>Lexical elements 词汇元素 原文：https://go.dev/ref/spec#Lexical_elements Comments 注释 Comments serve as program documentation. There are two forms: ​ 注释服务于程序文</description></item><item><title>常量</title><link>https://before80.github.io/go_docs/langSpec/Constants/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/Constants/</guid><description>Constants 常量 原文：https://go.dev/ref/spec#Constants There are boolean constants, rune constants, integer constants, floating-point constants, complex constants, and string constants. Rune, integer, floating-point, and complex constants are collectively called numeric constants. ​ 有布尔常</description></item><item><title>变量</title><link>https://before80.github.io/go_docs/langSpec/Variables/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/Variables/</guid><description>Variables 变量 原文：https://go.dev/ref/spec#Variables A variable is a storage location for holding a value. The set of permissible values is determined by the variable&amp;rsquo;s type. ​ 变量是用于保存值的</description></item><item><title>类型</title><link>https://before80.github.io/go_docs/langSpec/Types/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/Types/</guid><description>Types 类型 原文：https://go.dev/ref/spec#Types A type determines a set of values together with operations and methods specific to those values. A type may be denoted by a type name, if it has one, which must be followed by type</description></item><item><title>类型和值的属性</title><link>https://before80.github.io/go_docs/langSpec/PropertiesOfTypesAndValues/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/PropertiesOfTypesAndValues/</guid><description>Properties of types and values 类型和值的属性 原文：https://go.dev/ref/spec#Properties_of_types_and_values Underlying</description></item><item><title>块</title><link>https://before80.github.io/go_docs/langSpec/Blocks/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/Blocks/</guid><description>Blocks 块 原文：https://go.dev/ref/spec#Blocks A block is a possibly empty sequence of declarations and statements within matching brace brackets. ​ 块是一对匹配的花括号内可能为空的声明和</description></item><item><title>声明和作用域</title><link>https://before80.github.io/go_docs/langSpec/DeclarationsAndScope/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/DeclarationsAndScope/</guid><description>Declarations and scope 声明和作用域 原文：https://go.dev/ref/spec#Declarations_and_scope A declaration binds a non-blank identifier to a constant, type, type parameter,</description></item><item><title>表达式</title><link>https://before80.github.io/go_docs/langSpec/Expressions/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/Expressions/</guid><description>Expressions 表达式 原文：https://go.dev/ref/spec#Expressions An expression specifies the computation of a value by applying operators and functions to operands. ​ 表达式通过将运算符和函数</description></item><item><title>语句</title><link>https://before80.github.io/go_docs/langSpec/Statements/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/Statements/</guid><description>Statements 语句 原文：https://go.dev/ref/spec#Statements Statements control execution. ​ 语句控制执行。 Statement = Declaration | LabeledStmt | SimpleStmt | GoStmt | ReturnStmt | BreakStmt | ContinueStmt | GotoStmt | FallthroughStmt</description></item><item><title>内置函数</title><link>https://before80.github.io/go_docs/langSpec/Built-inFunctions/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/Built-inFunctions/</guid><description>Built-in functions 内置函数 原文：https://go.dev/ref/spec#Built-in_functions Built-in functions are predeclared. They are called like any other function but some of them accept a type instead</description></item><item><title>包</title><link>https://before80.github.io/go_docs/langSpec/Packages/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/Packages/</guid><description>Packages 包 原文：https://go.dev/ref/spec#Packages Go programs are constructed by linking together packages. A package in turn is constructed from one or more source files that together declare constants, types, variables and functions belonging to the package and</description></item><item><title>程序初始化和执行</title><link>https://before80.github.io/go_docs/langSpec/ProgramInitializationAndExecution/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/ProgramInitializationAndExecution/</guid><description>Program initialization and execution 程序初始化和执行 原文：https://go.dev/ref/spec#Program_initialization_and_exec</description></item><item><title>错误</title><link>https://before80.github.io/go_docs/langSpec/Errors/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/Errors/</guid><description>Errors 错误 原文：https://go.dev/ref/spec#Errors The predeclared type error is defined as ​ 预先声明的error类型被定义为 1 2 3 type error interface { Error() string }</description></item><item><title>运行时恐慌</title><link>https://before80.github.io/go_docs/langSpec/Run-timePanics/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/Run-timePanics/</guid><description>Run-time panics 运行时恐慌 原文：https://go.dev/ref/spec#Run-time_panics Execution errors such as attempting to index an array out of bounds trigger a run-time panic equivalent to a call of</description></item><item><title>系统考虑</title><link>https://before80.github.io/go_docs/langSpec/SystemConsiderations/</link><pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/SystemConsiderations/</guid><description>System considerations 系统考虑 原文：[https://go.dev/ref/spec#System considerations](https://go.dev/ref/spec#System considerations) Package unsafe - unsafe 包 The built-in package unsafe, known to the compiler and accessible through the import path &amp;quot;unsafe&amp;quot;, provides facilities for low-level programming including operations that</description></item><item><title>附录</title><link>https://before80.github.io/go_docs/langSpec/Appendix/</link><pubDate>Tue, 27 Feb 2024 20:00:28 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/Appendix/</guid><description>原文：https://go.dev/ref/spec#Appendix Appendix 附录 Language versions 语言版本 The Go 1 compatibility guarantee ensures that programs written to the Go 1 specification will continue to compile and run correctly, unchanged, over the lifetime of</description></item><item><title>类型统一规则</title><link>https://before80.github.io/go_docs/langSpec/TypeUnificationRules/</link><pubDate>Tue, 27 Feb 2024 20:00:50 +0800</pubDate><guid>https://before80.github.io/go_docs/langSpec/TypeUnificationRules/</guid><description>原文：https://go.dev/ref/spec#Type_unification_rules Type unification rules 类型统一规则 The type unification rules describe if and how two types unify. The</description></item></channel></rss>