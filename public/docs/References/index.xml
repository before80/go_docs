<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go文档集 – 参考</title>
    <link>http://ngd.cn/docs/References/</link>
    <description>Recent content in 参考 on go文档集</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 17 May 2023 12:10:24 +0800</lastBuildDate>
    
	  <atom:link href="http://ngd.cn/docs/References/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: 语言规范</title>
      <link>http://ngd.cn/docs/References/LanguageSpecification/</link>
      <pubDate>Wed, 17 May 2023 12:16:28 +0800</pubDate>
      
      <guid>http://ngd.cn/docs/References/LanguageSpecification/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: Go内存模型</title>
      <link>http://ngd.cn/docs/References/TheGoMemoryModel/</link>
      <pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate>
      
      <guid>http://ngd.cn/docs/References/TheGoMemoryModel/</guid>
      <description>
        
        
        &lt;h1 id=&#34;the-go-memory-model---go内存模型&#34;&gt;The Go Memory Model - Go内存模型&lt;/h1&gt;
&lt;p&gt;Version of June 6, 2022&lt;/p&gt;
&lt;p&gt;2022年6月6日版本&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原文：&lt;a href=&#34;https://go.dev/ref/mem&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://go.dev/ref/mem&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;​	Go的内存模型&lt;code&gt;指定了&lt;/code&gt;在一个goroutine中读取一个变量时，可以保证观察到在另一个goroutine中对同一变量进行写入产生的值&lt;code&gt;的条件&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;建议&#34;&gt;建议&lt;/h3&gt;
&lt;p&gt;​		同时被多个goroutine访问的数据的修改程序必须序列化这样的访问。&lt;/p&gt;
&lt;p&gt;​	为了序列化访问，请使用通道操作或其他同步原语，例如sync和&lt;a href=&#34;../../StdLib/sync/atomic&#34;&gt;sync/atomic&lt;/a&gt;包中的原语。&lt;/p&gt;
&lt;p&gt;​	如果您必须阅读本文档的其余部分才能理解程序的行为，那么您正在过于聪明。&lt;/p&gt;
&lt;p&gt;​	不要自作聪明（don&amp;rsquo;t be clever）&lt;/p&gt;
&lt;h3 id=&#34;非正式概述&#34;&gt;非正式概述&lt;/h3&gt;
&lt;p&gt;​	Go以与语言的其余部分类似的方式处理其内存模型，旨在保持语义简单、易于理解和有用。本节对方法进行了一般概述，对大多数程序员来说应该足够了。内存模型在下一节中更正式地指定。&lt;/p&gt;
&lt;p&gt;​	数据竞争被定义为同时发生对同一位置的内存写入和读取或写入，除非所有访问都是由sync/atomic包提供的原子数据访问。正如已经注意到的那样，程序员强烈建议使用适当的同步来避免数据竞争。在没有数据竞争的情况下，Go程序的行为就像所有的goroutines都被多路复用到一个单处理器上一样。这个属性有时被称为DRF-SC:data-race-free程序以顺序一致的方式执行。&lt;/p&gt;
&lt;p&gt;​	尽管程序员应该编写没有数据竞争的Go程序，但对于Go实现在响应数据竞争时能做什么存在一些限制。一个实现可以始终通过报告竞争并终止程序来响应数据竞争。否则，单字长或子字长内存位置的每次读取都必须观察到实际写入到该位置的值（也许是由并发执行的goroutine写入的），而且尚未被覆盖。这些实现约束使Go更像Java或JavaScript，因为大多数竞赛有限的结果，而不像C和C++，其中任何有竞赛的程序的含义完全未定义，编译器可以做任何事情。Go的方法旨在使出错的程序更可靠、更易于调试，同时仍然坚持竞赛是错误的，工具可以诊断和报告它们。&lt;/p&gt;
&lt;h2 id=&#34;内存模型&#34;&gt;内存模型&lt;/h2&gt;
&lt;p&gt;​	Go的内存模型的正式定义紧密遵循了Hans-J. Boehm和Sarita V. Adve在2008年PLDI发表的“&lt;a href=&#34;https://www.hpl.hp.com/techreports/2008/HPL-2008-56.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;C++并发内存模型基础&lt;/a&gt;”中提出的方法。无数据竞争程序的定义以及无竞争程序的顺序一致性保证等同于该工作中的定义。&lt;/p&gt;
&lt;p&gt;​	内存模型描述了由goroutine执行组成的程序执行所需的条件，这些goroutine执行由内存操作组成。&lt;/p&gt;
&lt;p&gt;​	内存操作由四个细节模拟：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;​	其类型，指示它是普通数据读取，普通数据写入还是同步操作，例如原子数据访问、互斥操作或通道操作。&lt;/li&gt;
&lt;li&gt;它在程序中的位置。&lt;/li&gt;
&lt;li&gt;正在访问的内存位置或变量。&lt;/li&gt;
&lt;li&gt;操作读取或写入的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;某些内存操作类似于读操作，包括读取、原子读取、互斥锁和通道接收。其他内存操作类似于写操作，包括写入、原子写入、互斥解锁、通道发送和通道关闭。有些操作，例如原子比较和交换，既是读操作又是写操作。&lt;/p&gt;
&lt;p&gt;​	goroutine执行被建模为单个goroutine执行的一组内存操作。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;要求1&lt;/strong&gt;：每个goroutine中的内存操作必须对应于该goroutine的正确顺序执行，给定从内存读取和写入的值。该执行必须与排序之前关系一致，该关系定义了&lt;a href=&#34;../LanguageSpecification/Introduction&#34;&gt;Go语言规范&lt;/a&gt;中Go的控制流构造的部分序列需求以及&lt;a href=&#34;../LanguageSpecification/Expressions#order-of-evaluation&#34;&gt;表达式的求值顺序&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;​	Go程序执行被建模为一组goroutine执行，以及指定每个读取操作从哪个写入操作读取的映射W。（同一程序的多个执行可能具有不同的程序执行。）&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;要求2&lt;/strong&gt;：对于给定的程序执行，映射W（当限制为同步操作时）必须可以通过某些隐式同步操作的总序来解释，该总序与这些操作读取和写入的值以及排序一致。&lt;/p&gt;
&lt;p&gt;​	同步之前的关系是来自W的同步内存操作的部分序。如果同步读取类内存操作r观察到同步写入类内存操作w（即，如果W（r）=w），则w在r之前同步。简单来说，同步之前的关系是前面段落提到的暗示的总序的子集，限于W直接观察的信息。&lt;/p&gt;
&lt;p&gt;​	发生之前的关系定义为顺序之前和同步之前关系的联合的传递闭包。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;要求3&lt;/strong&gt;：对于内存位置x上的普通（非同步）数据读取r，W（r）必须是对r可见的写入w，其中可见的意思是以下两个条件都满足：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;w先于r发生。&lt;/li&gt;
&lt;li&gt;w不先于发生在r之前的任何其他写入w&amp;rsquo;（到x）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​	关于内存位置x上的读写数据竞争，由一个读取类的内存操作r和一个写入类的内存操作w组成，其中至少有一个操作不是同步操作，并且这两个操作在happens before中没有顺序（即r既不先于w也不后于w）。&lt;/p&gt;
&lt;p&gt;​	关于内存位置x上的写写数据竞争，由两个写入类的内存操作w和w&amp;rsquo;组成，其中至少有一个操作不是同步操作，并且这两个操作在happens before中没有顺序。&lt;/p&gt;
&lt;p&gt;​	注意，如果在内存位置x上没有读写或写写数据竞争，则任何读取r在W(r)中只有一个可能性：即在happens before顺序中立即在其之前的单个w。&lt;/p&gt;
&lt;p&gt;​	更普遍地，可以证明，任何没有数据竞争的Go程序，即没有具有读写或写写数据竞争的程序执行，只能由goroutine执行的一些顺序一致地交错来解释结果。 （证明与上述引用的Boehm和Adve论文的第7节相同。）该属性称为DRF-SC。&lt;/p&gt;
&lt;p&gt;​	正式定义的目的是与其他语言（包括C，C ++，Java，JavaScript，Rust和Swift）提供给无竞争程序的DRF-SC保证相匹配。&lt;/p&gt;
&lt;p&gt;​	某些Go语言操作（例如goroutine创建和内存分配）充当同步操作。这些操作对同步之前的部分顺序的影响在下面的“同步”部分中有所记录。各个包负责为其自己的操作提供类似的文档。&lt;/p&gt;
&lt;h2 id=&#34;含有数据竞争的程序的实现限制&#34;&gt;含有数据竞争的程序的实现限制&lt;/h2&gt;
&lt;p&gt;​	前面的部分给出了数据竞争-free程序执行的形式化定义。本部分非正式地描述了实现必须为包含数据竞争的程序提供的语义。&lt;/p&gt;
&lt;p&gt;​	首先，任何实现都可以在检测到数据竞争时报告竞争并停止程序的执行。使用ThreadSanitizer的实现（使用“go build -race”访问）正是这样做的。&lt;/p&gt;
&lt;p&gt;​	否则，不大于机器字的内存位置x的读取r必须观察到某个写入w，使得r不在w之前发生，且不存在另一个写入w&amp;rsquo;，使得w发生在w&amp;rsquo;之前且w&amp;rsquo;在r之前发生。也就是说，每个读取必须观察到一个前面或并发写入的值。&lt;/p&gt;
&lt;p&gt;​	此外，不允许观察到非因果和“凭空”的写入。&lt;/p&gt;
&lt;p&gt;​	鼓励但不要求对单个机器字大小的内存位置进行读取，以满足与大小为字的内存位置相同的语义，观察单个允许的写入w。出于性能原因，实现可以将较大的操作视为一组未指定顺序的单个机器字大小的操作。这意味着，多字数据结构上的竞争可能会导致不对应于单个写入的不一致值。当值取决于内部（指针、长度）或（指针、类型）对的一致性时，例如在大多数Go实现中的接口值、映射、切片和字符串中，这种竞争反过来又可能导致任意的内存损坏。&lt;/p&gt;
&lt;p&gt;​	下面的“不正确的同步”部分提供了不正确同步的示例。&lt;/p&gt;
&lt;p&gt;下面的“错误编译”部分提供了实现的限制示例。&lt;/p&gt;
&lt;h2 id=&#34;同步&#34;&gt;同步&lt;/h2&gt;
&lt;h3 id=&#34;初始化&#34;&gt;初始化&lt;/h3&gt;
&lt;p&gt;​	程序初始化在一个goroutine中运行，但该goroutine可能会创建其他并发运行的goroutine。&lt;/p&gt;
&lt;p&gt;​	如果包p导入包q，则q的init函数的完成会在p的任何一个函数的开始之前完成。&lt;/p&gt;
&lt;p&gt;​	所有init函数的完成在函数main.main的开始之前进行同步。&lt;/p&gt;
&lt;h3 id=&#34;goroutine-创建&#34;&gt;goroutine 创建&lt;/h3&gt;
&lt;p&gt;​	启动新的goroutine的go语句在goroutine的执行开始之前进行同步。&lt;/p&gt;
&lt;p&gt;​	例如，在这个程序中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#e5c07b&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;f&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e5c07b&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e06c75&#34;&gt;a&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;hello&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e06c75&#34;&gt;a&lt;/span&gt; = &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;hello, world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#c678dd&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;f&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	调用hello将在将来的某个时候打印&amp;quot;hello, world&amp;quot;（也许在hello返回之后）。&lt;/p&gt;
&lt;h3 id=&#34;goroutine-销毁&#34;&gt;goroutine 销毁&lt;/h3&gt;
&lt;p&gt;​	退出 goroutine 的行为不能保证在程序中的任何事件之前同步。例如，在以下程序中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#e5c07b&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;hello&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#c678dd&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#c678dd&#34;&gt;func&lt;/span&gt;() { &lt;span style=&#34;color:#e06c75&#34;&gt;a&lt;/span&gt; = &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt; }()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e5c07b&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e06c75&#34;&gt;a&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;对 a 的赋值没有任何同步事件跟随，因此不能保证被任何其他 goroutine 观察到。实际上，一个激进的编译器可能会删除整个 go 语句。&lt;/p&gt;
&lt;p&gt;​	如果一个 goroutine 的影响必须被另一个 goroutine 观察到，请使用同步机制，如锁或通道通信来建立相对顺序。&lt;/p&gt;
&lt;h3 id=&#34;通道通信&#34;&gt;通道通信&lt;/h3&gt;
&lt;p&gt;​	通道通信是goroutines间同步的主要方法。每次对特定通道的发送操作都匹配到该通道的相应接收操作，通常在不同的协程中执行。&lt;/p&gt;
&lt;p&gt;​	对于特定通道的发送操作在相应接收操作完成之前同步。&lt;/p&gt;
&lt;p&gt;下面的程序：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;c&lt;/span&gt; = &lt;span style=&#34;color:#e5c07b&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#c678dd&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#e5c07b&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#d19a66&#34;&gt;10&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#e5c07b&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;f&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e06c75&#34;&gt;a&lt;/span&gt; = &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;hello, world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e06c75&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#c678dd&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;f&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;c&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e5c07b&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e06c75&#34;&gt;a&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;保证打印出&amp;quot;hello, world&amp;quot;。写操作 a 先于通道 c 的发送操作，而该发送操作在相应接收操作完成之前同步，接着写操作 a 在打印操作之前完成。&lt;/p&gt;
&lt;p&gt;​	当通道关闭时，返回零值的接收操作之前同步通道的关闭。&lt;/p&gt;
&lt;p&gt;​	在上一个示例中，将 c &amp;lt;- 0 替换为 close(c) 将产生相同保证的程序。&lt;/p&gt;
&lt;p&gt;​	从一个非缓冲通道中接收数据，在相应发送操作完成之前进行同步。&lt;/p&gt;
&lt;p&gt;​	下面这个程序（与上面相同，但发送和接收语句交换，使用非缓冲通道）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;c&lt;/span&gt; = &lt;span style=&#34;color:#e5c07b&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#c678dd&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#e5c07b&#34;&gt;int&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#e5c07b&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;f&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e06c75&#34;&gt;a&lt;/span&gt; = &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;hello, world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;c&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#c678dd&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;f&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e06c75&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e5c07b&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e06c75&#34;&gt;a&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;同样保证打印出&amp;quot;hello, world&amp;quot;。写操作 a 先于通道 c 的接收操作，而该接收操作在相应发送操作完成之前同步，接着写操作 a 在打印操作之前完成。&lt;/p&gt;
&lt;p&gt;​	如果通道被缓冲（例如 c = make(chan int, 1)），则程序不能保证打印出&amp;quot;hello, world&amp;quot;。（它可能打印出空字符串、崩溃或执行其他操作）。&lt;/p&gt;
&lt;p&gt;​	第 k 次接收操作在具有容量 C 的通道上完成之前同步于第 k+C 次发送操作完成。&lt;/p&gt;
&lt;p&gt;​	此规则将前一个规则推广到缓冲通道。它允许通过缓冲通道建立计数信号量：通道中的项目数对应于活动使用的数量，通道的容量对应于同时使用的最大数量，发送项目获取信号量，接收项目释放信号量。这是限制并发性的常见惯用语。&lt;/p&gt;
&lt;p&gt;​	该程序对于工作列表中的每个条目启动一个协程，但协程使用 limit 通道进行协调，以确保最多有三个工作函数同时运行。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;limit&lt;/span&gt; = &lt;span style=&#34;color:#e5c07b&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#c678dd&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#e5c07b&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#d19a66&#34;&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#c678dd&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#e06c75&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#c678dd&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;work&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#c678dd&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#c678dd&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#e06c75&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#c678dd&#34;&gt;func&lt;/span&gt;()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#e06c75&#34;&gt;limit&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;w&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;limit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}(&lt;span style=&#34;color:#e06c75&#34;&gt;w&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#c678dd&#34;&gt;select&lt;/span&gt;{}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;锁&#34;&gt;锁&lt;/h3&gt;
&lt;p&gt;​	sync包实现了两种锁数据类型，sync.Mutex和sync.RWMutex。&lt;/p&gt;
&lt;p&gt;​	对于任意sync.Mutex或sync.RWMutex变量l和n &amp;lt; m，调用l.Unlock()的n必须在调用l.Lock()的m返回之前同步。&lt;/p&gt;
&lt;p&gt;​	该程序：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;sync&lt;/span&gt;.&lt;span style=&#34;color:#e06c75&#34;&gt;Mutex&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#e5c07b&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;f&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e06c75&#34;&gt;a&lt;/span&gt; = &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;hello, world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e06c75&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;Unlock&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e06c75&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;Lock&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#c678dd&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;f&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e06c75&#34;&gt;l&lt;/span&gt;.&lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;Lock&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e5c07b&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e06c75&#34;&gt;a&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;保证会打印“hello, world”。f中的第一个l.Unlock()调用在main中的第二个l.Lock()调用返回之前同步，而这在打印之前排序。&lt;/p&gt;
&lt;p&gt;​	对于sync.RWMutex变量l上的任何l.RLock调用，都有一个n，使得第n次l.Unlock调用在l.RLock返回之前同步，匹配的l.RUnlock调用在第n + 1次调用l.Lock的返回之前同步。&lt;/p&gt;
&lt;p&gt;​	对sync.Mutex和sync.RWMutex变量调用l.TryLock（或l.TryRLock）的成功调用等效于调用l.Lock（或l.RLock）。失败的调用没有同步效果。就内存模型而言，即使互斥锁l未锁定，l.TryLock（或l.TryRLock）也可以被认为有可能返回false。&lt;/p&gt;
&lt;h3 id=&#34;once&#34;&gt;Once&lt;/h3&gt;
&lt;p&gt;​	sync包提供了Once类型的安全初始化机制，用于处理多个goroutine的存在。多个线程可以执行once.Do(f)来执行特定的f函数，但只有一个将运行f()，其他调用会被阻塞，直到f()返回。&lt;/p&gt;
&lt;p&gt;​	对于once.Do(f)的单个调用的f()的完成，在任何对once.Do(f)的调用返回之前同步。&lt;/p&gt;
&lt;p&gt;​	该程序：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#e5c07b&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;once&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;sync&lt;/span&gt;.&lt;span style=&#34;color:#e06c75&#34;&gt;Once&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;setup&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e06c75&#34;&gt;a&lt;/span&gt; = &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;hello, world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;doprint&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e06c75&#34;&gt;once&lt;/span&gt;.&lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;Do&lt;/span&gt;(&lt;span style=&#34;color:#e06c75&#34;&gt;setup&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e5c07b&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e06c75&#34;&gt;a&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;twoprint&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#c678dd&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;doprint&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#c678dd&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;doprint&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;调用twoprint将仅调用setup一次。setup函数将在任何print调用之前完成。结果将是打印两次“hello, world”。&lt;/p&gt;
&lt;h3 id=&#34;原子值&#34;&gt;原子值&lt;/h3&gt;
&lt;p&gt;​	sync/atomic包中的API是可以用于同步不同goroutine执行的“原子操作”。如果原子操作A的效果被原子操作B观察到，则A在B之前同步。在程序中执行的所有原子操作的行为好像按某种顺序一致地执行。&lt;/p&gt;
&lt;p&gt;​	上述定义与C ++的顺序一致的原子操作和Java的易失变量具有相同的语义。&lt;/p&gt;
&lt;h3 id=&#34;finalizers-终结者&#34;&gt;Finalizers 终结者&lt;/h3&gt;
&lt;p&gt;​	runtime包提供了SetFinalizer函数，该函数会在程序不再使用某个特定对象时调用终结器（finalizer）。对于调用SetFinalizer(x, f)的程序，x的终结器函数f(x)的调用与之前的SetFinalizer调用之间是同步的。&lt;/p&gt;
&lt;h3 id=&#34;其他机制&#34;&gt;其他机制&lt;/h3&gt;
&lt;p&gt;​	sync包提供了额外的同步抽象，包括&lt;a href=&#34;../../StdLib/sync/index#type-cond&#34;&gt;条件变量&lt;/a&gt;、&lt;a href=&#34;../../StdLib/sync/index#type-map&#34;&gt;无锁映射&lt;/a&gt;、&lt;a href=&#34;../../StdLib/sync/index#type-pool&#34;&gt;分配池&lt;/a&gt;和&lt;a href=&#34;../../StdLib/sync/index#type-waitgroup&#34;&gt;等待组&lt;/a&gt;。每个同步抽象的文档都会说明它所做出的同步保证。&lt;/p&gt;
&lt;p&gt;​	提供同步抽象的其他包也应该说明它们所做出的保证。&lt;/p&gt;
&lt;h2 id=&#34;错误的同步&#34;&gt;错误的同步&lt;/h2&gt;
&lt;p&gt;​	带有数据竞争的程序是错误的，可能会导致非顺序一致性执行。特别地，需要注意的是，读取操作&lt;code&gt;r&lt;/code&gt;可能会观察到与&lt;code&gt;r&lt;/code&gt;并发执行的任何写入操作&lt;code&gt;w&lt;/code&gt;写入的值。即使这样，它也不意味着在&lt;code&gt;r&lt;/code&gt;之后发生的读取会观察到&lt;code&gt;w&lt;/code&gt;之前发生的写入。&lt;/p&gt;
&lt;p&gt;​	在下面的程序中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;a&lt;/span&gt;, &lt;span style=&#34;color:#e06c75&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#e5c07b&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;f&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e06c75&#34;&gt;a&lt;/span&gt; = &lt;span style=&#34;color:#d19a66&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e06c75&#34;&gt;b&lt;/span&gt; = &lt;span style=&#34;color:#d19a66&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;g&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e5c07b&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e06c75&#34;&gt;b&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e5c07b&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e06c75&#34;&gt;a&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#c678dd&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;f&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;g&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	函数g可能会打印2，然后再打印0。&lt;/p&gt;
&lt;p&gt;​	这个事实使得一些常见的惯用法变得无效。&lt;/p&gt;
&lt;p&gt;​	Double-checked locking是为了避免同步的开销。例如，twoprint程序可能会写成不正确的形式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#e5c07b&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;done&lt;/span&gt; &lt;span style=&#34;color:#e5c07b&#34;&gt;bool&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;setup&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e06c75&#34;&gt;a&lt;/span&gt; = &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;hello, world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e06c75&#34;&gt;done&lt;/span&gt; = &lt;span style=&#34;color:#e5c07b&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;doprint&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#c678dd&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#e06c75&#34;&gt;done&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#e06c75&#34;&gt;once&lt;/span&gt;.&lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;Do&lt;/span&gt;(&lt;span style=&#34;color:#e06c75&#34;&gt;setup&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e5c07b&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e06c75&#34;&gt;a&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;twoprint&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#c678dd&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;doprint&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#c678dd&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;doprint&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;但是，没有保证在doprint中观察到done的写入意味着观察到a的写入。这个版本可能会（不正确地）打印空字符串而不是“hello, world”。&lt;/p&gt;
&lt;p&gt;​	另一个不正确的习惯是忙等待一个值，如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#e5c07b&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;done&lt;/span&gt; &lt;span style=&#34;color:#e5c07b&#34;&gt;bool&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;setup&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e06c75&#34;&gt;a&lt;/span&gt; = &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;hello, world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e06c75&#34;&gt;done&lt;/span&gt; = &lt;span style=&#34;color:#e5c07b&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#c678dd&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;setup&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#c678dd&#34;&gt;for&lt;/span&gt; !&lt;span style=&#34;color:#e06c75&#34;&gt;done&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e5c07b&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e06c75&#34;&gt;a&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	与前面一样，在main中观察到done的写入并不意味着观察到a的写入，因此该程序也可能打印空字符串。更糟糕的是，没有保证done的写入将被main观察到，因为两个线程之间没有同步事件。main中的循环不能保证结束。&lt;/p&gt;
&lt;p&gt;​	还有更微妙的变体，例如下面的程序：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color:#c678dd&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e06c75&#34;&gt;msg&lt;/span&gt; &lt;span style=&#34;color:#e5c07b&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;T&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;setup&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e06c75&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#e5c07b&#34;&gt;new&lt;/span&gt;(&lt;span style=&#34;color:#e06c75&#34;&gt;T&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e06c75&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#e06c75&#34;&gt;msg&lt;/span&gt; = &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;hello, world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e06c75&#34;&gt;g&lt;/span&gt; = &lt;span style=&#34;color:#e06c75&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#c678dd&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;setup&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#c678dd&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e5c07b&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e5c07b&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e06c75&#34;&gt;g&lt;/span&gt;.&lt;span style=&#34;color:#e06c75&#34;&gt;msg&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	即使main观察到&lt;code&gt;g != nil&lt;/code&gt;并退出其循环，也不能保证它将观察到g.msg的初始化值。&lt;/p&gt;
&lt;p&gt;​	在所有这些示例中，解决方案都是相同的：使用显式同步。&lt;/p&gt;
&lt;h2 id=&#34;不正确的编译&#34;&gt;不正确的编译&lt;/h2&gt;
&lt;p&gt;​	Go 内存模型限制编译器优化的程度与限制 Go 程序一样。某些在单线程程序中有效的编译器优化在所有 Go 程序中并不有效。特别地，编译器不能引入原始程序中不存在的写操作，也不能使单个读取操作观察到多个值，并且不能允许单个写入操作写入多个值。&lt;/p&gt;
&lt;p&gt;​	以下所有示例均假定 &lt;code&gt;*p&lt;/code&gt; 和 &lt;code&gt;*q&lt;/code&gt; 引用对多个 goroutine 可访问的内存位置。&lt;/p&gt;
&lt;p&gt;​	不要在无竞争的程序中引入数据竞争，这意味着不要将写操作移出它们出现在的条件语句中。例如，编译器不应该翻转以下程序中的条件语句：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#56b6c2&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;p&lt;/span&gt; = &lt;span style=&#34;color:#d19a66&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;cond&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#56b6c2&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;p&lt;/span&gt; = &lt;span style=&#34;color:#d19a66&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;也就是说，编译器不应该将程序重写为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#56b6c2&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;p&lt;/span&gt; = &lt;span style=&#34;color:#d19a66&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#e06c75&#34;&gt;cond&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#56b6c2&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;p&lt;/span&gt; = &lt;span style=&#34;color:#d19a66&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	如果 cond 为 false，并且另一个 goroutine 正在读取 &lt;code&gt;*p&lt;/code&gt;，则在原始程序中，其他 goroutine 只能观察到 &lt;code&gt;*p&lt;/code&gt; 的先前任何值和 1。在重写后的程序中，其他 goroutine 可以观察到先前不可能出现的值 2。&lt;/p&gt;
&lt;p&gt;​	不要在无竞争的程序中引入数据竞争，这也意味着不要假设循环一定会终止。例如，在以下程序中，编译器通常不能将对 &lt;code&gt;*p&lt;/code&gt; 或 &lt;code&gt;*q&lt;/code&gt; 的访问移到循环之前：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;list&lt;/span&gt;; &lt;span style=&#34;color:#e06c75&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e5c07b&#34;&gt;nil&lt;/span&gt;; &lt;span style=&#34;color:#e06c75&#34;&gt;e&lt;/span&gt; = &lt;span style=&#34;color:#e06c75&#34;&gt;e&lt;/span&gt;.&lt;span style=&#34;color:#e06c75&#34;&gt;next&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e06c75&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#56b6c2&#34;&gt;++&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;p&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#56b6c2&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;q&lt;/span&gt; = &lt;span style=&#34;color:#d19a66&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	如果 list 指向一个循环链表，则原始程序永远不会访问 *p 或 *q，但重写后的程序会访问。如果编译器可以证明 &lt;code&gt;*p&lt;/code&gt; 不会 panic，那么将 &lt;code&gt;*p&lt;/code&gt; 移到循环之前是安全的；将 &lt;code&gt;*q&lt;/code&gt; 移到循环之前也需要编译器证明没有其他 goroutine 可以访问 &lt;code&gt;*q&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;​	不要在无竞争的程序中引入数据竞争，这也意味着不要假设被调用的函数总是返回或不包含同步操作。例如，在以下程序中，编译器不应该在函数调用之前移动对 &lt;code&gt;*p&lt;/code&gt; 或 &lt;code&gt;*q&lt;/code&gt; 的访问（至少不应该没有对 f 的确切行为有直接了解）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#61afef;font-weight:bold&#34;&gt;f&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;p&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#56b6c2&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;q&lt;/span&gt; = &lt;span style=&#34;color:#d19a66&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	如果该调用永远不返回，则原始程序将不会访问 &lt;code&gt;*p&lt;/code&gt; 或 &lt;code&gt;*q&lt;/code&gt;，但是重写后的程序将会访问。如果调用包含同步操作，则原始程序可以建立到 &lt;code&gt;*p&lt;/code&gt; 和 &lt;code&gt;*q&lt;/code&gt; 访问之前的 happens-before 关系，但重写后的程序则不能。&lt;/p&gt;
&lt;p&gt;​	不允许一个读取操作观察到多个值意味着不从共享内存中重新加载本地变量。例如，在这个程序中，编译器不得丢弃i并在&lt;code&gt;funcs[i]()&lt;/code&gt;之前重新加载&lt;code&gt;i = *p&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;p&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#d19a66&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#e5c07b&#34;&gt;len&lt;/span&gt;(&lt;span style=&#34;color:#e06c75&#34;&gt;funcs&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e5c07b&#34;&gt;panic&lt;/span&gt;(&lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;invalid function index&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#56b6c2&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;complex&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;code&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7f848e&#34;&gt;// 编译器不得在此重新加载i = *p
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7f848e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;funcs&lt;/span&gt;[&lt;span style=&#34;color:#e06c75&#34;&gt;i&lt;/span&gt;]()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	如果复杂的代码需要许多寄存器，单线程程序的编译器可以在不保存副本的情况下放弃i，然后在&lt;code&gt;funcs [i]()&lt;/code&gt;之前重新加载&lt;code&gt;i = *p&lt;/code&gt;。 Go编译器不允许，因为&lt;code&gt;*p&lt;/code&gt;的值可能已经改变。（相反，编译器可以将i溢出到堆栈。）&lt;/p&gt;
&lt;p&gt;​	不允许单个写入操作写入多个值也意味着不要在写入之前使用本地变量将写入内存用作临时存储。例如，在此程序中，编译器不得在&lt;code&gt;*p&lt;/code&gt;中使用临时存储：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#56b6c2&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;p&lt;/span&gt; = &lt;span style=&#34;color:#e06c75&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#56b6c2&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#d19a66&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;也就是说，它不得将程序重写为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#56b6c2&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;/=&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#56b6c2&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;i&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	如果i和&lt;code&gt;*p&lt;/code&gt;起初相等于2，则原始代码会执行&lt;code&gt;*p = 3&lt;/code&gt;，因此竞争线程只能从&lt;code&gt;*p&lt;/code&gt;读取2或3。重写代码执行&lt;code&gt;*p = 1&lt;/code&gt;，然后&lt;code&gt;*p = 3&lt;/code&gt;，允许竞争线程也读取1。&lt;/p&gt;
&lt;p&gt;​	请注意，所有这些优化在C / C ++编译器中都是允许的：与C / C ++编译器共享后端的Go编译器必须注意禁用对Go无效的优化。&lt;/p&gt;
&lt;p&gt;​	请注意，如果编译器可以证明竞争不会影响目标平台上的正确执行，则禁止引入数据竞争并不适用。例如，在基本上所有CPU上，将&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#e06c75&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#e06c75&#34;&gt;m&lt;/span&gt;; &lt;span style=&#34;color:#e06c75&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#56b6c2&#34;&gt;++&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e06c75&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;shared&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;转换为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#55595f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;local&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;shared&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#e06c75&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#e06c75&#34;&gt;m&lt;/span&gt;; &lt;span style=&#34;color:#e06c75&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#56b6c2&#34;&gt;++&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e06c75&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;local&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;​	只要能够证明&lt;code&gt;*shared&lt;/code&gt;在访问时不会故障，因为潜在的添加读取不会影响任何现有的并发读取或写入。另一方面，转换在源到源转换器中无效。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;​		编写无数据竞争程序的Go程序员可以依赖这些程序的顺序一致的执行，就像其他现代编程语言一样。&lt;/p&gt;
&lt;p&gt;​	在涉及具有竞争关系的程序时，程序员和编译器都应记住这些建议：不要自作聪明（don&amp;rsquo;t be clever）。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 命令文档</title>
      <link>http://ngd.cn/docs/References/CommandDocumentation/</link>
      <pubDate>Wed, 17 May 2023 13:22:45 +0800</pubDate>
      
      <guid>http://ngd.cn/docs/References/CommandDocumentation/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: Go Modules Reference</title>
      <link>http://ngd.cn/docs/References/GoModulesReference/</link>
      <pubDate>Wed, 17 May 2023 12:50:54 +0800</pubDate>
      
      <guid>http://ngd.cn/docs/References/GoModulesReference/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: go.mod 文件参考</title>
      <link>http://ngd.cn/docs/References/gomodFileReference/</link>
      <pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate>
      
      <guid>http://ngd.cn/docs/References/gomodFileReference/</guid>
      <description>
        
        
        &lt;h1 id=&#34;gomod-file-reference---gomod文件参考&#34;&gt;go.mod file reference - go.mod文件参考&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;原文：&lt;a href=&#34;https://go.dev/doc/modules/gomod-ref&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://go.dev/doc/modules/gomod-ref&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​	每个 Go 模块都由一个 &lt;code&gt;go.mod&lt;/code&gt; 文件定义，该文件描述了该模块的属性，包括它对其他模块和 Go 版本的依赖性。&lt;/p&gt;
&lt;p&gt;​	这些属性包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当前模块的&lt;code&gt;模块路径&lt;/code&gt;。这应该是Go工具可以下载该模块的位置，例如模块代码的存储库位置。当与模块的版本号结合时，它可以作为唯一的标识符。它也是该模块中所有包的包路径的前缀。关于Go如何定位模块的更多信息，请参阅&lt;a href=&#34;../GoModulesReference/Introduction&#34;&gt;Go模块参考&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;当前模块所需的&lt;code&gt;Go的最小版本&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;当前模块所需的其他模块的最低版本列表。&lt;/li&gt;
&lt;li&gt;指令，可选择用其他模块版本或本地目录&lt;code&gt;替换 (replace)&lt;/code&gt;所需模块，或&lt;code&gt;排除 （exclude）&lt;/code&gt;所需模块的特定版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	当你运行&lt;code&gt;go mod init&lt;/code&gt;命令时，Go会生成一个&lt;code&gt;go.mod&lt;/code&gt;文件。下面的例子创建了一个&lt;code&gt;go.mod&lt;/code&gt;文件，将模块的模块路径设置为&lt;code&gt;example/mymodule&lt;/code&gt;。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ go mod init example/mymodule
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	使用&lt;code&gt;go&lt;/code&gt;命令来管理依赖关系。这些命令确保你的&lt;code&gt;go.mod&lt;/code&gt;文件中描述的需求保持一致，并且&lt;code&gt;go.mod&lt;/code&gt;文件的内容是有效的。这些命令包括&lt;code&gt;go get&lt;/code&gt;和&lt;code&gt;go mod tidy&lt;/code&gt;以及&lt;code&gt;go mod edit&lt;/code&gt;命令。&lt;/p&gt;
&lt;p&gt;​	关于&lt;code&gt;go&lt;/code&gt;命令的参考，请看&lt;a href=&#34;../CommandDocumentation/go&#34;&gt;go 命令&lt;/a&gt;。你可以通过输入&lt;code&gt;go help command-name&lt;/code&gt;从命令行获得帮助，如&lt;code&gt;go help mod tidy&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参见&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go 工具在您使用它们管理依赖项时对 &lt;code&gt;go.mod&lt;/code&gt; 文件进行修改。更多信息请参见&lt;a href=&#34;../../UsingAndUnderstandingGo/ManagingDependencies&#34;&gt;管理依赖关系&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;有关&lt;code&gt;go.mod&lt;/code&gt;文件的更多细节和限制，请参见&lt;a href=&#34;../GoModulesReference/Introduction&#34;&gt;Go模块参考&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;example-示例&#34;&gt;Example 示例&lt;/h2&gt;
&lt;p&gt;一个&lt;code&gt;go.mod&lt;/code&gt;文件包括以下例子中的指令。这些在本主题的其他部分有描述。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;module example.com/mymodule

go 1.14

require (
    example.com/othermodule v1.2.3
    example.com/thismodule v1.2.3
    example.com/thatmodule v1.2.3
)

replace example.com/thatmodule =&amp;gt; ../thatmodule
exclude example.com/thismodule v1.3.0
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;module-模块&#34;&gt;module 模块&lt;/h2&gt;
&lt;p&gt;​	声明模块的模块路径，它是模块的唯一标识符（与模块的版本号结合）。模块路径成为该模块包含的所有包的导入前缀。&lt;/p&gt;
&lt;p&gt;​	更多信息请参见 &lt;code&gt;Go Modules Reference&lt;/code&gt; 中的 &lt;a href=&#34;../GoModulesReference/gomodFiles#module-directive&#34;&gt;module 指令&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;syntax-语法&#34;&gt;Syntax 语法&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;module module-path
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;module-path&lt;/p&gt;
&lt;p&gt;模块的模块路径，通常是 Go 工具可以下载该模块的存储库位置。对于版本&lt;code&gt;v2&lt;/code&gt;及以后的模块，该值必须以主版本号结尾，如&lt;code&gt;/v2&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples-示例&#34;&gt;Examples 示例&lt;/h3&gt;
&lt;p&gt;下面的例子用&lt;code&gt;example.com&lt;/code&gt;代替可以下载该模块的存储库域。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;v0&lt;/code&gt;或&lt;code&gt;v1&lt;/code&gt;模块的模块声明：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;module example.com/mymodule
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;v2&lt;/code&gt;模块的模块路径：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;module example.com/mymodule/v2
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;notes-注意事项&#34;&gt;Notes 注意事项&lt;/h3&gt;
&lt;p&gt;​	模块路径必须唯一标识你的模块。对于大多数模块，路径是一个URL，&lt;code&gt;go&lt;/code&gt;命令可以在其中找到代码（或重定向到代码）。对于那些不会被直接下载的模块，模块路径可以是一些你能控制的名字，以确保唯一性。前缀&lt;code&gt;example/&lt;/code&gt;也被保留下来，用于像这样的例子中。&lt;/p&gt;
&lt;p&gt;​	更多细节，请参见&lt;a href=&#34;../../UsingAndUnderstandingGo/ManagingDependencies&#34;&gt;管理依赖关系&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;​	在实践中，模块路径通常是模块源的版本库域和版本库中的模块代码的路径。&lt;code&gt;go&lt;/code&gt;命令在下载模块版本时依赖这种形式，来代表模块用户解决依赖关系。&lt;/p&gt;
&lt;p&gt;​	即使你一开始不打算让你的模块供其他代码使用，使用它的存储库路径也是一种最佳做法，可以帮助你避免在以后发布模块时不得不重命名它。&lt;/p&gt;
&lt;p&gt;​	如果一开始你不知道模块的最终存储库位置，可以考虑暂时使用一个安全的替代品，比如你拥有的域名或你控制的名称（如你的公司名称），以及模块名称或源目录的后续路径。更多信息，请参见&lt;a href=&#34;../../UsingAndUnderstandingGo/ManagingDependencies&#34;&gt;管理依赖关系&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;​	例如，如果你在&lt;code&gt;stringtools&lt;/code&gt;目录下开发，你的临时模块路径可能是&lt;code&gt;&amp;lt;company-name&amp;gt;/stringtools&lt;/code&gt;，如下面的例子，其中&lt;code&gt;company-name&lt;/code&gt;是你公司的名字：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;go mod init &amp;lt;company-name&amp;gt;/stringtools
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;go&#34;&gt;go&lt;/h2&gt;
&lt;p&gt;​	表示该模块是按照指令指定的Go版本的语义来编写的。&lt;/p&gt;
&lt;p&gt;​	更多信息请参见 Go 模块参考中的 &lt;a href=&#34;../GoModulesReference/gomodFiles#go-directive&#34;&gt;go 指令&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;syntax-语法-1&#34;&gt;Syntax 语法&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;go minimum-go-version
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;minimum-go-version&lt;/p&gt;
&lt;p&gt;编译本模块中的包所需的最小Go版本。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples-示例-1&#34;&gt;Examples 示例&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;模块必须在1.14或更高版本的Go上运行：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;go 1.14
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;notes-注意事项-1&#34;&gt;Notes 注意事项&lt;/h3&gt;
&lt;p&gt;​	&lt;code&gt;go&lt;/code&gt;指令最初是为了支持Go语言的向后不兼容的变化（见&lt;a href=&#34;https://go.dev/design/28221-go2-transitions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 2 过渡&lt;/a&gt;）。自从引入模块以来，没有任何不兼容的语言变化，但&lt;code&gt;go&lt;/code&gt;指令仍会影响新的语言特性的使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于模块内的包，编译器会拒绝使用&lt;code&gt;go&lt;/code&gt;指令指定的版本之后引入的语言特性。例如，如果一个模块的指令是&lt;code&gt;go 1.12&lt;/code&gt;，它的包就不能使用&lt;code&gt;1_000_000&lt;/code&gt;这样的数字字面量，这是在&lt;code&gt;Go 1.13（版本）&lt;/code&gt;引入的。&lt;/li&gt;
&lt;li&gt;如果一个较早的Go版本构建了该模块的一个包并遇到了编译错误，那么错误就会指出该模块是为一个较新的Go版本编写的。例如，假设一个模块是&lt;code&gt;go 1.13&lt;/code&gt;，其中一个包使用数字字面量&lt;code&gt;1_000_000&lt;/code&gt;。如果该包是用&lt;code&gt;Go 1.12 （版本）&lt;/code&gt;构建的，编译器就会注意到该代码是为&lt;code&gt;Go 1.13（版本）&lt;/code&gt;编写的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外，&lt;code&gt;go&lt;/code&gt;命令会根据&lt;code&gt;go&lt;/code&gt;指令所指定的版本改变其行为。这有以下影响：&lt;/p&gt;
&lt;p&gt;（1）在&lt;code&gt;go 1.14&lt;/code&gt;或更高版本中，可以启用自动&lt;a href=&#34;../GoModulesReference/Module-awareCommands#vendoring&#34;&gt;vendoring&lt;/a&gt;  。如果文件&lt;code&gt;vendor/modules.txt&lt;/code&gt;存在并且与&lt;code&gt;go.mod&lt;/code&gt;一致，就不需要显式使用&lt;code&gt;-mod=vendor&lt;/code&gt;标志。&lt;/p&gt;
&lt;p&gt;（2）在 &lt;code&gt;go 1.16&lt;/code&gt; 或更高版本中，&lt;code&gt;all&lt;/code&gt;包模式只匹配由&lt;a href=&#34;../GoModulesReference/Glossary&#34;&gt;主模块（main module）&lt;/a&gt;中的包和测试导入的包。这也是&lt;a href=&#34;../GoModulesReference/Module-awareCommands#go-mod-vendor&#34;&gt;go mod vendor&lt;/a&gt;自引入模块以来所保留的包的集合。在较低的版本中，&lt;code&gt;all&lt;/code&gt;也包括由主模块中的包导入的包的测试、对这些包的测试等等。&lt;/p&gt;
&lt;p&gt;（3）在go 1.17或更高版本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;go.mod&lt;/code&gt;文件包括一个明确的&lt;a href=&#34;../GoModulesReference/gomodFiles#require-directive&#34;&gt;require指令&lt;/a&gt;，为每个模块提供由主模块中的包或测试过渡导入的任何包。(在 go 1.16 或更低版本中，只有在&lt;a href=&#34;../GoModulesReference/MVS&#34;&gt;最小版本选择&lt;/a&gt;会选择不同版本的情况下，才会包括间接依赖。） 这个额外的信息使得&lt;a href=&#34;../GoModulesReference/ModuleGraphPruning&#34;&gt;模块图的修剪&lt;/a&gt;和&lt;a href=&#34;../GoModulesReference/ModuleGraphPruning#lazy-module-loading&#34;&gt;延迟模块加载&lt;/a&gt;成为可能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由于&lt;code&gt;// indirect&lt;/code&gt;依赖关系可能比以前的&lt;code&gt;go&lt;/code&gt;版本多得多，间接依赖关系被记录在&lt;code&gt;go.mod&lt;/code&gt;文件中的一个独立块中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;go mod vendor&lt;/code&gt;省略了&lt;code&gt;go.mod&lt;/code&gt;和&lt;code&gt;go.sum&lt;/code&gt;文件中的供应商依赖关系。(这允许在&lt;code&gt;vendor&lt;/code&gt;的子目录中调用&lt;code&gt;go&lt;/code&gt;命令来识别正确的主模块）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;go mod vendor&lt;/code&gt;在&lt;code&gt;vendor/modules.txt&lt;/code&gt;中记录每个依赖关系的&lt;code&gt;go.mod&lt;/code&gt;文件的&lt;code&gt;go&lt;/code&gt;版本。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	一个&lt;code&gt;go.mod&lt;/code&gt;文件最多可以包含一个&lt;code&gt;go&lt;/code&gt;指令。如果没有&lt;code&gt;go&lt;/code&gt;指令，大多数命令会添加一个当前Go版本的&lt;code&gt;go&lt;/code&gt;指令。&lt;/p&gt;
&lt;h2 id=&#34;require&#34;&gt;require&lt;/h2&gt;
&lt;p&gt;​	将模块声明为当前模块的依赖项，并指定所需模块的最小版本。&lt;/p&gt;
&lt;p&gt;​	更多信息请参见 Go 模块参考中的 &lt;a href=&#34;../GoModulesReference/gomodFiles#require-directive&#34;&gt;require 指令&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;syntax-语法-2&#34;&gt;Syntax 语法&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;require module-path module-version
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;module-path&lt;/p&gt;
&lt;p&gt;模块的模块路径，通常是模块源的存储库域和模块名称的连接。对于版本v2及以后的模块，该值必须以主要版本号结尾，如&lt;code&gt;/v2&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;module-version&lt;/p&gt;
&lt;p&gt;模块的版本。这可以是一个发布的版本号，如v1.2.3，或Go生成的伪版本号，如v0.0.0-20200921210052-fa0125251cc4。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples-示例-2&#34;&gt;Examples 示例&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;要求发布版本v1.2.3：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;require example.com/othermodule v1.2.3
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过使用 Go 工具生成的伪版本号来要求其存储库中尚未标记的版本。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;require example.com/othermodule v0.0.0-20200921210052-fa0125251cc4
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;notes-注意事项-2&#34;&gt;Notes 注意事项&lt;/h3&gt;
&lt;p&gt;​	当你运行 &lt;code&gt;go&lt;/code&gt; 命令时，例如 &lt;code&gt;go get&lt;/code&gt;，Go 会为包含导入包的每个模块插入 &lt;code&gt;require&lt;/code&gt; 指令。当一个模块还没有在其存储库中被标记时，Go 会分配一个它在运行命令时生成的伪版本号。&lt;/p&gt;
&lt;p&gt;​	你可以通过使用&lt;a href=&#34;#replace&#34;&gt;replace指令&lt;/a&gt;让 Go 从其存储库以外的地方要求一个模块。&lt;/p&gt;
&lt;p&gt;​	更多关于版本号的信息，请参见&lt;a href=&#34;../../UsingAndUnderstandingGo/DevelopingModules/ModuleVersionNumbering&#34;&gt;模块版本号&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;​	关于管理依赖关系的更多信息，请参见下文：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../UsingAndUnderstandingGo/ManagingDependencies#adding-a-dependency&#34;&gt;Adding a dependency（添加一个依赖关系）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../UsingAndUnderstandingGo/ManagingDependencies#getting-a-specific-dependency-version&#34;&gt;Getting a specific dependency version（获取一个特定的依赖关系版本）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../UsingAndUnderstandingGo/ManagingDependencies#discovering-available-updates&#34;&gt;Discovering available updates（发现可用的更新）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../UsingAndUnderstandingGo/ManagingDependencies#upgrading-or-downgrading-a-dependency&#34;&gt;Upgrading or downgrading a dependency（升级或降级一个依赖项）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;../../UsingAndUnderstandingGo/ManagingDependencies#synchronizing-your-code-s-dependencies&#34;&gt;Synchronizing your code’s dependencies（同步你的代码的依赖项）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;replace-替换&#34;&gt;replace 替换&lt;/h2&gt;
&lt;p&gt;​	将特定版本(或所有版本)的模块内容替换为另一个模块版本或本地目录。Go工具在解析依赖项时将使用替换路径。&lt;/p&gt;
&lt;p&gt;​	更多信息请参见 Go 模块参考中的 &lt;a href=&#34;../GoModulesReference/gomodFiles#replace-directive&#34;&gt;replace 指令&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;syntax-语法-3&#34;&gt;Syntax 语法&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;replace module-path [module-version] =&amp;gt; replacement-path [replacement-version]
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;module-path&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;要替换的模块的模块路径。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;module-version&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可选的。要替换的特定版本。如果这个版本号被省略，该模块的所有版本都会被替换成箭头右侧的内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;replacement-path&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Go应该寻找所需模块的路径。这可以是一个模块路径，也可以是文件系统中与替换模块相关的目录的路径。如果这是一个模块路径，则必须指定一个替换版本（&lt;code&gt;replacement-version&lt;/code&gt;）的值。如果这是一个本地路径，则不能使用替换版本（&lt;code&gt;replacement-version&lt;/code&gt;）的值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;replacement-version&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;替换模块的版本。只有当&lt;code&gt;replacement-path&lt;/code&gt;是一个模块路径（不是本地目录）时，才可以指定替换版本。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;examples-示例-3&#34;&gt;Examples 示例&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用模块存储库的一个分叉来替换&lt;/p&gt;
&lt;p&gt;在下面的例子中，example.com/othermodule的任何版本都被替换成指定的分叉代码&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;require example.com/othermodule v1.2.3

replace example.com/othermodule =&amp;gt; example.com/myfork/othermodule v1.2.3-fixed
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	当另一个模块路径替换一个模块时，不用更改要替换的模块中包的导入语句。&lt;/p&gt;
&lt;p&gt;​	关于使用分叉的模块代码副本的更多信息，请参阅&lt;a href=&#34;../../UsingAndUnderstandingGo/ManagingDependencies#requiring-external-module-code-from-your-own-repository-fork&#34;&gt;Requiring external module code from your own repository fork（从你自己的存储库分叉中请求外部模块代码）&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用不同的版本号替换&lt;/p&gt;
&lt;p&gt;下面的例子指定使用&lt;code&gt;v1.2.3&lt;/code&gt;版本，而不是该模块的任何其他版本。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;require example.com/othermodule v1.2.2

replace example.com/othermodule =&amp;gt; example.com/othermodule v1.2.3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下面的例子用同一模块的&lt;code&gt;v1.2.3&lt;/code&gt;版本替换了模块&lt;code&gt;v1.2.5&lt;/code&gt;版本。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;replace example.com/othermodule v1.2.5 =&amp;gt; example.com/othermodule v1.2.3
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用本地代码替换&lt;/p&gt;
&lt;p&gt;下面的示例指定应使用本地目录替换模块的所有版本。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;require example.com/othermodule v1.2.3

replace example.com/othermodule =&amp;gt; ../othermodule
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下面的示例指定只能使用本地目录替换 &lt;code&gt;v1.2.5&lt;/code&gt;。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;require example.com/othermodule v1.2.5

replace example.com/othermodule v1.2.5 =&amp;gt; ../othermodule
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	关于使用模块代码的本地副本的更多信息，请参见&lt;a href=&#34;../../UsingAndUnderstandingGo/ManagingDependencies#requiring-module-code-in-a-local-directory&#34;&gt;Requiring module code in a local directory&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;notes-注意事项-3&#34;&gt;Notes 注意事项&lt;/h3&gt;
&lt;p&gt;​	当你想让Go使用另一个路径来查找模块的源代码时，可以使用&lt;code&gt;replace&lt;/code&gt;指令来暂时用另一个值来替换模块的路径值。这样做的效果是将 Go 的模块搜索重定向到替换的位置。你不必更改包的导入路径以使用替换路径。&lt;/p&gt;
&lt;p&gt;​	在构建当前模块时，使用&lt;code&gt;exclude&lt;/code&gt;和&lt;code&gt;replace&lt;/code&gt;指令来控制构建时的依赖项解析。&lt;strong&gt;这些指令在依赖于当前模块的模块中会被忽略。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	&lt;code&gt;replace&lt;/code&gt;指令在以下情况下很有用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你正在开发一个新的模块，其代码还没有进入存储库。你想用一个本地版本的客户端进行测试。&lt;/li&gt;
&lt;li&gt;你发现了一个依赖项的问题，克隆了这个依赖项的存储库，并且正在使用本地存储库测试一个修复程序。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;!!! warning &amp;ldquo;请注意&amp;rdquo;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;请注意，单独的`replace`指令并不能将一个模块添加到[module graph（模块图）](../GoModulesReference/Glossary#module-graph)中。在主模块的 `go.mod` 文件或依赖模块的 `go.mod` 文件中，还需要一个指向被替换模块版本的 [require 指令](#require)。如果你没有一个特定的版本要替换，你可以使用一个假版本，就像下面的示例。注意，这将破坏依赖于你的模块的模块，因为`replace`指令仅应用于主模块。
&lt;/code&gt;&lt;/pre&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;require example.com/mod v0.0.0-replace

replace example.com/mod v0.0.0-replace =&amp;gt; ./mod
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	关于替换所需模块的更多信息，包括使用Go工具进行更改，请参见：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../../UsingAndUnderstandingGo/ManagingDependencies#requiring-external-module-code-from-your-own-repository-fork&#34;&gt;Requiring external module code from your own repository fork（从你自己的版本库分叉中请求外部模块代码）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../../UsingAndUnderstandingGo/ManagingDependencies#requiring-module-code-in-a-local-directory&#34;&gt;Requiring module code in a local directory（要求本地目录中的模块代码）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多关于版本号的信息，参见&lt;a href=&#34;../../UsingAndUnderstandingGo/DevelopingModules/ModuleVersionNumbering&#34;&gt;模块版本号&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;exclude-排除&#34;&gt;exclude 排除&lt;/h2&gt;
&lt;p&gt;​	指定要从当前模块的依赖关系图中排除的模块或模块版本。&lt;/p&gt;
&lt;p&gt;​	更多信息请参见 Go Modules Reference 中的 &lt;a href=&#34;../GoModulesReference/gomodFiles#exclude-directive&#34;&gt;exclude 指令&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;syntax-语法-4&#34;&gt;Syntax 语法&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;exclude module-path module-version
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;module-path&lt;/p&gt;
&lt;p&gt;要排除的模块的模块路径。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;module-version&lt;/p&gt;
&lt;p&gt;要排除的特定版本。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;example-示例-1&#34;&gt;Example 示例&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;排除 example.com/theirmodule 版本 &lt;code&gt;v1.3.0&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;exclude example.com/theirmodule v1.3.0
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;notes-注意事项-4&#34;&gt;Notes 注意事项&lt;/h3&gt;
&lt;p&gt;​	使用&lt;code&gt;exclude&lt;/code&gt;指令可以排除一个间接需要但由于某种原因无法加载的模块的特定版本。例如，你可以用它来排除一个有无效校验和的模块的版本。&lt;/p&gt;
&lt;p&gt;​	在构建当前模块（你正在构建的主模块）时，使用&lt;code&gt;exclude&lt;/code&gt;和&lt;code&gt;replace&lt;/code&gt;指令来控制构建时的依赖项解析。&lt;strong&gt;这些指令在依赖于当前模块的模块中会被忽略&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​	你可以使用&lt;a href=&#34;../GoModulesReference/Module-awareCommands#go-mod-edit&#34;&gt;go mod edit&lt;/a&gt;命令来排除一个模块，如下面的示例。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;go mod edit -exclude=example.com/theirmodule@v1.3.0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	更多关于版本号的信息，请参见&lt;a href=&#34;../../UsingAndUnderstandingGo/DevelopingModules/ModuleVersionNumbering&#34;&gt;模块版本号&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;retract-撤回&#34;&gt;retract 撤回&lt;/h2&gt;
&lt;p&gt;​	指示不应依赖&lt;code&gt;go.mod&lt;/code&gt;定义的模块的版本或版本范围。当版本提前发布或在发布后发现严重问题时，&lt;code&gt;retract&lt;/code&gt;指令很有用。&lt;/p&gt;
&lt;p&gt;​	更多信息请参见 Go Modules Reference 中的 &lt;a href=&#34;../GoModulesReference/gomodFiles#retract-directive&#34;&gt;retract 指令&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;syntax-语法-5&#34;&gt;Syntax 语法&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;retract version // rationale
retract [version-low,version-high] // rationale
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;version&lt;/p&gt;
&lt;p&gt;要撤回的单个版本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;version-low&lt;/p&gt;
&lt;p&gt;要撤回的版本范围的下限。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;version-high&lt;/p&gt;
&lt;p&gt;要撤回的版本范围的上限。版本-低和版本-高都包括在这个范围内。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rationale&lt;/p&gt;
&lt;p&gt;解释撤回的可选注释。可以在发给用户的消息中显示。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;example-示例-2&#34;&gt;Example 示例&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Retracting a single version 撤回单个版本&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;retract v1.1.0 // Published accidentally.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Retracting a range of versions 撤回一系列的版本&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;retract [v1.0.0,v1.0.5] // Build broken on some platforms.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;notes-注意事项-5&#34;&gt;Notes 注意事项&lt;/h3&gt;
&lt;p&gt;​	使用&lt;code&gt;retract&lt;/code&gt;指令来指示你的模块的前一个版本不应该被使用。用户不会通过&lt;code&gt;go get&lt;/code&gt;、&lt;code&gt;go mod tidy&lt;/code&gt;或其他命令自动升级到撤回的版本。用户不会在&lt;code&gt;go list -m -u&lt;/code&gt;中看到撤回的版本是可用的更新。&lt;/p&gt;
&lt;p&gt;​	撤回的版本应该保持可用，以便已经依赖它们的用户能够构建他们的软件包。即使撤回的版本已经从源码库中删除，它仍然可以在&lt;a href=&#34;https://proxy.golang.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;proxy.golang.org&lt;/a&gt;这样的镜像中使用。当用户在相关模块上运行 &lt;code&gt;go get&lt;/code&gt; 或 &lt;code&gt;go list -m -u&lt;/code&gt; 时，他们可能会被通知依赖被撤回的版本。&lt;/p&gt;
&lt;p&gt;​	&lt;code&gt;go&lt;/code&gt;命令通过读取模块最新版本的&lt;code&gt;go.mod&lt;/code&gt;文件中的&lt;code&gt;retract&lt;/code&gt;指令来发现撤回的版本。最新的版本是，按优先顺序排列：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;它的最高发布版本，如果有的话；&lt;/li&gt;
&lt;li&gt;它的最高预发布版本，如果有的话；&lt;/li&gt;
&lt;li&gt;储存库默认分支的尖端（tip）的伪版本。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​	当你添加一个撤回内容时，&lt;strong&gt;你几乎总是需要标记一个新的、更高的版本&lt;/strong&gt;，这样命令就会在模块的最新版本中看到它。&lt;/p&gt;
&lt;p&gt;​	你可以发布一个版本，该版本的唯一目的是发出撤回的信号。在这种情况下，新版本也可能撤回自己。&lt;/p&gt;
&lt;p&gt;​	例如，如果你不小心标记了&lt;code&gt;v1.0.0&lt;/code&gt;，你可以用以下指令标记&lt;code&gt;v1.0.1&lt;/code&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;retract v1.0.0 // Published accidentally. 已意外地发布。
retract v1.0.1 // Contains retraction only. 仅包含撤回。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;​	遗憾的是，一旦版本发布，就无法更改。如果稍后在不同的提交中标记了&lt;code&gt;v1.0.0&lt;/code&gt;，&lt;code&gt;go&lt;/code&gt;命令可能会在&lt;code&gt;go.sum&lt;/code&gt;或&lt;a href=&#34;../GoModulesReference/AuthenticatingModules#checksum-database&#34;&gt;校验数据库&lt;/a&gt;中检测到一个不匹配的和。&lt;/p&gt;
&lt;p&gt;​	模块的撤回版本通常不会出现在 &lt;code&gt;go list -m -versions&lt;/code&gt; 的输出中，但你可以使用 &lt;code&gt;-retracted&lt;/code&gt; 来显示它们。更多信息请参见 Go Modules Reference 中的 &lt;a href=&#34;../GoModulesReference/Module-awareCommands#go-list-m&#34;&gt;go list -m&lt;/a&gt;。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Contribution Guide</title>
      <link>http://ngd.cn/docs/References/ContributionGuide/</link>
      <pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate>
      
      <guid>http://ngd.cn/docs/References/ContributionGuide/</guid>
      <description>
        
        
        &lt;h1 id=&#34;contribution-guide&#34;&gt;Contribution Guide&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;原文：&lt;a href=&#34;https://go.dev/doc/contribute&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://go.dev/doc/contribute&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The Go project welcomes all contributors.&lt;/p&gt;
&lt;p&gt;This document is a guide to help you through the process of contributing to the Go project, which is a little different from that used by other open source projects. We assume you have a basic understanding of Git and Go.&lt;/p&gt;
&lt;p&gt;In addition to the information here, the Go community maintains a &lt;a href=&#34;https://go.dev/wiki/CodeReview&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CodeReview&lt;/a&gt; wiki page. Feel free to contribute to the wiki as you learn the review process.&lt;/p&gt;
&lt;p&gt;Note that the &lt;code&gt;gccgo&lt;/code&gt; front end lives elsewhere; see &lt;a href=&#34;https://go.dev/doc/gccgo_contribute.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Contributing to gccgo&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;becoming-a-contributor&#34;&gt;Becoming a contributor&lt;/h2&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;The first step is registering as a Go contributor and configuring your environment. Here is a checklist of the required steps to follow:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Step 0&lt;/strong&gt;: Decide on a single Google Account you will be using to contribute to Go. Use that account for all the following steps and make sure that &lt;code&gt;git&lt;/code&gt; is configured to create commits with that account&amp;rsquo;s e-mail address.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: &lt;a href=&#34;https://cla.developers.google.com/clas&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sign and submit&lt;/a&gt; a CLA (Contributor License Agreement).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: Configure authentication credentials for the Go Git repository. Visit &lt;a href=&#34;https://go.googlesource.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;go.googlesource.com&lt;/a&gt;, click &amp;ldquo;Generate Password&amp;rdquo; in the page&amp;rsquo;s top right menu bar, and follow the instructions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: Register for Gerrit, the code review tool used by the Go team, by &lt;a href=&#34;https://go-review.googlesource.com/login/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;visiting this page&lt;/a&gt;. The CLA and the registration need to be done only once for your account.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 4&lt;/strong&gt;: Install &lt;code&gt;git-codereview&lt;/code&gt; by running &lt;code&gt;go install golang.org/x/review/git-codereview@latest&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you prefer, there is an automated tool that walks through these steps. Just run:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ go install golang.org/x/tools/cmd/go-contrib-init@latest
$ cd /code/to/edit
$ go-contrib-init
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The rest of this chapter elaborates on these instructions. If you have completed the steps above (either manually or through the tool), jump to &lt;a href=&#34;https://go.dev/doc/contribute#before_contributing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Before contributing code&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;step-0-select-a-google-account&#34;&gt;Step 0: Select a Google Account&lt;/h3&gt;
&lt;p&gt;A contribution to Go is made through a Google account with a specific e-mail address. Make sure to use the same account throughout the process and for all your subsequent contributions. You may need to decide whether to use a personal address or a corporate address. The choice will depend on who will own the copyright for the code that you will be writing and submitting. You might want to discuss this topic with your employer before deciding which account to use.&lt;/p&gt;
&lt;p&gt;Google accounts can either be Gmail e-mail accounts, G Suite organization accounts, or accounts associated with an external e-mail address. For instance, if you need to use an existing corporate e-mail that is not managed through G Suite, you can create an account associated &lt;a href=&#34;https://accounts.google.com/SignUpWithoutGmail&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;with your existing e-mail address&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You also need to make sure that your Git tool is configured to create commits using your chosen e-mail address. You can either configure Git globally (as a default for all projects), or locally (for a single specific project). You can check the current configuration with this command:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git config --global user.email  # check current global config
$ git config user.email           # check current local config
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To change the configured address:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git config --global user.email name@example.com   # change global config
$ git config user.email name@example.com            # change local config
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;step-1-contributor-license-agreement&#34;&gt;Step 1: Contributor License Agreement&lt;/h3&gt;
&lt;p&gt;Before sending your first change to the Go project you must have completed one of the following two CLAs. Which CLA you should sign depends on who owns the copyright to your work.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you are the copyright holder, you will need to agree to the &lt;a href=&#34;https://developers.google.com/open-source/cla/individual&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;individual contributor license agreement&lt;/a&gt;, which can be completed online.&lt;/li&gt;
&lt;li&gt;If your organization is the copyright holder, the organization will need to agree to the &lt;a href=&#34;https://developers.google.com/open-source/cla/corporate&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;corporate contributor license agreement&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can check your currently signed agreements and sign new ones at the &lt;a href=&#34;https://cla.developers.google.com/clas?pli=1&amp;amp;authuser=1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Developers Contributor License Agreements&lt;/a&gt; website. If the copyright holder for your contribution has already completed the agreement in connection with another Google open source project, it does not need to be completed again.&lt;/p&gt;
&lt;p&gt;If the copyright holder for the code you are submitting changes—for example, if you start contributing code on behalf of a new company—please send mail to the &lt;a href=&#34;mailto:golang-dev@googlegroups.com&#34;&gt;&lt;code&gt;golang-dev&lt;/code&gt; mailing list&lt;/a&gt;. This will let us know the situation so we can make sure an appropriate agreement is completed.&lt;/p&gt;
&lt;h3 id=&#34;step-2-configure-git-authentication&#34;&gt;Step 2: Configure git authentication&lt;/h3&gt;
&lt;p&gt;The main Go repository is located at &lt;a href=&#34;https://go.googlesource.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;go.googlesource.com&lt;/a&gt;, a Git server hosted by Google. Authentication on the web server is made through your Google account, but you also need to configure &lt;code&gt;git&lt;/code&gt; on your computer to access it. Follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Visit &lt;a href=&#34;https://go.googlesource.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;go.googlesource.com&lt;/a&gt; and click on &amp;ldquo;Generate Password&amp;rdquo; in the page&amp;rsquo;s top right menu bar. You will be redirected to accounts.google.com to sign in.&lt;/li&gt;
&lt;li&gt;After signing in, you will be taken to a page with the title &amp;ldquo;Configure Git&amp;rdquo;. This page contains a personalized script that when run locally will configure Git to hold your unique authentication key. This key is paired with one that is generated and stored on the server, analogous to how SSH keys work.&lt;/li&gt;
&lt;li&gt;Copy and run this script locally in your terminal to store your secret authentication token in a &lt;code&gt;.gitcookies&lt;/code&gt; file. If you are using a Windows computer and running &lt;code&gt;cmd&lt;/code&gt;, you should instead follow the instructions in the yellow box to run the command; otherwise run the regular script.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;step-3-create-a-gerrit-account&#34;&gt;Step 3: Create a Gerrit account&lt;/h3&gt;
&lt;p&gt;Gerrit is an open-source tool used by Go maintainers to discuss and review code submissions.&lt;/p&gt;
&lt;p&gt;To register your account, visit &lt;a href=&#34;https://go-review.googlesource.com/login/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;go-review.googlesource.com/login/&lt;/a&gt; and sign in once using the same Google Account you used above.&lt;/p&gt;
&lt;h3 id=&#34;step-4-install-the-git-codereview-command&#34;&gt;Step 4: Install the git-codereview command&lt;/h3&gt;
&lt;p&gt;Changes to Go must be reviewed before they are accepted, no matter who makes the change. A custom &lt;code&gt;git&lt;/code&gt; command called &lt;code&gt;git-codereview&lt;/code&gt; simplifies sending changes to Gerrit.&lt;/p&gt;
&lt;p&gt;Install the &lt;code&gt;git-codereview&lt;/code&gt; command by running,&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ go install golang.org/x/review/git-codereview@latest
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Make sure &lt;code&gt;git-codereview&lt;/code&gt; is installed in your shell path, so that the &lt;code&gt;git&lt;/code&gt; command can find it. Check that&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git codereview help
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;prints help text, not an error. If it prints an error, make sure that &lt;code&gt;$GOPATH/bin&lt;/code&gt; is in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;On Windows, when using git-bash you must make sure that &lt;code&gt;git-codereview.exe&lt;/code&gt; is in your &lt;code&gt;git&lt;/code&gt; exec-path. Run &lt;code&gt;git --exec-path&lt;/code&gt; to discover the right location then create a symbolic link or just copy the executable from &lt;code&gt;$GOPATH/bin&lt;/code&gt; to this directory.&lt;/p&gt;
&lt;h2 id=&#34;before-contributing-code&#34;&gt;Before contributing code&lt;/h2&gt;
&lt;p&gt;The project welcomes code patches, but to make sure things are well coordinated you should discuss any significant change before starting the work. It&amp;rsquo;s recommended that you signal your intention to contribute in the issue tracker, either by &lt;a href=&#34;https://go.dev/issue/new&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;filing a new issue&lt;/a&gt; or by claiming an &lt;a href=&#34;https://go.dev/issues&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;existing one&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;where-to-contribute&#34;&gt;Where to contribute&lt;/h3&gt;
&lt;p&gt;The Go project consists of the main &lt;a href=&#34;https://go.googlesource.com/go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;go&lt;/a&gt; repository, which contains the source code for the Go language, as well as many golang.org/x/&amp;hellip; repositories. These contain the various tools and infrastructure that support Go. For example, &lt;a href=&#34;https://go.googlesource.com/pkgsite&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;golang.org/x/pkgsite&lt;/a&gt; is for &lt;a href=&#34;https://pkg.go.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pkg.go.dev&lt;/a&gt;, &lt;a href=&#34;https://go.googlesource.com/playground&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;golang.org/x/playground&lt;/a&gt; is for the Go playground, and &lt;a href=&#34;https://go.googlesource.com/tools&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;golang.org/x/tools&lt;/a&gt; contains a variety of Go tools, including the Go language server, &lt;a href=&#34;https://go.dev/s/gopls&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gopls&lt;/a&gt;. You can see a list of all the golang.org/x/&amp;hellip; repositories on &lt;a href=&#34;https://go.googlesource.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;go.googlesource.com&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;check-the-issue-tracker&#34;&gt;Check the issue tracker&lt;/h3&gt;
&lt;p&gt;Whether you already know what contribution to make, or you are searching for an idea, the &lt;a href=&#34;https://github.com/golang/go/issues&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;issue tracker&lt;/a&gt; is always the first place to go. Issues are triaged to categorize them and manage the workflow.&lt;/p&gt;
&lt;p&gt;The majority of the golang.org/x/&amp;hellip; repos also use the main Go issue tracker. However, a few of these repositories manage their issues separately, so please be sure to check the right tracker for the repository to which you would like to contribute.&lt;/p&gt;
&lt;p&gt;Most issues will be marked with one of the following workflow labels:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NeedsInvestigation&lt;/strong&gt;: The issue is not fully understood and requires analysis to understand the root cause.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NeedsDecision&lt;/strong&gt;: the issue is relatively well understood, but the Go team hasn&amp;rsquo;t yet decided the best way to address it. It would be better to wait for a decision before writing code. If you are interested in working on an issue in this state, feel free to &amp;ldquo;ping&amp;rdquo; maintainers in the issue&amp;rsquo;s comments if some time has passed without a decision.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NeedsFix&lt;/strong&gt;: the issue is fully understood and code can be written to fix it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can use GitHub&amp;rsquo;s search functionality to find issues to help out with. Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Issues that need investigation: &lt;a href=&#34;https://github.com/golang/go/issues?q=is%3Aissue&amp;#43;is%3Aopen&amp;#43;label%3ANeedsInvestigation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;is:issue is:open label:NeedsInvestigation&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Issues that need a fix: &lt;a href=&#34;https://github.com/golang/go/issues?q=is%3Aissue&amp;#43;is%3Aopen&amp;#43;label%3ANeedsFix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;is:issue is:open label:NeedsFix&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Issues that need a fix and have a suggested change: &lt;a href=&#34;https://github.com/golang/go/issues?q=is%3Aissue&amp;#43;is%3Aopen&amp;#43;label%3ANeedsFix&amp;#43;%22golang.org%2Fcl%22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;is:issue is:open label:NeedsFix &amp;quot;golang.org/cl&amp;quot;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Issues that need a fix and do not have a suggested change: &lt;a href=&#34;https://github.com/golang/go/issues?q=is%3Aissue&amp;#43;is%3Aopen&amp;#43;label%3ANeedsFix&amp;#43;NOT&amp;#43;%22golang.org%2Fcl%22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;is:issue is:open label:NeedsFix NOT &amp;quot;golang.org/cl&amp;quot;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;open-an-issue-for-any-new-problem&#34;&gt;Open an issue for any new problem&lt;/h3&gt;
&lt;p&gt;Excluding very trivial changes, all contributions should be connected to an existing issue. Feel free to open one and discuss your plans. This process gives everyone a chance to validate the design, helps prevent duplication of effort, and ensures that the idea fits inside the goals for the language and tools. It also checks that the design is sound before code is written; the code review tool is not the place for high-level discussions.&lt;/p&gt;
&lt;p&gt;When planning work, please note that the Go project follows a &lt;a href=&#34;https://go.dev/wiki/Go-Release-Cycle&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;six-month development cycle&lt;/a&gt; for the main Go repository. The latter half of each cycle is a three-month feature freeze during which only bug fixes and documentation updates are accepted. New contributions can be sent during a feature freeze, but they will not be merged until the freeze is over. The freeze applies to the entire main repository as well as to the code in golang.org/x/&amp;hellip; repositories that is needed to build the binaries included in the release. See the lists of packages vendored into &lt;a href=&#34;https://github.com/golang/go/blob/master/src/vendor/modules.txt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the standard library&lt;/a&gt; and the &lt;a href=&#34;https://github.com/golang/go/blob/master/src/cmd/vendor/modules.txt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;go&lt;/code&gt; command&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Significant changes to the language, libraries, or tools must go through the &lt;a href=&#34;https://go.dev/s/proposal-process&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;change proposal process&lt;/a&gt; before they can be accepted.&lt;/p&gt;
&lt;p&gt;Sensitive security-related issues (only!) should be reported to &lt;a href=&#34;mailto:security@golang.org&#34;&gt;security@golang.org&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;sending-a-change-via-github&#34;&gt;Sending a change via GitHub&lt;/h2&gt;
&lt;p&gt;First-time contributors that are already familiar with the &lt;a href=&#34;https://guides.github.com/introduction/flow/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub flow&lt;/a&gt; are encouraged to use the same process for Go contributions. Even though Go maintainers use Gerrit for code review, a bot called Gopherbot has been created to sync GitHub pull requests to Gerrit.&lt;/p&gt;
&lt;p&gt;Open a pull request as you normally would. Gopherbot will create a corresponding Gerrit change and post a link to it on your GitHub pull request; updates to the pull request will also get reflected in the Gerrit change. When somebody comments on the change, their comment will be also posted in your pull request, so you will get a notification.&lt;/p&gt;
&lt;p&gt;Some things to keep in mind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To update the pull request with new code, just push it to the branch; you can either add more commits, or rebase and force-push (both styles are accepted).&lt;/li&gt;
&lt;li&gt;If the request is accepted, all commits will be squashed, and the final commit description will be composed by concatenating the pull request&amp;rsquo;s title and description. The individual commits&amp;rsquo; descriptions will be discarded. See &lt;a href=&#34;https://go.dev/doc/contribute#commit_messages&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Writing good commit messages&lt;/a&gt; for some suggestions.&lt;/li&gt;
&lt;li&gt;Gopherbot is unable to sync line-by-line codereview into GitHub: only the contents of the overall comment on the request will be synced. Remember you can always visit Gerrit to see the fine-grained review.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sending-a-change-via-gerrit&#34;&gt;Sending a change via Gerrit&lt;/h2&gt;
&lt;p&gt;It is not possible to fully sync Gerrit and GitHub, at least at the moment, so we recommend learning Gerrit. It&amp;rsquo;s different but powerful and familiarity with it will help you understand the flow.&lt;/p&gt;
&lt;h3 id=&#34;overview-1&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;This is an overview of the overall process:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Step 1:&lt;/p&gt;
&lt;p&gt;Clone the source code from&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;go.googlesource.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and make sure it&amp;rsquo;s stable by compiling and testing it once.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re making a change to the &lt;a href=&#34;https://go.googlesource.com/go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;main Go repository&lt;/a&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git clone https://go.googlesource.com/go
$ cd go/src
$ ./all.bash                                # compile and test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you&amp;rsquo;re making a change to one of the golang.org/x/&amp;hellip; repositories (&lt;a href=&#34;https://go.googlesource.com/tools&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;golang.org/x/tools&lt;/a&gt;, in this example):&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git clone https://go.googlesource.com/tools
$ cd tools
$ go test ./...                             # compile and test
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step 2:&lt;/p&gt;
&lt;p&gt;Prepare changes in a new branch, created from the master branch. To commit the changes, use&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;codereview
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;change
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;; that will create or amend a single commit in the branch.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git checkout -b mybranch
$ [edit files...]
$ git add [files...]
$ git codereview change   # create commit in the branch
$ [edit again...]
$ git add [files...]
$ git codereview change   # amend the existing commit with new changes
$ [etc.]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step 3:&lt;/p&gt;
&lt;p&gt;Test your changes, either by running the tests in the package you edited or by re-running&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;all.bash
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;In the main Go repository:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ./all.bash    # recompile and test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In a golang.org/x/&amp;hellip; repository:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ go test ./... # recompile and test
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step 4:&lt;/p&gt;
&lt;p&gt;Send the changes for review to Gerrit using&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;codereview
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mail
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(which doesn&amp;rsquo;t use e-mail, despite the name).&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git codereview mail     # send changes to Gerrit
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Step 5:&lt;/p&gt;
&lt;p&gt;After a review, apply changes to the same single commit and mail them to Gerrit again:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ [edit files...]
$ git add [files...]
$ git codereview change   # update same commit
$ git codereview mail     # send to Gerrit again
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The rest of this section describes these steps in more detail.&lt;/p&gt;
&lt;h3 id=&#34;step-1-clone-the-source-code&#34;&gt;Step 1: Clone the source code&lt;/h3&gt;
&lt;p&gt;In addition to a recent Go installation, you need to have a local copy of the source checked out from the correct repository. You can check out the Go source repo onto your local file system anywhere you want as long as it&amp;rsquo;s outside your &lt;code&gt;GOPATH&lt;/code&gt;. Clone from &lt;code&gt;go.googlesource.com&lt;/code&gt; (not GitHub):&lt;/p&gt;
&lt;p&gt;Main Go repository:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git clone https://go.googlesource.com/go
$ cd go
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;golang.org/x/&amp;hellip; repository&lt;/p&gt;
&lt;p&gt;(&lt;a href=&#34;https://go.googlesource.com/tools&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;golang.org/x/tools&lt;/a&gt; in this example):&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git clone https://go.googlesource.com/tools
$ cd tools
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;step-2-prepare-changes-in-a-new-branch&#34;&gt;Step 2: Prepare changes in a new branch&lt;/h3&gt;
&lt;p&gt;Each Go change must be made in a separate branch, created from the master branch. You can use the normal &lt;code&gt;git&lt;/code&gt; commands to create a branch and add changes to the staging area:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git checkout -b mybranch
$ [edit files...]
$ git add [files...]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To commit changes, instead of &lt;code&gt;git commit&lt;/code&gt;, use &lt;code&gt;git codereview change&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git codereview change
(open $EDITOR)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can edit the commit description in your favorite editor as usual. The &lt;code&gt;git&lt;/code&gt; &lt;code&gt;codereview&lt;/code&gt; &lt;code&gt;change&lt;/code&gt; command will automatically add a unique Change-Id line near the bottom. That line is used by Gerrit to match successive uploads of the same change. Do not edit or delete it. A Change-Id looks like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Change-Id: I2fbdbffb3aab626c4b6f56348861b7909e3e8990
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The tool also checks that you&amp;rsquo;ve run &lt;code&gt;go&lt;/code&gt; &lt;code&gt;fmt&lt;/code&gt; over the source code, and that the commit message follows the &lt;a href=&#34;https://go.dev/doc/contribute#commit_messages&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;suggested format&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you need to edit the files again, you can stage the new changes and re-run &lt;code&gt;git&lt;/code&gt; &lt;code&gt;codereview&lt;/code&gt; &lt;code&gt;change&lt;/code&gt;: each subsequent run will amend the existing commit while preserving the Change-Id.&lt;/p&gt;
&lt;p&gt;Make sure that you always keep a single commit in each branch. If you add more commits by mistake, you can use &lt;code&gt;git&lt;/code&gt; &lt;code&gt;rebase&lt;/code&gt; to &lt;a href=&#34;https://stackoverflow.com/questions/31668794/squash-all-your-commits-in-one-before-a-pull-request-in-github&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;squash them together&lt;/a&gt; into a single one.&lt;/p&gt;
&lt;h3 id=&#34;step-3-test-your-changes&#34;&gt;Step 3: Test your changes&lt;/h3&gt;
&lt;p&gt;You&amp;rsquo;ve &lt;a href=&#34;https://go.dev/doc/code.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;written and tested your code&lt;/a&gt;, but before sending code out for review, run &lt;em&gt;all the tests for the whole tree&lt;/em&gt; to make sure the changes don&amp;rsquo;t break other packages or programs.&lt;/p&gt;
&lt;h4 id=&#34;in-the-main-go-repository&#34;&gt;In the main Go repository&lt;/h4&gt;
&lt;p&gt;This can be done by running &lt;code&gt;all.bash&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd go/src
$ ./all.bash
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(To build under Windows use &lt;code&gt;all.bat&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;After running for a while and printing a lot of testing output, the command should finish by printing,&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ALL TESTS PASSED
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can use &lt;code&gt;make.bash&lt;/code&gt; instead of &lt;code&gt;all.bash&lt;/code&gt; to just build the compiler and the standard library without running the test suite. Once the &lt;code&gt;go&lt;/code&gt; tool is built, it will be installed as &lt;code&gt;bin/go&lt;/code&gt; under the directory in which you cloned the Go repository, and you can run it directly from there. See also the section on how to &lt;a href=&#34;https://go.dev/doc/contribute#quick_test&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;test your changes quickly&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;in-the-golangorgx-repositories&#34;&gt;In the golang.org/x/&amp;hellip; repositories&lt;/h4&gt;
&lt;p&gt;Run the tests for the entire repository (&lt;a href=&#34;https://go.googlesource.com/tools&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;golang.org/x/tools&lt;/a&gt;, in this example):&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd tools
$ go test ./...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you&amp;rsquo;re concerned about the build status, you can check the &lt;a href=&#34;https://build.golang.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Build Dashboard&lt;/a&gt;. Test failures may also be caught by the TryBots in code review.&lt;/p&gt;
&lt;p&gt;Some repositories, like &lt;a href=&#34;https://go.googlesource.com/vscode-go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;golang.org/x/vscode-go&lt;/a&gt; will have different testing infrastructures, so always check the documentation for the repository in which you are working. The README file in the root of the repository will usually have this information.&lt;/p&gt;
&lt;h3 id=&#34;step-4-send-changes-for-review&#34;&gt;Step 4: Send changes for review&lt;/h3&gt;
&lt;p&gt;Once the change is ready and tested over the whole tree, send it for review. This is done with the &lt;code&gt;mail&lt;/code&gt; sub-command which, despite its name, doesn&amp;rsquo;t directly mail anything; it just sends the change to Gerrit:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git codereview mail
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Gerrit assigns your change a number and URL, which &lt;code&gt;git&lt;/code&gt; &lt;code&gt;codereview&lt;/code&gt; &lt;code&gt;mail&lt;/code&gt; will print, something like:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;remote: New Changes:
remote:   https://go-review.googlesource.com/99999 math: improved Sin, Cos and Tan precision for very large arguments
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you get an error instead, check the &lt;a href=&#34;https://go.dev/doc/contribute#troubleshooting_mail&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Troubleshooting mail errors&lt;/a&gt; section.&lt;/p&gt;
&lt;p&gt;If your change relates to an open GitHub issue and you have followed the &lt;a href=&#34;https://go.dev/doc/contribute#commit_messages&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;suggested commit message format&lt;/a&gt;, the issue will be updated in a few minutes by a bot, linking your Gerrit change to it in the comments.&lt;/p&gt;
&lt;h3 id=&#34;step-5-revise-changes-after-a-review&#34;&gt;Step 5: Revise changes after a review&lt;/h3&gt;
&lt;p&gt;Go maintainers will review your code on Gerrit, and you will get notifications via e-mail. You can see the review on Gerrit and comment on them there. You can also reply &lt;a href=&#34;https://gerrit-review.googlesource.com/Documentation/intro-user.html#reply-by-email&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;using e-mail&lt;/a&gt; if you prefer.&lt;/p&gt;
&lt;p&gt;If you need to revise your change after the review, edit the files in the same branch you previously created, add them to the Git staging area, and then amend the commit with &lt;code&gt;git&lt;/code&gt; &lt;code&gt;codereview&lt;/code&gt; &lt;code&gt;change&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git codereview change     # amend current commit
(open $EDITOR)
$ git codereview mail       # send new changes to Gerrit
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you don&amp;rsquo;t need to change the commit description, just save and exit from the editor. Remember not to touch the special Change-Id line.&lt;/p&gt;
&lt;p&gt;Again, make sure that you always keep a single commit in each branch. If you add more commits by mistake, you can use &lt;code&gt;git rebase&lt;/code&gt; to &lt;a href=&#34;https://stackoverflow.com/questions/31668794/squash-all-your-commits-in-one-before-a-pull-request-in-github&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;squash them together&lt;/a&gt; into a single one.&lt;/p&gt;
&lt;h2 id=&#34;good-commit-messages&#34;&gt;Good commit messages&lt;/h2&gt;
&lt;p&gt;Commit messages in Go follow a specific set of conventions, which we discuss in this section.&lt;/p&gt;
&lt;p&gt;Here is an example of a good one:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;math: improve Sin, Cos and Tan precision for very large arguments

The existing implementation has poor numerical properties for
large arguments, so use the McGillicutty algorithm to improve
accuracy above 1e10.

The algorithm is described at https://wikipedia.org/wiki/McGillicutty_Algorithm

Fixes #159
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;first-line&#34;&gt;First line&lt;/h3&gt;
&lt;p&gt;The first line of the change description is conventionally a short one-line summary of the change, prefixed by the primary affected package.&lt;/p&gt;
&lt;p&gt;A rule of thumb is that it should be written so to complete the sentence &amp;ldquo;This change modifies Go to _____.&amp;rdquo; That means it does not start with a capital letter, is not a complete sentence, and actually summarizes the result of the change.&lt;/p&gt;
&lt;p&gt;Follow the first line by a blank line.&lt;/p&gt;
&lt;h3 id=&#34;main-content&#34;&gt;Main content&lt;/h3&gt;
&lt;p&gt;The rest of the description elaborates and should provide context for the change and explain what it does. Write in complete sentences with correct punctuation, just like for your comments in Go. Don&amp;rsquo;t use HTML, Markdown, or any other markup language.&lt;/p&gt;
&lt;p&gt;Add any relevant information, such as benchmark data if the change affects performance. The &lt;a href=&#34;https://godoc.org/golang.org/x/perf/cmd/benchstat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;benchstat&lt;/a&gt; tool is conventionally used to format benchmark data for change descriptions.&lt;/p&gt;
&lt;h3 id=&#34;referencing-issues&#34;&gt;Referencing issues&lt;/h3&gt;
&lt;p&gt;The special notation &amp;ldquo;Fixes #12345&amp;rdquo; associates the change with issue 12345 in the &lt;a href=&#34;https://go.dev/issue/12345&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go issue tracker&lt;/a&gt;. When this change is eventually applied, the issue tracker will automatically mark the issue as fixed.&lt;/p&gt;
&lt;p&gt;If the change is a partial step towards the resolution of the issue, write &amp;ldquo;Updates #12345&amp;rdquo; instead. This will leave a comment in the issue linking back to the change in Gerrit, but it will not close the issue when the change is applied.&lt;/p&gt;
&lt;p&gt;If you are sending a change against a golang.org/x/&amp;hellip; repository, you must use the fully-qualified syntax supported by GitHub to make sure the change is linked to the issue in the main repository, not the x/ repository. Most issues are tracked in the main repository&amp;rsquo;s issue tracker. The correct form is &amp;ldquo;Fixes golang/go#159&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;the-review-process&#34;&gt;The review process&lt;/h2&gt;
&lt;p&gt;This section explains the review process in detail and how to approach reviews after a change has been mailed.&lt;/p&gt;
&lt;h3 id=&#34;common-beginner-mistakes&#34;&gt;Common beginner mistakes&lt;/h3&gt;
&lt;p&gt;When a change is sent to Gerrit, it is usually triaged within a few days. A maintainer will have a look and provide some initial review that for first-time contributors usually focuses on basic cosmetics and common mistakes. These include things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Commit message not following the &lt;a href=&#34;https://go.dev/doc/contribute#commit_messages&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;suggested format&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The lack of a linked GitHub issue. The vast majority of changes require a linked issue that describes the bug or the feature that the change fixes or implements, and consensus should have been reached on the tracker before proceeding with it. Gerrit reviews do not discuss the merit of the change, just its implementation.
Only trivial or cosmetic changes will be accepted without an associated issue.&lt;/li&gt;
&lt;li&gt;Change sent during the freeze phase of the development cycle, when the tree is closed for general changes. In this case, a maintainer might review the code with a line such as &lt;code&gt;R=go1.12&lt;/code&gt;, which means that it will be reviewed later when the tree opens for a new development window. You can add &lt;code&gt;R=go1.XX&lt;/code&gt; as a comment yourself if you know that it&amp;rsquo;s not the correct time frame for the change.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;trybots&#34;&gt;Trybots&lt;/h3&gt;
&lt;p&gt;After an initial reading of your change, maintainers will trigger trybots, a cluster of servers that will run the full test suite on several different architectures. Most trybots complete in a few minutes, at which point a link will be posted in Gerrit where you can see the results.&lt;/p&gt;
&lt;p&gt;If the trybot run fails, follow the link and check the full logs of the platforms on which the tests failed. Try to understand what broke, update your patch to fix it, and upload again. Maintainers will trigger a new trybot run to see if the problem was fixed.&lt;/p&gt;
&lt;p&gt;Sometimes, the tree can be broken on some platforms for a few hours; if the failure reported by the trybot doesn&amp;rsquo;t seem related to your patch, go to the &lt;a href=&#34;https://build.golang.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Build Dashboard&lt;/a&gt; and check if the same failure appears in other recent commits on the same platform. In this case, feel free to write a comment in Gerrit to mention that the failure is unrelated to your change, to help maintainers understand the situation.&lt;/p&gt;
&lt;h3 id=&#34;reviews&#34;&gt;Reviews&lt;/h3&gt;
&lt;p&gt;The Go community values very thorough reviews. Think of each review comment like a ticket: you are expected to somehow &amp;ldquo;close&amp;rdquo; it by acting on it, either by implementing the suggestion or convincing the reviewer otherwise.&lt;/p&gt;
&lt;p&gt;After you update the change, go through the review comments and make sure to reply to every one. You can click the &amp;ldquo;Done&amp;rdquo; button to reply indicating that you&amp;rsquo;ve implemented the reviewer&amp;rsquo;s suggestion; otherwise, click on &amp;ldquo;Reply&amp;rdquo; and explain why you have not, or what you have done instead.&lt;/p&gt;
&lt;p&gt;It is perfectly normal for changes to go through several round of reviews, with one or more reviewers making new comments every time and then waiting for an updated change before reviewing again. This cycle happens even for experienced contributors, so don&amp;rsquo;t be discouraged by it.&lt;/p&gt;
&lt;h3 id=&#34;voting-conventions&#34;&gt;Voting conventions&lt;/h3&gt;
&lt;p&gt;As they near a decision, reviewers will apply a Code-Review “vote” to your change. There are two possible votes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;+2&lt;/strong&gt; The change is approved for being merged. Only Go maintainers (also referred to as “approvers”) can cast a +2 vote.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;+1&lt;/strong&gt; The change looks good, but either the reviewer is requesting minor changes before approving it, or they are not a maintainer and cannot approve it, but would like to encourage an approval.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To be submitted, a change must have a Code-Review +2 from a maintainer.&lt;/p&gt;
&lt;p&gt;Maintainers can also apply a Hold +1 vote to the change, to mark a change that should not be submitted now (for example, because the &lt;a href=&#34;https://go.dev/s/proposal-process&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;proposal review&lt;/a&gt; for new API in the change has not completed).&lt;/p&gt;
&lt;p&gt;To be submitted, a change must not have any Hold +1 votes from a maintainer.&lt;/p&gt;
&lt;p&gt;Finally, to be submitted, a change must have the involvement of two Google employees, either as the uploader of the change or as a reviewer voting at least Code-Review +1. This requirement is for compliance and supply chain security reasons.&lt;/p&gt;
&lt;h3 id=&#34;submitting-an-approved-change&#34;&gt;Submitting an approved change&lt;/h3&gt;
&lt;p&gt;When a change is ready, a maintainer will submit the change, which adds it as a commit to the Gerrit repository.&lt;/p&gt;
&lt;p&gt;The two steps (approving and submitting) are separate because in some cases maintainers may want to approve it but not to submit it right away (for instance, the tree could be temporarily frozen).&lt;/p&gt;
&lt;p&gt;Submitting a change checks it into the repository. The change description will include a link to the code review, which will be updated with a link to the change in the repository. Since the method used to integrate the changes is Git&amp;rsquo;s &amp;ldquo;Cherry Pick&amp;rdquo;, the commit hashes in the repository will be changed by the submit operation.&lt;/p&gt;
&lt;p&gt;If your change has been approved for a few days without being submitted, feel free to write a comment in Gerrit requesting submission.&lt;/p&gt;
&lt;h3 id=&#34;more-information&#34;&gt;More information&lt;/h3&gt;
&lt;p&gt;In addition to the information here, the Go community maintains a &lt;a href=&#34;https://go.dev/wiki/CodeReview&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CodeReview&lt;/a&gt; wiki page. Feel free to contribute to this page as you learn more about the review process.&lt;/p&gt;
&lt;h2 id=&#34;miscellaneous-topics&#34;&gt;Miscellaneous topics&lt;/h2&gt;
&lt;p&gt;This section collects a number of other comments that are outside the issue/edit/code review/submit process itself.&lt;/p&gt;
&lt;h3 id=&#34;copyright-headers&#34;&gt;Copyright headers&lt;/h3&gt;
&lt;p&gt;Files in the Go repository don&amp;rsquo;t list author names, both to avoid clutter and to avoid having to keep the lists up to date. Instead, your name will appear in the &lt;a href=&#34;https://go.dev/change&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;change log&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;New files that you contribute should use the standard copyright header:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// Copyright 2022 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Files in the repository are copyrighted the year they are added. Do not update the copyright year on files that you change.&lt;/p&gt;
&lt;h3 id=&#34;troubleshooting-mail-errors&#34;&gt;Troubleshooting mail errors&lt;/h3&gt;
&lt;p&gt;The most common way that the &lt;code&gt;git&lt;/code&gt; &lt;code&gt;codereview&lt;/code&gt; &lt;code&gt;mail&lt;/code&gt; command fails is because the e-mail address in the commit does not match the one that you used during &lt;a href=&#34;https://go.dev/doc/contribute#google_account&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the registration process&lt;/a&gt;.
If you see something like&amp;hellip;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;remote: Processing changes: refs: 1, done
remote:
remote: ERROR:  In commit ab13517fa29487dcf8b0d48916c51639426c5ee9
remote: ERROR:  author email address XXXXXXXXXXXXXXXXXXX
remote: ERROR:  does not match your user account.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;you need to configure Git for this repository to use the e-mail address that you registered with. To change the e-mail address to ensure this doesn&amp;rsquo;t happen again, run:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git config user.email email@address.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then change the commit to use this alternative e-mail address with this command:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git commit --amend --author=&amp;#34;Author Name &amp;lt;email@address.com&amp;gt;&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then retry by running:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git codereview mail
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;quickly-testing-your-changes&#34;&gt;Quickly testing your changes&lt;/h3&gt;
&lt;p&gt;Running &lt;code&gt;all.bash&lt;/code&gt; for every single change to the code tree is burdensome. Even though it is strongly suggested to run it before sending a change, during the normal development cycle you may want to compile and test only the package you are developing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In general, you can run &lt;code&gt;make.bash&lt;/code&gt; instead of &lt;code&gt;all.bash&lt;/code&gt; to only rebuild the Go tool chain without running the whole test suite. Or you can run &lt;code&gt;run.bash&lt;/code&gt; to only run the whole test suite without rebuilding the tool chain. You can think of &lt;code&gt;all.bash&lt;/code&gt; as &lt;code&gt;make.bash&lt;/code&gt; followed by &lt;code&gt;run.bash&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In this section, we&amp;rsquo;ll call the directory into which you cloned the Go repository&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$GOROOT
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;. The&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;go
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;tool built by&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$GOROOT/src/make.bash
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;will be installed in&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$GOROOT/bin/go
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and you can invoke it to test your code. For instance, if you have modified the compiler and you want to test how it affects the test suite of your own project, just run&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;go
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;using it:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd &amp;lt;MYPROJECTDIR&amp;gt;
$ $GOROOT/bin/go test
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you&amp;rsquo;re changing the standard library, you probably don&amp;rsquo;t need to rebuild the compiler: you can just run the tests for the package you&amp;rsquo;ve changed. You can do that either with the Go version you normally use, or with the Go compiler built from your clone (which is sometimes required because the standard library code you&amp;rsquo;re modifying might require a newer version than the stable one you have installed).&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd $GOROOT/src/crypto/sha1
$ [make changes...]
$ $GOROOT/bin/go test .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you&amp;rsquo;re modifying the compiler itself, you can just recompile the&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;compile
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;tool (which is the internal binary invoked by&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;go
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;build
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;to compile each single package). After that, you will want to test it by compiling or running something.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd $GOROOT/src
$ [make changes...]
$ $GOROOT/bin/go install cmd/compile
$ $GOROOT/bin/go build [something...]   # test the new compiler
$ $GOROOT/bin/go run [something...]     # test the new compiler
$ $GOROOT/bin/go test [something...]    # test the new compiler
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The same applies to other internal tools of the Go tool chain, such as&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;asm
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;,&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cover
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;,&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;link
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;, and so on. Just recompile and install the tool using&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;go
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;install
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cmd/&amp;lt;TOOL&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and then use the built Go binary to test it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In addition to the standard per-package tests, there is a top-level test suite in&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$GOROOT/test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;that contains several black-box and regression tests. The test suite is run by&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;all.bash
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;but you can also run it manually:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd $GOROOT/test
$ $GOROOT/bin/go run run.go
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;specifying-a-reviewer--ccing-others&#34;&gt;Specifying a reviewer / CCing others&lt;/h3&gt;
&lt;p&gt;Unless explicitly told otherwise, such as in the discussion leading up to sending in the change, it&amp;rsquo;s better not to specify a reviewer. All changes are automatically CC&amp;rsquo;ed to the &lt;a href=&#34;https://groups.google.com/group/golang-codereviews&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;golang-codereviews@googlegroups.com&lt;/a&gt; mailing list. If this is your first ever change, there may be a moderation delay before it appears on the mailing list, to prevent spam.&lt;/p&gt;
&lt;p&gt;You can specify a reviewer or CC interested parties using the &lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;-cc&lt;/code&gt; options. Both accept a comma-separated list of e-mail addresses:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git codereview mail -r joe@golang.org -cc mabel@example.com,math-nuts@swtch.com
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;synchronize-your-client&#34;&gt;Synchronize your client&lt;/h3&gt;
&lt;p&gt;While you were working, others might have submitted changes to the repository. To update your local branch, run&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git codereview sync
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(Under the covers this runs &lt;code&gt;git&lt;/code&gt; &lt;code&gt;pull&lt;/code&gt; &lt;code&gt;-r&lt;/code&gt;.)&lt;/p&gt;
&lt;h3 id=&#34;reviewing-code-by-others&#34;&gt;Reviewing code by others&lt;/h3&gt;
&lt;p&gt;As part of the review process reviewers can propose changes directly (in the GitHub workflow this would be someone else attaching commits to a pull request). You can import these changes proposed by someone else into your local Git repository. On the Gerrit review page, click the &amp;ldquo;Download ▼&amp;rdquo; link in the upper right corner, copy the &amp;ldquo;Checkout&amp;rdquo; command and run it from your local Git repo. It will look something like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git fetch https://go.googlesource.com/review refs/changes/21/13245/1 &amp;amp;&amp;amp; git checkout FETCH_HEAD
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To revert, change back to the branch you were working in.&lt;/p&gt;
&lt;h3 id=&#34;set-up-git-aliases&#34;&gt;Set up git aliases&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;git-codereview&lt;/code&gt; command can be run directly from the shell by typing, for instance,&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git codereview sync
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;but it is more convenient to set up aliases for &lt;code&gt;git-codereview&lt;/code&gt;&amp;rsquo;s own subcommands, so that the above becomes,&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git sync
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;git-codereview&lt;/code&gt; subcommands have been chosen to be distinct from Git&amp;rsquo;s own, so it&amp;rsquo;s safe to define these aliases. To install them, copy this text into your Git configuration file (usually &lt;code&gt;.gitconfig&lt;/code&gt; in your home directory):&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[alias]
	change = codereview change
	gofmt = codereview gofmt
	mail = codereview mail
	pending = codereview pending
	submit = codereview submit
	sync = codereview sync
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;sending-multiple-dependent-changes&#34;&gt;Sending multiple dependent changes&lt;/h3&gt;
&lt;p&gt;Advanced users may want to stack up related commits in a single branch. Gerrit allows for changes to be dependent on each other, forming such a dependency chain. Each change will need to be approved and submitted separately but the dependency will be visible to reviewers.&lt;/p&gt;
&lt;p&gt;To send out a group of dependent changes, keep each change as a different commit under the same branch, and then run:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git codereview mail HEAD
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Make sure to explicitly specify &lt;code&gt;HEAD&lt;/code&gt;, which is usually not required when sending single changes. More details can be found in the &lt;a href=&#34;https://pkg.go.dev/golang.org/x/review/git-codereview?tab=doc#hdr-Multiple_Commit_Work_Branches&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;git-codereview documentation&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Release History</title>
      <link>http://ngd.cn/docs/References/ReleaseHistory/</link>
      <pubDate>Wed, 17 May 2023 09:59:21 +0800</pubDate>
      
      <guid>http://ngd.cn/docs/References/ReleaseHistory/</guid>
      <description>
        
        
        &lt;h1 id=&#34;release-history&#34;&gt;Release History&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;原文：&lt;a href=&#34;https://go.dev/doc/devel/release&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://go.dev/doc/devel/release&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本页总结了Go官方稳定版本之间的变化。&lt;a href=&#34;https://go.dev/change&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;变更日志&lt;/a&gt;中有完整的细节。&lt;/p&gt;
&lt;p&gt;要更新到一个特定的版本，请使用：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git fetch --tags
git checkout goX.Y.Z
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;release-policy-发布政策&#34;&gt;Release Policy 发布政策&lt;/h2&gt;
&lt;p&gt;​	每个主要的 Go 版本都被支持，直到有两个更新的主要版本。例如，Go 1.5 被支持到 Go 1.7 发布，而 Go 1.6 被支持到 Go 1.8 发布。我们会根据需要通过发布小修订版（例如，Go 1.6.1、Go 1.6.2，等等）来修复支持的版本中的关键问题，包括&lt;a href=&#34;https://go.dev/security&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;关键的安全问题（critical security problems）&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;go120-released-2023-02-01&#34;&gt;go1.20 (released 2023-02-01)&lt;/h2&gt;
&lt;p&gt;Go 1.20 is a major release of Go. Read the &lt;a href=&#34;https://go.dev/doc/go1.20&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.20 Release Notes&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;go 1.20是Go的一个重要版本。请阅读 &lt;a href=&#34;https://go.dev/doc/go1.20&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.20 发行说明&lt;/a&gt;了解更多信息。&lt;/p&gt;
&lt;h3 id=&#34;minor-revisions&#34;&gt;Minor revisions&lt;/h3&gt;
&lt;p&gt;go1.20.1 (released 2023-02-14) includes security fixes to the &lt;code&gt;crypto/tls&lt;/code&gt;, &lt;code&gt;mime/multipart&lt;/code&gt;, &lt;code&gt;net/http&lt;/code&gt;, and &lt;code&gt;path/filepath&lt;/code&gt; packages, as well as bug fixes to the compiler, the &lt;code&gt;go&lt;/code&gt; command, the linker, the runtime, and the &lt;code&gt;time&lt;/code&gt; package. See the &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.20.1&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.20.1 milestone&lt;/a&gt; on our issue tracker for details.&lt;/p&gt;
&lt;p&gt;go1.20.1（2023-02-14发布）包括对&lt;code&gt;crypto/tls&lt;/code&gt;、&lt;code&gt;mime/multipart&lt;/code&gt;、&lt;code&gt;net/http&lt;/code&gt;和&lt;code&gt;path/filepath&lt;/code&gt;包的安全修正，以及对编译器、go命令、链接器、&lt;code&gt;runtime&lt;/code&gt;和&lt;code&gt;time&lt;/code&gt;包的错误修正。详情请见我们问题跟踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.20.1&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.20.1 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;go119-released-2022-08-02&#34;&gt;go1.19 (released 2022-08-02)&lt;/h2&gt;
&lt;p&gt;Go 1.19是Go的一个主要版本。请阅读 &lt;a href=&#34;https://go.dev/doc/go1.19&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.19 发行说明&lt;/a&gt;了解更多信息。&lt;/p&gt;
&lt;h3 id=&#34;minor-revisions-1&#34;&gt;Minor revisions&lt;/h3&gt;
&lt;p&gt;go1.19.1（2022-09-06发布）包括对&lt;code&gt;net/http&lt;/code&gt;和&lt;code&gt;net/url&lt;/code&gt;包的安全修复，以及对编译器、&lt;code&gt;go&lt;/code&gt;命令、&lt;code&gt;pprof&lt;/code&gt;命令、链接器、&lt;code&gt;runtime&lt;/code&gt;和&lt;code&gt;crypto/tls&lt;/code&gt;和&lt;code&gt;crypto/x509&lt;/code&gt;包的错误修复。详情请见我们问题跟踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.19.1&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.19.1 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.19.2（2022-10-04发布）包括对&lt;code&gt;archive/tar&lt;/code&gt;、&lt;code&gt;net/http/httputil&lt;/code&gt;和&lt;code&gt;regexp&lt;/code&gt;包的安全修复，以及对编译器、链接器、&lt;code&gt;runtime&lt;/code&gt;和&lt;code&gt;go/types&lt;/code&gt;包的错误修复。详情请见我们问题跟踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.19.2&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.19.2 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.19.3（2022-11-01发布）包括对&lt;code&gt;os/exec&lt;/code&gt;和&lt;code&gt;syscall&lt;/code&gt;包的安全修复，以及对编译器和&lt;code&gt;runtime&lt;/code&gt;的错误修复。详情请见我们问题跟踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.19.3&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.19.3 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.19.4（2022-12-06发布）包括对&lt;code&gt;net/http&lt;/code&gt;和&lt;code&gt;os&lt;/code&gt;包的安全修复，以及对编译器、&lt;code&gt;runtime&lt;/code&gt;、&lt;code&gt;crypto/x509&lt;/code&gt;、&lt;code&gt;os/exec&lt;/code&gt;和&lt;code&gt;sync/atomic&lt;/code&gt;包的错误修复。详情请见我们问题跟踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.19.4&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.19.4 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;go118-released-2022-03-15&#34;&gt;go1.18 (released 2022-03-15)&lt;/h2&gt;
&lt;p&gt;Go 1.18是Go的一个重要版本。阅读 &lt;a href=&#34;https://go.dev/doc/go1.18&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.18 发行说明&lt;/a&gt;以了解更多信息。&lt;/p&gt;
&lt;h3 id=&#34;minor-revisions-2&#34;&gt;Minor revisions&lt;/h3&gt;
&lt;p&gt;go1.18.1（2022-04-12发布）包括对&lt;code&gt;crypto/elliptic&lt;/code&gt;、&lt;code&gt;crypto/x509&lt;/code&gt;和&lt;code&gt;encoding/pem&lt;/code&gt;包的安全修复，以及对编译器、链接器、&lt;code&gt;runtime&lt;/code&gt;、&lt;code&gt;go&lt;/code&gt;命令、&lt;code&gt;vet&lt;/code&gt;以及&lt;code&gt;bytes&lt;/code&gt;、&lt;code&gt;crypto/x509&lt;/code&gt;和&lt;code&gt;go/types&lt;/code&gt;包的错误修复。详情请见我们问题跟踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.18.1&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.18.1 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.18.2（2022-05-10发布）包括对&lt;code&gt;syscall&lt;/code&gt;包的安全修复，以及对编译器、&lt;code&gt;runtime&lt;/code&gt;、&lt;code&gt;go&lt;/code&gt;命令和&lt;code&gt;crypto/x509&lt;/code&gt;、&lt;code&gt;go/types&lt;/code&gt;、&lt;code&gt;net/http/httptest&lt;/code&gt;、&lt;code&gt;reflect&lt;/code&gt;和&lt;code&gt;sync/atomic&lt;/code&gt;包的错误修复。详情请见我们问题跟踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.18.2&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.18.2 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.18.3（2022-06-01发布）包括对&lt;code&gt;crypto/rand&lt;/code&gt;、&lt;code&gt;crypto/tls&lt;/code&gt;、&lt;code&gt;os/exec&lt;/code&gt;和&lt;code&gt;path/filepath&lt;/code&gt;包的安全修复，以及对编译器、&lt;code&gt;crypto/tls&lt;/code&gt;和&lt;code&gt;text/template/parse&lt;/code&gt;包的错误修复。详情请见我们问题跟踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.18.3&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.18.3 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.18.4（2022-07-12发布）包括对&lt;code&gt;compress/gzip&lt;/code&gt;、&lt;code&gt;encoding/gob&lt;/code&gt;、&lt;code&gt;encoding/xml&lt;/code&gt;、&lt;code&gt;go/parser&lt;/code&gt;、&lt;code&gt;io/fs&lt;/code&gt;、&lt;code&gt;net/http&lt;/code&gt;和&lt;code&gt;path/filepath&lt;/code&gt;包的安全修复，以及对编译器、&lt;code&gt;go&lt;/code&gt;命令、链接器、&lt;code&gt;runtime&lt;/code&gt;和&lt;code&gt;runtime&lt;/code&gt;/计量包的错误修复。详情请见我们问题跟踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.18.4&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.18.4 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.18.5（2022-08-01发布）包括&lt;code&gt;encoding/gob&lt;/code&gt;和&lt;code&gt;math/big&lt;/code&gt;包的安全修复，以及编译器、&lt;code&gt;go&lt;/code&gt;命令、&lt;code&gt;runtime&lt;/code&gt;和&lt;code&gt;testing&lt;/code&gt;包的错误修复。详情请见我们问题跟踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.18.5&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.18.5 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.18.6（2022-09-06发布）包括对&lt;code&gt;net/http&lt;/code&gt;包的安全修复，以及对编译器、&lt;code&gt;go&lt;/code&gt;命令、&lt;code&gt;pprof&lt;/code&gt;命令、&lt;code&gt;runtime&lt;/code&gt;以及&lt;code&gt;crypto/tls&lt;/code&gt;、&lt;code&gt;encoding/xml&lt;/code&gt;和&lt;code&gt;net&lt;/code&gt;包的错误修复。详情请见我们问题跟踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.18.6&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.18.6 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.18.7（2022-10-04发布）包括对&lt;code&gt;archive/tar&lt;/code&gt;、&lt;code&gt;net/http/httputil&lt;/code&gt;和&lt;code&gt;regexp&lt;/code&gt;包的安全修复，以及对编译器、链接器和&lt;code&gt;go/types&lt;/code&gt;包的错误修复。详情请见我们问题跟踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.18.7&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.18.7 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.18.8（2022-11-01发布）包括对&lt;code&gt;os/exec&lt;/code&gt;和&lt;code&gt;syscall&lt;/code&gt;包的安全修复，以及对&lt;code&gt;runtime&lt;/code&gt;的错误修复。详情请参见问题跟踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.18.8&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.18.8 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;go117-released-2021-08-16&#34;&gt;go1.17 (released 2021-08-16)&lt;/h2&gt;
&lt;p&gt;Go 1.17是Go的一个重要版本。阅读 &lt;a href=&#34;https://go.dev/doc/go1.17&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.17 发行说明&lt;/a&gt;以了解更多信息。&lt;/p&gt;
&lt;h3 id=&#34;minor-revisions-3&#34;&gt;Minor revisions&lt;/h3&gt;
&lt;p&gt;go1.17.1（2021-09-09发布）包括对&lt;code&gt;archive/zip&lt;/code&gt;包的安全修复，以及对编译器、链接器、&lt;code&gt;go&lt;/code&gt;命令和&lt;code&gt;crypto/rand&lt;/code&gt;、&lt;code&gt;embed&lt;/code&gt;、&lt;code&gt;go/types&lt;/code&gt;、&lt;code&gt;html/template&lt;/code&gt;和&lt;code&gt;net/http&lt;/code&gt;包的错误修复。详情请见我们问题跟踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.17.1&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.17.1 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.17.2（2021-10-07发布）包括对linker和&lt;code&gt;misc/wasm&lt;/code&gt;目录的安全修复，以及对编译器、&lt;code&gt;runtime&lt;/code&gt;、&lt;code&gt;go&lt;/code&gt;命令、&lt;code&gt;text/template&lt;/code&gt;和&lt;code&gt;time&lt;/code&gt;包的错误修复。详情请见我们问题跟踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.17.2&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.17.2 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.17.3（2021-11-04发布）包括对&lt;code&gt;archive/zip&lt;/code&gt;和&lt;code&gt;debug/macho&lt;/code&gt;包的安全修复，以及对编译器、链接器、&lt;code&gt;runtime&lt;/code&gt;、&lt;code&gt;go&lt;/code&gt;命令、&lt;code&gt;misc/wasm&lt;/code&gt;目录以及&lt;code&gt;net/http&lt;/code&gt;和&lt;code&gt;syscall&lt;/code&gt;包的错误修复。详情请见我们问题跟踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.17.3&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.17.3 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.17.4（2021-12-02发布）包括对编译器、链接器、&lt;code&gt;runtime&lt;/code&gt;以及&lt;code&gt;go/types&lt;/code&gt;、&lt;code&gt;net/http&lt;/code&gt;和&lt;code&gt;time&lt;/code&gt;包的修复。详情请参见问题追踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.17.4&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.17.4 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.17.5（2021-12-09发布）包括&lt;code&gt;net/http&lt;/code&gt;和&lt;code&gt;syscall&lt;/code&gt;包的安全修复。详情请参见问题追踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.17.5&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.17.5 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.17.6 (2022-01-06发布) 包括对编译器、链接器、&lt;code&gt;runtime&lt;/code&gt;以及 &lt;code&gt;crypto/x509&lt;/code&gt;、&lt;code&gt;net/http&lt;/code&gt; 和 &lt;code&gt;reflect&lt;/code&gt; 包的修复。详情请参见问题跟踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.17.6&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.17.6 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.17.7（2022-02-10发布）包括对&lt;code&gt;go&lt;/code&gt;命令、&lt;code&gt;crypto/elliptic&lt;/code&gt;和&lt;code&gt;math/big&lt;/code&gt;包的安全修复，以及对编译器、链接器、&lt;code&gt;runtime&lt;/code&gt;、&lt;code&gt;go&lt;/code&gt;命令和&lt;code&gt;debug/macho&lt;/code&gt;、&lt;code&gt;debug/pe&lt;/code&gt;、&lt;code&gt;net/http/httptest&lt;/code&gt;包的错误修复。详情请见我们问题跟踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.17.7&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.17.7 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.17.8（2022-03-03发布）包括对&lt;code&gt;regexp/syntax&lt;/code&gt;包的安全修复，以及对编译器、&lt;code&gt;runtime&lt;/code&gt;、&lt;code&gt;go&lt;/code&gt;命令以及&lt;code&gt;crypto/x509&lt;/code&gt;和&lt;code&gt;net&lt;/code&gt;包的错误修复。详情请见我们问题跟踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.17.8&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.17.8 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.17.9（2022-04-12发布）包括对&lt;code&gt;crypto/elliptic&lt;/code&gt;和&lt;code&gt;encoding/pem&lt;/code&gt;包的安全修复，以及对链接器和&lt;code&gt;runtime&lt;/code&gt;的错误修复。详情请参见问题跟踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.17.9&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.17.9 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.17.10 (2022-05-10发布) 包括对&lt;code&gt;syscall&lt;/code&gt;包的安全修复，以及对编译器、&lt;code&gt;runtime&lt;/code&gt;、&lt;code&gt;crypto/x509&lt;/code&gt;和&lt;code&gt;net/http/httptest&lt;/code&gt;包的错误修复。详情请见我们问题跟踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.17.10&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.17.10 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.17.11（2022-06-01发布）包括对&lt;code&gt;crypto/rand&lt;/code&gt;、&lt;code&gt;crypto/tls&lt;/code&gt;、&lt;code&gt;os/exec&lt;/code&gt;和&lt;code&gt;path/filepath&lt;/code&gt;包的安全修复，以及对&lt;code&gt;crypto/tls&lt;/code&gt;包的错误修复。详情请见我们问题跟踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.17.11&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.17.11 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.17.12（2022-07-12发布）包括对&lt;code&gt;compress/gzip&lt;/code&gt;、&lt;code&gt;encoding/gob&lt;/code&gt;、&lt;code&gt;encoding/xml&lt;/code&gt;、&lt;code&gt;go/parser&lt;/code&gt;、&lt;code&gt;io/fs&lt;/code&gt;、&lt;code&gt;net/http&lt;/code&gt;和&lt;code&gt;path/filepath&lt;/code&gt;包的安全修复，以及对编译器、go命令、&lt;code&gt;runtime&lt;/code&gt;和&lt;code&gt;runtime/metrics&lt;/code&gt;包的错误修复。详情请见我们的问题跟踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.17.12&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.17.12 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.17.13（2022-08-01发布）包括&lt;code&gt;encoding/gob&lt;/code&gt;和&lt;code&gt;math/big&lt;/code&gt;包的安全修复，以及编译器和&lt;code&gt;runtime&lt;/code&gt;的错误修复。详情请参见问题跟踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.17.13&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.17.13 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;go116-released-2021-02-16&#34;&gt;go1.16 (released 2021-02-16)&lt;/h2&gt;
&lt;p&gt;Go 1.16是Go的一个重要版本。请阅读 &lt;a href=&#34;https://go.dev/doc/go1.16&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.16 发行说明&lt;/a&gt;以了解更多信息。&lt;/p&gt;
&lt;h3 id=&#34;minor-revisions-4&#34;&gt;Minor revisions&lt;/h3&gt;
&lt;p&gt;go1.16.1（2021-03-10发布）包括对&lt;code&gt;archive/zip&lt;/code&gt;和&lt;code&gt;encoding/xml&lt;/code&gt;包的安全修复。详情请见我们问题追踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.16.1&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.16.1 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.16.2（2021-03-11发布）包括对&lt;code&gt;cgo&lt;/code&gt;、编译器、链接器、&lt;code&gt;go&lt;/code&gt;命令、以及&lt;code&gt;syscall&lt;/code&gt;和&lt;code&gt;time&lt;/code&gt;包的修复。详情请参见问题追踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.16.2&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.16.2 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.16.3（2021-04-01发布）包括对编译器、链接器、&lt;code&gt;runtime&lt;/code&gt;、&lt;code&gt;go&lt;/code&gt;命令以及&lt;code&gt;testing&lt;/code&gt;和&lt;code&gt;time&lt;/code&gt;包的修复。详情请参见问题跟踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.16.3&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.16.3 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.16.4（2021-05-06发布）包括对&lt;code&gt;net/http&lt;/code&gt;包的安全修复，以及对编译器、&lt;code&gt;runtime&lt;/code&gt;、&lt;code&gt;archive/zip&lt;/code&gt;、&lt;code&gt;syscall&lt;/code&gt;和&lt;code&gt;time&lt;/code&gt;包的错误修复。详情请见我们问题跟踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.16.4&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.16.4 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.16.5（2021-06-03发布）包括对&lt;code&gt;archive/zip&lt;/code&gt;、&lt;code&gt;math/big&lt;/code&gt;、&lt;code&gt;net&lt;/code&gt;和&lt;code&gt;net/http/httputil&lt;/code&gt;包的安全修复，以及对链接器、&lt;code&gt;go&lt;/code&gt;命令和&lt;code&gt;net/http&lt;/code&gt;包的错误修复。详情请见我们问题跟踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.16.5&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.16.5 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.16.6（2021-07-12发布）包括对&lt;code&gt;crypto/tls&lt;/code&gt;包的安全修复，以及对编译器、&lt;code&gt;net&lt;/code&gt;和&lt;code&gt;net/http&lt;/code&gt;包的错误修复。详情请参见问题跟踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.16.6&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.16.6 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.16.7（2021-08-05发布）包括对&lt;code&gt;net/http/httputil&lt;/code&gt;包的安全修复，以及对编译器、链接器、&lt;code&gt;runtime&lt;/code&gt;、&lt;code&gt;go&lt;/code&gt;命令和&lt;code&gt;net/http&lt;/code&gt;包的错误修复。详情请见我们问题跟踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.16.7&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.16.7 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.16.8（2021-09-09发布）包括对&lt;code&gt;archive/zip&lt;/code&gt;包的安全修复，以及对&lt;code&gt;archive/zip&lt;/code&gt;、&lt;code&gt;go/internal/gccgoimporter&lt;/code&gt;、&lt;code&gt;html/template&lt;/code&gt;、&lt;code&gt;net/http&lt;/code&gt;和&lt;code&gt;runtime/pprof&lt;/code&gt;包的错误修复。详情请参见问题跟踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.16.8&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.16.8 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.16.9（2021-10-07发布）包括对linker和&lt;code&gt;misc/wasm&lt;/code&gt;目录的安全修复，以及对&lt;code&gt;runtime&lt;/code&gt;和&lt;code&gt;text/template&lt;/code&gt;包的错误修复。详情请见我们问题跟踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.16.9&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.16.9 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.16.10（2021-11-04发布）包括对&lt;code&gt;archive/zip&lt;/code&gt;和&lt;code&gt;debug/macho&lt;/code&gt;包的安全修复，以及对编译器、链接器、&lt;code&gt;runtime&lt;/code&gt;、&lt;code&gt;misc/wasm&lt;/code&gt;目录和&lt;code&gt;net/http&lt;/code&gt;包的错误修复。详情请见我们问题跟踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.16.10&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.16.10 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.16.11（2021-12-02发布）包括对编译器、&lt;code&gt;runtime&lt;/code&gt;以及&lt;code&gt;net/http&lt;/code&gt;、&lt;code&gt;net/http/httptest&lt;/code&gt;和&lt;code&gt;time&lt;/code&gt;包的修复。详情请参见问题跟踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.16.11&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.16.11 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.16.12（2021-12-09发布）包括&lt;code&gt;net/http&lt;/code&gt;和&lt;code&gt;syscall&lt;/code&gt;包的安全修复。详情请参见问题追踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.16.12&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.16.12 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.16.13（2022-01-06发布）包括对编译器、链接器、&lt;code&gt;runtime&lt;/code&gt;和&lt;code&gt;net/http&lt;/code&gt;包的修复。详情请参见问题追踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.16.13&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.16.13 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.16.14（2022-02-10发布）包括对&lt;code&gt;go&lt;/code&gt;命令、&lt;code&gt;crypto/elliptic&lt;/code&gt;和&lt;code&gt;math/big&lt;/code&gt;包的安全修复，以及对编译器、链接器、&lt;code&gt;runtime&lt;/code&gt;、&lt;code&gt;go&lt;/code&gt;命令和&lt;code&gt;debug/macho&lt;/code&gt;、&lt;code&gt;debug/pe&lt;/code&gt;、&lt;code&gt;net/http/httptest&lt;/code&gt;以及&lt;code&gt;testing&lt;/code&gt;包的错误修复。详情请见我们问题跟踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.16.14&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.16.14 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.16.15（2022-03-03发布）包括对&lt;code&gt;regexp/syntax&lt;/code&gt;包的安全修复，以及对编译器、&lt;code&gt;runtime&lt;/code&gt;、&lt;code&gt;go&lt;/code&gt;命令和&lt;code&gt;net&lt;/code&gt;包的错误修复。详情请见我们问题跟踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.16.15&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.16.15 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;go115-released-2020-08-11&#34;&gt;go1.15 (released 2020-08-11)&lt;/h2&gt;
&lt;p&gt;Go 1.15是Go的一个重要版本。请阅读 &lt;a href=&#34;&#34;&gt;Go 1.15 发行说明&lt;/a&gt;以了解更多信息。&lt;/p&gt;
&lt;h3 id=&#34;minor-revisions-5&#34;&gt;Minor revisions&lt;/h3&gt;
&lt;p&gt;go1.15.1（2020-09-01发布）包括&lt;code&gt;net/http/cgi&lt;/code&gt;和&lt;code&gt;net/http/fcgi&lt;/code&gt;包的安全修复。详情请见我们问题跟踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.15.1&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.15.1 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.15.2（2020-09-09发布）包括对编译器、&lt;code&gt;runtime&lt;/code&gt;、文档、&lt;code&gt;go&lt;/code&gt;命令以及&lt;code&gt;net/mail&lt;/code&gt;、&lt;code&gt;os&lt;/code&gt;、&lt;code&gt;sync&lt;/code&gt;和&lt;code&gt;testing&lt;/code&gt;包的修复。详情请见我们问题跟踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.15.2&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.15.2 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.15.3（2020-10-14发布）包括对&lt;code&gt;cgo&lt;/code&gt;、编译器、&lt;code&gt;runtime&lt;/code&gt;、&lt;code&gt;go&lt;/code&gt;命令，以及&lt;code&gt;bytes&lt;/code&gt;、&lt;code&gt;plugin&lt;/code&gt;和&lt;code&gt;testing&lt;/code&gt;包的修复。详情请见我们问题跟踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.15.3&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.15.3 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.15.4（2020-11-05发布）包括对&lt;code&gt;cgo&lt;/code&gt;、编译器、链接器、&lt;code&gt;runtime&lt;/code&gt;，以及&lt;code&gt;compress/flate&lt;/code&gt;、&lt;code&gt;net/http&lt;/code&gt;、&lt;code&gt;reflect&lt;/code&gt;和&lt;code&gt;time&lt;/code&gt;包的修复。详情请见我们问题跟踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.15.4&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.15.4 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.15.5（2020-11-12发布）包括对&lt;code&gt;go&lt;/code&gt;命令和&lt;code&gt;math/big&lt;/code&gt;包的安全修复。详情请参见问题追踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.15.5&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.15.5 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.15.6（2020-12-03发布）包括对编译器、链接器、&lt;code&gt;runtime&lt;/code&gt;、&lt;code&gt;go&lt;/code&gt;命令和&lt;code&gt;io&lt;/code&gt;包的修复。详情请参见问题追踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.15.6&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.15.6 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.15.7（2021-01-19发布）包括对&lt;code&gt;go&lt;/code&gt;命令和&lt;code&gt;crypto/elliptic&lt;/code&gt;包的安全修复。详情请参见问题追踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.15.7&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.15.7 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.15.8（2021-02-04发布）包括对编译器、链接器、&lt;code&gt;runtime&lt;/code&gt;、&lt;code&gt;go&lt;/code&gt;命令和&lt;code&gt;net/http&lt;/code&gt;包的修复。详情请参见问题跟踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.15.8&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.15.8 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.15.9（2021-03-10发布）包括对&lt;code&gt;encoding/xml&lt;/code&gt;包的安全修复。详见问题追踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.15.9&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.15.9 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.15.10（2021-03-11发布）包括对编译器、&lt;code&gt;go&lt;/code&gt;命令以及&lt;code&gt;net/http&lt;/code&gt;、&lt;code&gt;os&lt;/code&gt;、&lt;code&gt;syscall&lt;/code&gt;和&lt;code&gt;time&lt;/code&gt;包的修复。详情请参见问题跟踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.15.10&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.15.10 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.15.11（2021-04-01发布）包括对cgo、编译器、链接器、&lt;code&gt;runtime&lt;/code&gt;、&lt;code&gt;go&lt;/code&gt;命令以及&lt;code&gt;database/sql&lt;/code&gt;和&lt;code&gt;net/http&lt;/code&gt;包的修复。详情请见我们问题跟踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.15.11&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.15.11 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.15.12（2021-05-06发布）包括net/http包的安全修复，以及编译器、&lt;code&gt;runtime&lt;/code&gt;、&lt;code&gt;archive/zip&lt;/code&gt;、&lt;code&gt;syscall&lt;/code&gt;和&lt;code&gt;time&lt;/code&gt;包的错误修复。详情请见我们问题跟踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.15.12&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.15.12 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.15.13（2021-06-03发布）包括对&lt;code&gt;archive/zip&lt;/code&gt;、&lt;code&gt;math/big&lt;/code&gt;、&lt;code&gt;net&lt;/code&gt;和&lt;code&gt;net/http/httputil&lt;/code&gt;包的安全修复，以及对链接器、&lt;code&gt;go&lt;/code&gt;命令、&lt;code&gt;math/big&lt;/code&gt;和&lt;code&gt;net/http&lt;/code&gt;包的错误修复。详情请见我们问题跟踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.15.13&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.15.13 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.15.14（2021-07-12发布）包括对&lt;code&gt;crypto/tls&lt;/code&gt;包的安全修复，以及对链接器和&lt;code&gt;net&lt;/code&gt;包的错误修复。详情请参见问题跟踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.15.14&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.15.14 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.15.15（2021-08-05发布）包括对&lt;code&gt;net/http/httputil&lt;/code&gt;包的安全修复，以及对编译器、&lt;code&gt;runtime&lt;/code&gt;、&lt;code&gt;go&lt;/code&gt;命令和&lt;code&gt;net/http&lt;/code&gt;包的错误修复。详情请见我们问题跟踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.15.15&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.15.15 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;go114-released-2020-02-25&#34;&gt;go1.14 (released 2020-02-25)&lt;/h2&gt;
&lt;p&gt;Go 1.14是Go的一个重要版本。请阅读 &lt;a href=&#34;https://go.dev/doc/go1.14&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.14 发行说明&lt;/a&gt;以了解更多信息。&lt;/p&gt;
&lt;h3 id=&#34;minor-revisions-6&#34;&gt;Minor revisions&lt;/h3&gt;
&lt;p&gt;go1.14.1（2020-03-19发布）包括对&lt;code&gt;go&lt;/code&gt;命令、工具和&lt;code&gt;runtime&lt;/code&gt;的修正。请参阅我们问题跟踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.14.1&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.14.1 milestone&lt;/a&gt;以了解详情。&lt;/p&gt;
&lt;p&gt;go1.14.2（2020-04-08发布）包括对&lt;code&gt;cgo&lt;/code&gt;、&lt;code&gt;go&lt;/code&gt;命令、&lt;code&gt;runtime&lt;/code&gt;以及&lt;code&gt;os/exec&lt;/code&gt;和&lt;code&gt;testing&lt;/code&gt;包的修正。详情请参见问题追踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.14.2&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.14.2 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.14.3（2020-05-14发布）包括对&lt;code&gt;cgo&lt;/code&gt;、编译器、&lt;code&gt;runtime&lt;/code&gt;以及&lt;code&gt;go/doc&lt;/code&gt;和&lt;code&gt;math/big&lt;/code&gt;包的修正。详情请参见问题追踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.14.3&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.14.3 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.14.4（2020-06-01发布）包括对&lt;code&gt;go doc&lt;/code&gt;命令、&lt;code&gt;runtime&lt;/code&gt;、以及&lt;code&gt;encoding/json&lt;/code&gt;和&lt;code&gt;os&lt;/code&gt;包的修复。详情请参见问题追踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.14.4&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.14.4 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.14.5（2020-07-14发布）包括对&lt;code&gt;crypto/x509&lt;/code&gt;和&lt;code&gt;net/http&lt;/code&gt;包的安全修复。详情请参见问题追踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.14.5&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.14.5 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.14.6（2020-07-16发布）包括对&lt;code&gt;go&lt;/code&gt;命令、编译器、链接器、&lt;code&gt;vet&lt;/code&gt;以及&lt;code&gt;database/sql&lt;/code&gt;、&lt;code&gt;encoding/json&lt;/code&gt;、&lt;code&gt;net/http&lt;/code&gt;、&lt;code&gt;reflect&lt;/code&gt;和&lt;code&gt;testing&lt;/code&gt;包的修复。详情请见我们的问题跟踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.14.6&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.14.6 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.14.7（2020-08-06发布）包括对&lt;code&gt;encoding/binary&lt;/code&gt;包的安全修复。详见问题追踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.14.7&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.14.7 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.14.8（2020-09-01发布）包括 &lt;code&gt;net/http/cgi&lt;/code&gt; 和 &lt;code&gt;net/http/fcgi&lt;/code&gt; 包的安全修复。详情请参见问题追踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.14.8&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.14.8 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.14.9（2020-09-09发布）包括对编译器、链接器、&lt;code&gt;runtime&lt;/code&gt;、文档，以及&lt;code&gt;net/http&lt;/code&gt;和&lt;code&gt;testing&lt;/code&gt;包的修复。详情请参见问题跟踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.14.9&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.14.9 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.14.10（2020-10-14发布）包括对编译器、&lt;code&gt;runtime&lt;/code&gt;以及&lt;code&gt;plugin&lt;/code&gt;和&lt;code&gt;testing&lt;/code&gt;包的修正。详情请参见问题追踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.14.10&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.14.10 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.14.11（2020-11-05发布）包括对&lt;code&gt;runtime&lt;/code&gt;、&lt;code&gt;net/http&lt;/code&gt;和&lt;code&gt;time&lt;/code&gt;包的修复。详情请参见问题追踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.14.11&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.14.11 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.14.12（2020-11-12发布）包括对&lt;code&gt;go&lt;/code&gt;命令和&lt;code&gt;math/big&lt;/code&gt;包的安全修复。详情请参见问题追踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.14.12&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.14.12 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.14.13（2020-12-03发布）包括对编译器、&lt;code&gt;runtime&lt;/code&gt;和&lt;code&gt;go&lt;/code&gt;命令的修复。详情请参见问题追踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.14.13&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.14.13 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.14.14（2021-01-19发布）包括对&lt;code&gt;go&lt;/code&gt;命令和&lt;code&gt;crypto/elliptic&lt;/code&gt;包的安全修复。详情请参见问题追踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.14.14&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.14.14 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.14.15（2021-02-04发布）包括对编译器、&lt;code&gt;runtime&lt;/code&gt;、&lt;code&gt;go&lt;/code&gt;命令和&lt;code&gt;net/http&lt;/code&gt;包的修复。详情请见我们问题追踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.14.15&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.14.15 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;go113-released-2019-09-03&#34;&gt;go1.13 (released 2019-09-03)&lt;/h2&gt;
&lt;p&gt;Go 1.13是Go的一个重要版本。阅读 &lt;a href=&#34;https://go.dev/doc/go1.13&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.13 发行说明&lt;/a&gt;以了解更多信息。&lt;/p&gt;
&lt;h3 id=&#34;minor-revisions-7&#34;&gt;Minor revisions&lt;/h3&gt;
&lt;p&gt;go1.13.1（2019-09-25发布）包括&lt;code&gt;net/http&lt;/code&gt;和&lt;code&gt;net/textproto&lt;/code&gt;包的安全修复。详情请见我们问题跟踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.13.1&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.13.1 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.13.2（2019-10-17发布）包括对编译器和&lt;code&gt;crypto/dsa&lt;/code&gt;包的安全修复。详情请见我们问题追踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.13.2&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.13.2 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.13.3（2019-10-17发布）包括对&lt;code&gt;go&lt;/code&gt;命令、工具链、&lt;code&gt;runtime&lt;/code&gt;以及&lt;code&gt;crypto/ecdsa&lt;/code&gt;、&lt;code&gt;net&lt;/code&gt;、&lt;code&gt;net/http&lt;/code&gt;和&lt;code&gt;syscall&lt;/code&gt;包的修复。详情请见我们问题跟踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.13.3&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.13.3 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.13.4（2019-10-31发布）包括对&lt;code&gt;net/http&lt;/code&gt;和&lt;code&gt;syscall&lt;/code&gt;包的修复。它还修复了macOS 10.15 Catalina上的一个问题，即未经公证的安装程序和二进制文件&lt;a href=&#34;https://go.dev/issue/34986&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;被Gatekeeper拒绝&lt;/a&gt;。详情请见我们问题追踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.13.4&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.13.4 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.13.5（2019-12-04发布）包括对&lt;code&gt;go&lt;/code&gt;命令、&lt;code&gt;runtime&lt;/code&gt;、链接器和&lt;code&gt;net/http&lt;/code&gt;包的修复。详情请见我们问题追踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.13.5&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.13.5 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.13.6（2020-01-09发布）包括对&lt;code&gt;runtime&lt;/code&gt;和&lt;code&gt;net/http&lt;/code&gt;包的修正。详情请参见问题追踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.13.6&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.13.6 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.13.7（2020-01-28发布）包括对 &lt;code&gt;crypto/x509&lt;/code&gt; 包的两个安全修复。详情请参见问题追踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.13.7&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.13.7 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.13.8（2020-02-12发布）包括对&lt;code&gt;runtime&lt;/code&gt;、&lt;code&gt;crypto/x509&lt;/code&gt;和&lt;code&gt;net/http&lt;/code&gt;包的修复。详情请参见问题追踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.13.8&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.13.8 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.13.9（2020-03-19发布）包括对&lt;code&gt;go&lt;/code&gt;命令、工具、&lt;code&gt;runtime&lt;/code&gt;、工具链和&lt;code&gt;crypto/cypher&lt;/code&gt;包的修复。详情请见我们问题跟踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.13.9&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.13.9 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.13.10（2020-04-08发布）包括对&lt;code&gt;go&lt;/code&gt;命令、&lt;code&gt;runtime&lt;/code&gt;以及&lt;code&gt;os/exec&lt;/code&gt;和&lt;code&gt;time&lt;/code&gt;包的修复。详情请参见问题追踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.13.10&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.13.10 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.13.11（2020-05-14发布）包括对编译器的修复。详见问题追踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.13.11&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.13.11 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.13.12（2020-06-01发布）包括对&lt;code&gt;runtime&lt;/code&gt;以及&lt;code&gt;go/types&lt;/code&gt;和&lt;code&gt;math/big&lt;/code&gt;包的修正。详情请参见问题追踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.13.12&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.13.12 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.13.13（2020-07-14发布）包括对&lt;code&gt;crypto/x509&lt;/code&gt;和&lt;code&gt;net/http&lt;/code&gt;包的安全修复。详情请参见问题追踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.13.13&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.13.13 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.13.14（2020-07-16发布）包括对编译器、&lt;code&gt;vet&lt;/code&gt;以及&lt;code&gt;database/sql&lt;/code&gt;、&lt;code&gt;net/http&lt;/code&gt;和&lt;code&gt;reflect&lt;/code&gt;包的修复。详情请参见问题跟踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.13.14&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.13.14 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.13.15（2020-08-06发布）包括对&lt;code&gt;encoding/binary&lt;/code&gt;包的安全修复。详情请见我们问题追踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.13.15&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.13.15 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;go112-released-2019-02-25&#34;&gt;go1.12 (released 2019-02-25)&lt;/h2&gt;
&lt;p&gt;Go 1.12是Go的一个重要版本。阅读 &lt;a href=&#34;https://go.dev/doc/go1.12&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.12 发行说明&lt;/a&gt;以了解更多信息。&lt;/p&gt;
&lt;h3 id=&#34;minor-revisions-8&#34;&gt;Minor revisions&lt;/h3&gt;
&lt;p&gt;go1.12.1（2019-03-14发布）包括对&lt;code&gt;cgo&lt;/code&gt;、编译器、&lt;code&gt;go&lt;/code&gt;命令以及&lt;code&gt;fmt&lt;/code&gt;、&lt;code&gt;net/smtp&lt;/code&gt;、&lt;code&gt;os&lt;/code&gt;、&lt;code&gt;path/filepath&lt;/code&gt;、&lt;code&gt;sync&lt;/code&gt;和&lt;code&gt;text/template&lt;/code&gt;包的修正。详情请见我们问题跟踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.12.1&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.12.1 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.12.2（2019-04-05发布）包括对&lt;code&gt;runtime&lt;/code&gt;的安全修复，以及对编译器、&lt;code&gt;go&lt;/code&gt;命令、&lt;code&gt;doc&lt;/code&gt;、&lt;code&gt;net&lt;/code&gt;、&lt;code&gt;net/http/httputil&lt;/code&gt;和&lt;code&gt;os&lt;/code&gt;包的错误修复。详情请参见问题跟踪器上的 &lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.12.2&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.12.2 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.12.3（2019-04-08发布）意外地在没有预定修复的情况下发布。它与go1.12.2相同，只是版本号不同。预定的修复在go1.12.4中。&lt;/p&gt;
&lt;p&gt;go1.12.4（2019-04-11发布）修复了一个问题，即在旧版本的GNU/Linux上使用预编译的二进制版本会导致链接使用&lt;code&gt;cgo&lt;/code&gt;的程序时&lt;a href=&#34;https://go.dev/issues/31293&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;出现故障&lt;/a&gt;。只有遇到这个问题的Linux用户才需要更新。&lt;/p&gt;
&lt;p&gt;go1.12.5（2019-05-06发布）包括对编译器、链接器、&lt;code&gt;go&lt;/code&gt;命令、&lt;code&gt;runtime&lt;/code&gt;和&lt;code&gt;os&lt;/code&gt;包的修复。详情请见我们问题跟踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.12.5&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.12.5 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.12.6（2019-06-11发布）包括对编译器、链接器、&lt;code&gt;go&lt;/code&gt;命令以及&lt;code&gt;crypto/x509&lt;/code&gt;、&lt;code&gt;net/http&lt;/code&gt;和&lt;code&gt;os&lt;/code&gt;包的修复。详情请见我们问题跟踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.12.6&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.12.6 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.12.7（2019-07-08发布）包括对&lt;code&gt;cgo&lt;/code&gt;、编译器和链接器的修复。详情请见我们的问题跟踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.12.7&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.12.7 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.12.8（2019-08-13发布）包括对&lt;code&gt;net/http&lt;/code&gt;和&lt;code&gt;net/url&lt;/code&gt;包的安全修复。详情请见我们问题追踪器上的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.12.8&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.12.8 milestone&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.12.9（2019-08-15发布）包括对链接器以及&lt;code&gt;math/big&lt;/code&gt;和&lt;code&gt;os&lt;/code&gt;包的修复。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.12.9&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题追踪器上的Go 1.12.9里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.12.10（2019-09-25发布）包括对&lt;code&gt;net/http&lt;/code&gt;和&lt;code&gt;net/textproto&lt;/code&gt;包的安全修复。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.12.10&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题追踪器上的Go 1.12.10里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.12.11（2019-10-17发布）包括对&lt;code&gt;crypto/dsa&lt;/code&gt;包的安全修复。详情请参见&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.12.11&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题追踪器上的Go 1.12.11里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.12.12（2019-10-17发布）包括对&lt;code&gt;go&lt;/code&gt;命令、&lt;code&gt;runtime&lt;/code&gt;以及&lt;code&gt;net&lt;/code&gt;和&lt;code&gt;syscall&lt;/code&gt;包的修复。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.12.12&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题追踪器上的Go 1.12.12里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.12.13（2019-10-31发布）修复了macOS 10.15 Catalina上的一个问题，即未经公证的安装程序和二进制文件&lt;a href=&#34;https://go.dev/issue/34986&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;被Gatekeeper拒绝&lt;/a&gt;。只有遇到这个问题的macOS用户才需要更新。&lt;/p&gt;
&lt;p&gt;go1.12.14（2019-12-04发布）包括一个对&lt;code&gt;runtime&lt;/code&gt;的修复。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.12.14&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题跟踪器上的Go 1.12.14里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.12.15（2020-01-09发布）包括对&lt;code&gt;runtime&lt;/code&gt;和&lt;code&gt;net/http&lt;/code&gt;包的修复。详情请参见&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.12.15&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题追踪器上的 Go 1.12.15 里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.12.16（2020-01-28发布）包括对 &lt;code&gt;crypto/x509&lt;/code&gt; 包的两个安全修复。详情请参见&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.12.16&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题追踪器上的 Go 1.12.16 里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.12.17（2020-02-12发布）包括一个对&lt;code&gt;runtime&lt;/code&gt;的修复。详见&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.12.17&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题追踪器上的Go 1.12.17里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;go111-released-2018-08-24&#34;&gt;go1.11 (released 2018-08-24)&lt;/h2&gt;
&lt;p&gt;Go 1.11是Go的一个重要版本。阅读 &lt;a href=&#34;https://go.dev/doc/go1.11&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.11 发行说明&lt;/a&gt;以了解更多信息。&lt;/p&gt;
&lt;h3 id=&#34;minor-revisions-9&#34;&gt;Minor revisions&lt;/h3&gt;
&lt;p&gt;go1.11.1（2018-10-01发布）包括对编译器、文档、&lt;code&gt;go&lt;/code&gt;命令、&lt;code&gt;runtime&lt;/code&gt;以及&lt;code&gt;crypto/x509&lt;/code&gt;、&lt;code&gt;encoding/json&lt;/code&gt;、&lt;code&gt;go/types&lt;/code&gt;、&lt;code&gt;net&lt;/code&gt;、&lt;code&gt;net/http&lt;/code&gt;和&lt;code&gt;reflect&lt;/code&gt;包的修复。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.11.1&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题跟踪器上的Go 1.11.1里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.11.2（2018-11-02发布）包括对编译器、链接器、文档、&lt;code&gt;go&lt;/code&gt;命令，以及&lt;code&gt;database/sql&lt;/code&gt;和&lt;code&gt;go/types&lt;/code&gt;包的修复。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.11.2&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题跟踪器上的Go 1.11.2里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.11.3（2018-12-12发布）包括对 &amp;ldquo;&lt;code&gt;go get&lt;/code&gt;&amp;ldquo;和&lt;code&gt;crypto/x509&lt;/code&gt;包的三个安全修复。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.11.3&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题追踪器上的Go 1.11.3里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.11.4（2018-12-14发布）包括对&lt;code&gt;cgo&lt;/code&gt;、编译器、链接器、&lt;code&gt;runtime&lt;/code&gt;、文档、&lt;code&gt;go&lt;/code&gt;命令以及&lt;code&gt;go/types&lt;/code&gt;和&lt;code&gt;net/http&lt;/code&gt;包的修复。它包括对Go 1.11.3中引入的一个bug的修复，该bug会破坏&lt;code&gt;go get&lt;/code&gt;对于包含&amp;rdquo;&lt;code&gt;...&lt;/code&gt;&amp;ldquo;的导入路径模式。详情请参见&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.11.4&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题跟踪器上的 Go 1.11.4 里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.11.5（2019-01-23发布）包括一个对&lt;code&gt;crypto/elliptic&lt;/code&gt;包的安全修复。详情请参见&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.11.5&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题追踪器上的Go 1.11.5里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.11.6（2019-03-14发布）包括对&lt;code&gt;cgo&lt;/code&gt;、编译器、链接器、&lt;code&gt;runtime&lt;/code&gt;、&lt;code&gt;go&lt;/code&gt;命令以及&lt;code&gt;crypto/x509&lt;/code&gt;、&lt;code&gt;encoding/json&lt;/code&gt;、&lt;code&gt;net&lt;/code&gt;和&lt;code&gt;net/url&lt;/code&gt;包的修复。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.11.6&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题跟踪器上的 Go 1.11.6 里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.11.7（2019-04-05发布）包括对&lt;code&gt;runtime&lt;/code&gt;和&lt;code&gt;net&lt;/code&gt;包的修复。详见&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.11.7&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题追踪器上的Go 1.11.7里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.11.8（2019-04-08发布）是意外发布的，没有预定的修复。它与go1.11.7相同，只是版本号不同。预定的修复在go1.11.9中。&lt;/p&gt;
&lt;p&gt;go1.11.9（2019-04-11发布）修复了一个问题，即在旧版本的GNU/Linux上使用预置二进制版本会导致链接使用&lt;code&gt;cgo&lt;/code&gt;的程序时&lt;a href=&#34;https://go.dev/issues/31293&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;出现故障&lt;/a&gt;。只有遇到这个问题的Linux用户才需要更新。&lt;/p&gt;
&lt;p&gt;go1.11.10（2019-05-06发布）包括对&lt;code&gt;runtime&lt;/code&gt;的安全修复，以及对链接器的错误修复。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.11.10&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题跟踪器上的Go 1.11.10里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.11.11（2019-06-11发布）包括对&lt;code&gt;crypto/x509&lt;/code&gt;包的修复。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.11.11&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题追踪器上的Go 1.11.11里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.11.12（2019-07-08发布）包括对编译器和链接器的修复。详见&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.11.12&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题追踪器上的Go 1.11.12里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.11.13（2019-08-13发布）包括对&lt;code&gt;net/http&lt;/code&gt;和&lt;code&gt;net/url&lt;/code&gt;包的安全修复。详情请见我们的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.11.13&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题跟踪器上的Go 1.11.13里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;go110-released-2018-02-16&#34;&gt;go1.10 (released 2018-02-16)&lt;/h2&gt;
&lt;p&gt;Go 1.10是Go的一个重要版本。阅读 &lt;a href=&#34;https://go.dev/doc/go1.10&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.10 发行说明&lt;/a&gt;以了解更多信息。&lt;/p&gt;
&lt;h3 id=&#34;minor-revisions-10&#34;&gt;Minor revisions&lt;/h3&gt;
&lt;p&gt;go1.10.1（2018-03-28发布）包括对go命令的安全修复，以及对编译器、&lt;code&gt;runtime&lt;/code&gt;和&lt;code&gt;archive/zip&lt;/code&gt;、&lt;code&gt;crypto/tls&lt;/code&gt;、&lt;code&gt;crypto/x509&lt;/code&gt;、&lt;code&gt;encoding/json&lt;/code&gt;、&lt;code&gt;net&lt;/code&gt;、&lt;code&gt;net/http&lt;/code&gt;和&lt;code&gt;net/http/pprof&lt;/code&gt;包的错误修复。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.10.1&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题跟踪器上的 Go 1.10.1 里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.10.2（2018-05-01发布）包括对编译器、链接器和&lt;code&gt;go&lt;/code&gt;命令的修复。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.10.2&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题追踪器上的Go 1.10.2里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.10.3（2018-06-05发布）包括对&lt;code&gt;go&lt;/code&gt;命令以及&lt;code&gt;crypto/tls&lt;/code&gt;、&lt;code&gt;crypto/x509&lt;/code&gt;和&lt;code&gt;strings&lt;/code&gt;包的修复。特别是，它为&lt;a href=&#34;https://go.googlesource.com/go/&amp;#43;/d4e21288e444d3ffd30d1a0737f15ea3fc3b8ad9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;go&lt;/code&gt;命令增加了对&lt;code&gt;vgo&lt;/code&gt;过渡的最小支持&lt;/a&gt;。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.10.3&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题跟踪器上的 Go 1.10.3 里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.10.4（2018-08-24发布）包括对go命令、链接器以及&lt;code&gt;bytes&lt;/code&gt;、&lt;code&gt;mime/multipart&lt;/code&gt;、&lt;code&gt;net/http&lt;/code&gt;和&lt;code&gt;strings&lt;/code&gt;包的修复。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.10.4&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题跟踪器上的Go 1.10.4里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.10.5（2018-11-02发布）包括对go命令、链接器、&lt;code&gt;runtime&lt;/code&gt;和&lt;code&gt;database/sql&lt;/code&gt;包的修复。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.10.5&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题追踪器上的Go 1.10.5里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.10.6（2018-12-12发布）包括对 &amp;ldquo;&lt;code&gt;go get&lt;/code&gt;&amp;ldquo;和&lt;code&gt;crypto/x509&lt;/code&gt;包的三个安全修正。它包含与Go 1.11.3相同的修复，并在同一时间发布。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.10.6&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题跟踪器上的Go 1.10.6里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.10.7（2018-12-14发布）包含对Go 1.10.6中引入的一个错误的修复，该错误会破坏对包含&amp;rdquo;&lt;code&gt;...&lt;/code&gt;&amp;ldquo;的导入路径模式的&lt;code&gt;go get&lt;/code&gt;。详情请参见&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.10.7&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题追踪器上的 Go 1.10.7 里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.10.8（2019-01-23发布）包括一个对&lt;code&gt;crypto/elliptic&lt;/code&gt;包的安全修复。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.10.8&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题追踪器上的Go 1.10.8里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;go19-released-2017-08-24&#34;&gt;go1.9 (released 2017-08-24)&lt;/h2&gt;
&lt;p&gt;Go 1.9是Go的一个重要版本。阅读 &lt;a href=&#34;https://go.dev/doc/go1.9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.9 发行说明&lt;/a&gt;以了解更多信息。&lt;/p&gt;
&lt;h3 id=&#34;minor-revisions-11&#34;&gt;Minor revisions&lt;/h3&gt;
&lt;p&gt;go1.9.1（2017-10-04发布）包括两个安全修复。请参阅我们的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.9.1&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题跟踪器上的Go 1.9.1里程碑&lt;/a&gt;以了解详情。&lt;/p&gt;
&lt;p&gt;go1.9.2（2017-10-25发布）包括对编译器、链接器、&lt;code&gt;runtime&lt;/code&gt;、文档、&lt;code&gt;go&lt;/code&gt;命令以及&lt;code&gt;crypto/x509&lt;/code&gt;、&lt;code&gt;database/sql&lt;/code&gt;、&lt;code&gt;log&lt;/code&gt;和&lt;code&gt;net/smtp&lt;/code&gt;包的修正。它包括对 Go 1.9.1 中引入的一个错误的修复，该错误在某些情况下会破坏非 Git 仓库的 &lt;code&gt;go get&lt;/code&gt;。详情请参见&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.9.2&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题追踪器上的 Go 1.9.2 里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.9.3（2018-01-22发布）包括&lt;code&gt;net/url&lt;/code&gt;包的安全修复，以及编译器、&lt;code&gt;runtime&lt;/code&gt;、&lt;code&gt;database/sql&lt;/code&gt;、&lt;code&gt;math/big&lt;/code&gt;和&lt;code&gt;net/http&lt;/code&gt;包的错误修复。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.9.3&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题跟踪器上的 Go 1.9.3 里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.9.4（2018-02-07发布）包括一个对 &amp;ldquo;&lt;code&gt;go get&lt;/code&gt;&amp;ldquo;的安全修复。详见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.9.4&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题追踪器上的Go 1.9.4里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.9.5（2018-03-28发布）包括对&lt;code&gt;go&lt;/code&gt;命令的安全修复，以及对编译器、&lt;code&gt;go&lt;/code&gt;命令和&lt;code&gt;net/http/pprof&lt;/code&gt;包的错误修复。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.9.5&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题跟踪器上的Go 1.9.5里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.9.6（2018-05-01发布）包括对编译器和&lt;code&gt;go&lt;/code&gt;命令的修复。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.9.6&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题追踪器上的Go 1.9.6里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.9.7（2018-06-05发布）包括对&lt;code&gt;go&lt;/code&gt;命令以及&lt;code&gt;crypto/x509&lt;/code&gt;和&lt;code&gt;strings&lt;/code&gt;包的修复。特别是，它为&lt;a href=&#34;https://go.googlesource.com/go/&amp;#43;/d4e21288e444d3ffd30d1a0737f15ea3fc3b8ad9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;go&lt;/code&gt;命令增加了对&lt;code&gt;vgo&lt;/code&gt;过渡的最小支持&lt;/a&gt;。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.9.7&amp;#43;label%3ACherryPickApproved&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题跟踪器上的Go 1.9.7里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;go18-released-2017-02-16&#34;&gt;go1.8 (released 2017-02-16)&lt;/h2&gt;
&lt;p&gt;Go 1.8是Go的一个重要版本。阅读 &lt;a href=&#34;https://go.dev/doc/go1.8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.8 发行说明&lt;/a&gt;以了解更多信息。&lt;/p&gt;
&lt;h3 id=&#34;minor-revisions-12&#34;&gt;Minor revisions&lt;/h3&gt;
&lt;p&gt;go1.8.1（2017-04-07发布）包括对编译器、链接器、&lt;code&gt;runtime&lt;/code&gt;、文档、&lt;code&gt;go&lt;/code&gt;命令以及&lt;code&gt;crypto/tls&lt;/code&gt;、&lt;code&gt;encoding/xml&lt;/code&gt;、&lt;code&gt;image/png&lt;/code&gt;、&lt;code&gt;net&lt;/code&gt;、&lt;code&gt;net/http&lt;/code&gt;、&lt;code&gt;reflect&lt;/code&gt;、&lt;code&gt;text/template&lt;/code&gt;和&lt;code&gt;time&lt;/code&gt;包的修复。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.8.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题跟踪器上的Go 1.8.1里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.8.2（2017-05-23发布）包括一个对&lt;code&gt;crypto/elliptic&lt;/code&gt;包的安全修复。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.8.2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题追踪器上的Go 1.8.2里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.8.3（2017-05-24发布）包括对编译器、&lt;code&gt;runtime&lt;/code&gt;、文档和&lt;code&gt;database/sql&lt;/code&gt;包的修复。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.8.3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题追踪器上的Go 1.8.3里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.8.4（2017-10-04发布）包括两个安全修复。它包含了与Go 1.9.1相同的修复，并在同一时间发布。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.8.4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题跟踪器上的Go 1.8.4里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.8.5（2017-10-25发布）包括对编译器、链接器、&lt;code&gt;runtime&lt;/code&gt;、文档、&lt;code&gt;go&lt;/code&gt;命令以及&lt;code&gt;crypto/x509&lt;/code&gt;和&lt;code&gt;net/smtp&lt;/code&gt;包的修正。它包括对Go 1.8.4中引入的一个错误的修复，该错误在某些条件下破坏了非Git仓库的&lt;code&gt;go get&lt;/code&gt;。详情请参见&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.8.5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题跟踪器上的 Go 1.8.5 里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.8.6（2018-01-22发布）包括与Go 1.9.3相同的&lt;code&gt;math/big&lt;/code&gt;中的修复，并在同一时间发布。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.8.6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题跟踪器上的Go 1.8.6里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.8.7（2018-02-07发布）包含一个对 &amp;ldquo;&lt;code&gt;go get&lt;/code&gt;&amp;ldquo;的安全修复。它包含与Go 1.9.4相同的修复，并在同一时间发布。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.8.7&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题跟踪器上的Go 1.8.7里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;go17-released-2016-08-15&#34;&gt;go1.7 (released 2016-08-15)&lt;/h2&gt;
&lt;p&gt;Go 1.7是Go的一个重要版本。阅读 &lt;a href=&#34;https://go.dev/doc/go1.7&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.7 发行说明&lt;/a&gt;以了解更多信息。&lt;/p&gt;
&lt;h3 id=&#34;minor-revisions-13&#34;&gt;Minor revisions&lt;/h3&gt;
&lt;p&gt;go1.7.1（2016-09-07发布）包括对编译器、&lt;code&gt;runtime&lt;/code&gt;、文档以及&lt;code&gt;compress/flate&lt;/code&gt;、&lt;code&gt;hash/crc32&lt;/code&gt;、&lt;code&gt;io&lt;/code&gt;、&lt;code&gt;net&lt;/code&gt;、&lt;code&gt;net/http&lt;/code&gt;、&lt;code&gt;path/filepath&lt;/code&gt;、&lt;code&gt;reflect&lt;/code&gt;和&lt;code&gt;syscall&lt;/code&gt;包的修正。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.7.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题跟踪器上的 Go 1.7.1 里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.7.2不应被使用。它已被标记但未完全发布。由于最后一分钟的错误报告，该版本被推迟了。请使用go1.7.3来代替，并参考下面的变化摘要。&lt;/p&gt;
&lt;p&gt;go1.7.3（2016-10-19发布）包括对编译器、&lt;code&gt;runtime&lt;/code&gt;以及&lt;code&gt;crypto/cipher&lt;/code&gt;、&lt;code&gt;crypto/tls&lt;/code&gt;、&lt;code&gt;net/http&lt;/code&gt;和&lt;code&gt;strings&lt;/code&gt;包的修复。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.7.3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题跟踪器上的Go 1.7.3里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.7.4（2016-12-01发布）包括两个安全修复。详见&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.7.4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题追踪器上的 Go 1.7.4 里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.7.5（2017-01-26发布）包括对编译器、&lt;code&gt;runtime&lt;/code&gt;以及&lt;code&gt;crypto/x509&lt;/code&gt;和&lt;code&gt;time&lt;/code&gt;包的修复。详情请见我们的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.7.5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题跟踪器上的Go 1.7.5里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.7.6（2017-05-23发布）包括与Go 1.8.2相同的安全修复，并在同一时间发布。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.8.2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题追踪器上的Go 1.8.2里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;go16-released-2016-02-17&#34;&gt;go1.6 (released 2016-02-17)&lt;/h2&gt;
&lt;p&gt;Go 1.6是Go的一个重要版本。阅读 &lt;a href=&#34;https://go.dev/doc/go1.6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.6 发行说明&lt;/a&gt;以了解更多信息。&lt;/p&gt;
&lt;h3 id=&#34;minor-revisions-14&#34;&gt;Minor revisions&lt;/h3&gt;
&lt;p&gt;go1.6.1（2016-04-12发布）包括两个安全修复。请参阅我们的&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.6.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题跟踪器上的 Go 1.6.1 里程碑&lt;/a&gt;了解详情。&lt;/p&gt;
&lt;p&gt;go1.6.2（2016-04-20发布）包括对编译器、&lt;code&gt;runtime&lt;/code&gt;、工具、文档，以及&lt;code&gt;mime/multipart&lt;/code&gt;、&lt;code&gt;net/http&lt;/code&gt;和&lt;code&gt;sort&lt;/code&gt;包的修复。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.6.2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题跟踪器上的Go 1.6.2里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.6.3（2016-07-17发布）包括在&lt;code&gt;CGI&lt;/code&gt;环境下使用&lt;code&gt;net/http/cgi&lt;/code&gt;包和&lt;code&gt;net/http&lt;/code&gt;包时的安全修复。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.6.3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题跟踪器上的Go 1.6.3里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.6.4（2016-12-01发布）包括两个安全修复。它包含与Go 1.7.4相同的修复，并在同一时间发布。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.7.4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题跟踪器上的Go 1.7.4里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;go15-released-2015-08-19&#34;&gt;go1.5 (released 2015-08-19)&lt;/h2&gt;
&lt;p&gt;Go 1.5是Go的一个重要版本。阅读 &lt;a href=&#34;https://go.dev/doc/go1.5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.5 发行说明&lt;/a&gt;以了解更多信息。&lt;/p&gt;
&lt;h3 id=&#34;minor-revisions-15&#34;&gt;Minor revisions&lt;/h3&gt;
&lt;p&gt;go1.5.1（2015-09-08发布）包括对编译器、汇编器以及&lt;code&gt;fmt&lt;/code&gt;、&lt;code&gt;net/textproto&lt;/code&gt;、&lt;code&gt;net/http&lt;/code&gt;和&lt;code&gt;runtime&lt;/code&gt;包的错误修复。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.5.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题跟踪器上的Go 1.5.1里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.5.2（2015-12-02发布）包括对编译器、链接器以及&lt;code&gt;mime/multipart&lt;/code&gt;、&lt;code&gt;net&lt;/code&gt;和&lt;code&gt;runtime&lt;/code&gt;包的错误修复。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.5.2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题跟踪器上的Go 1.5.2里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.5.3（2016-01-13发布）包括对影响&lt;code&gt;crypto/tls&lt;/code&gt;包的&lt;code&gt;math/big&lt;/code&gt;包的安全修复。详见&lt;a href=&#34;https://go.dev/s/go153announce&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;发布公告&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.5.4（2016-04-12发布）包括两个安全修复。它包含与Go 1.6.1相同的修复，并在同一时间发布。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.6.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题跟踪器上的Go 1.6.1里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;go14-released-2014-12-10&#34;&gt;go1.4 (released 2014-12-10)&lt;/h2&gt;
&lt;p&gt;Go 1.4是Go的一个重要版本。阅读 &lt;a href=&#34;https://go.dev/doc/go1.4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.4 发行说明&lt;/a&gt;以了解更多信息。&lt;/p&gt;
&lt;h3 id=&#34;minor-revisions-16&#34;&gt;Minor revisions&lt;/h3&gt;
&lt;p&gt;go1.4.1（2015-01-15发布）包括对链接器和&lt;code&gt;log&lt;/code&gt;、&lt;code&gt;syscall&lt;/code&gt;和&lt;code&gt;runtime&lt;/code&gt;包的错误修复。详情请参见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.4.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题跟踪器上的 Go 1.4.1 里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.4.2（2015-02-17发布）包括对编译器的安全修复，以及对&lt;code&gt;go&lt;/code&gt;命令、编译器和链接器以及&lt;code&gt;runtime&lt;/code&gt;、&lt;code&gt;syscall&lt;/code&gt;、&lt;code&gt;reflect&lt;/code&gt;和&lt;code&gt;math/big&lt;/code&gt;包的错误修复。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.4.2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题跟踪器上的 Go 1.4.2 里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.4.3（2015-09-22发布）包括&lt;code&gt;net/http&lt;/code&gt;包的安全修复和&lt;code&gt;runtime&lt;/code&gt;包的错误修复。详情请见我们&lt;a href=&#34;https://github.com/golang/go/issues?q=milestone%3AGo1.4.3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题追踪器上的Go 1.4.3里程碑&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;go13-released-2014-06-18&#34;&gt;go1.3 (released 2014-06-18)&lt;/h2&gt;
&lt;p&gt;Go 1.3是Go的一个重要版本。阅读 &lt;a href=&#34;https://go.dev/doc/go1.3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.3 发行说明&lt;/a&gt;以了解更多信息。&lt;/p&gt;
&lt;h3 id=&#34;minor-revisions-17&#34;&gt;Minor revisions&lt;/h3&gt;
&lt;p&gt;go1.3.1（2014-08-13发布）包括对编译器以及&lt;code&gt;runtime&lt;/code&gt;、&lt;code&gt;net&lt;/code&gt;和&lt;code&gt;crypto/rsa&lt;/code&gt;包的错误修复。详细内容请参见&lt;a href=&#34;https://github.com/golang/go/commits/go1.3.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;变更历史&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.3.2（2014-09-25发布）包括对&lt;code&gt;crypto/tls&lt;/code&gt;包的安全修复和对&lt;code&gt;cgo&lt;/code&gt;的错误修复。详见&lt;a href=&#34;https://github.com/golang/go/commits/go1.3.2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;变更历史&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.3.3（2014-09-30发布）包括对&lt;code&gt;cgo&lt;/code&gt;、&lt;code&gt;runtime&lt;/code&gt; 包和&lt;code&gt;nacl&lt;/code&gt;端口的进一步错误修复。详见&lt;a href=&#34;https://github.com/golang/go/commits/go1.3.3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;变更历史&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;go12-released-2013-12-01&#34;&gt;go1.2 (released 2013-12-01)&lt;/h2&gt;
&lt;p&gt;Go 1.2是Go的一个重要版本。请阅读 &lt;a href=&#34;https://go.dev/doc/go1.2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.2 发行说明&lt;/a&gt; 以了解更多信息。&lt;/p&gt;
&lt;h3 id=&#34;minor-revisions-18&#34;&gt;Minor revisions&lt;/h3&gt;
&lt;p&gt;go1.2.1（2014-03-02发布）包括对&lt;code&gt;runtime&lt;/code&gt;、&lt;code&gt;net&lt;/code&gt;和&lt;code&gt;database/sql&lt;/code&gt;包的错误修复。详情请参见&lt;a href=&#34;https://github.com/golang/go/commits/go1.2.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;变更历史&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.2.2（2014-05-05发布）包括一个影响到二进制发行版中包含的tour binary的&lt;a href=&#34;https://github.com/golang/go/commits/go1.2.2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;安全修复&lt;/a&gt;（感谢Guillaume T）。&lt;/p&gt;
&lt;h2 id=&#34;go11-released-2013-05-13&#34;&gt;go1.1 (released 2013-05-13)&lt;/h2&gt;
&lt;p&gt;Go 1.1是Go的一个重要版本。请阅读 &lt;a href=&#34;https://go.dev/doc/go1.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1.1 发行说明&lt;/a&gt; 以了解更多信息。&lt;/p&gt;
&lt;h3 id=&#34;minor-revisions-19&#34;&gt;Minor revisions&lt;/h3&gt;
&lt;p&gt;go1.1.1（2013-06-13发布）包括对编译器的安全修复以及对编译器和&lt;code&gt;runtime&lt;/code&gt;的若干错误修复。详情请参见&lt;a href=&#34;https://github.com/golang/go/commits/go1.1.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;变更历史&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;go1.1.2（2013-08-13发布）包括对&lt;code&gt;gc&lt;/code&gt;编译器和&lt;code&gt;cgo&lt;/code&gt;，以及&lt;code&gt;bufio&lt;/code&gt;、&lt;code&gt;runtime&lt;/code&gt;、&lt;code&gt;syscall&lt;/code&gt;和&lt;code&gt;time&lt;/code&gt;包的修复。详情请参见&lt;a href=&#34;https://github.com/golang/go/commits/go1.1.2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;变更历史&lt;/a&gt;。如果你在ARM或386架构的Linux下使用&lt;code&gt;syscall&lt;/code&gt;包的&lt;code&gt;Getrlimit&lt;/code&gt;和&lt;code&gt;Setrlimit&lt;/code&gt;函数，请注意&lt;a href=&#34;https://go.dev/cl/11803043&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;11803043&lt;/a&gt;的变动，它修复了&lt;a href=&#34;https://go.dev/issue/5949&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;issue 5949&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;go1-released-2012-03-28&#34;&gt;go1 (released 2012-03-28)&lt;/h2&gt;
&lt;p&gt;Go 1是Go的一个重要版本，将长期保持稳定。请阅读 &lt;a href=&#34;https://go.dev/doc/go1.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1 发行说明&lt;/a&gt;了解更多信息。&lt;/p&gt;
&lt;p&gt;我们希望为 Go 1 编写的程序能够在未来的 Go 1 版本下继续正确地编译和运行，不做任何改变。 阅读 &lt;a href=&#34;https://go.dev/doc/go1compat.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go 1 兼容性文件&lt;/a&gt;，了解更多关于 Go 1 的未来。&lt;/p&gt;
&lt;p&gt;go1版本对应的是&lt;code&gt;weekly.2012-03-27&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;minor-revisions-20&#34;&gt;Minor revisions&lt;/h3&gt;
&lt;p&gt;go1.0.1（2012-04-25发布）是为了&lt;a href=&#34;https://go.dev/cl/6061043&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;修复&lt;/a&gt;一个可能导致内存损坏的&lt;a href=&#34;https://go.dev/issue/3545&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;转义分析错误&lt;/a&gt;。它还包括几个小的代码和文档修复。&lt;/p&gt;
&lt;p&gt;go1.0.2（2012-06-13发布）修正了使用结构体或数组键的映射实现中的两个错误：&lt;a href=&#34;https://go.dev/issue/3695&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;issue 3695&lt;/a&gt;和&lt;a href=&#34;https://go.dev/issue/3573&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;issue 3573&lt;/a&gt;。它还包括许多小的代码和文档修复。&lt;/p&gt;
&lt;p&gt;go1.0.3（2012-09-21发布）包括一些小的代码和文档修正。&lt;/p&gt;
&lt;p&gt;完整的变化列表请参见&lt;a href=&#34;https://github.com/golang/go/commits/release-branch.go1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;go1发布分支历史&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;older-releases-较早的版本&#34;&gt;Older releases 较早的版本&lt;/h2&gt;
&lt;p&gt;请参阅&lt;a href=&#34;../../Other/Pre-Go1ReleaseHistory&#34;&gt;Go1发布前的历史&lt;/a&gt;页面，了解早期发布的注意事项。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
