<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on Go 中文档集</title><link>https://before80.github.io/go_docs/stdLib/go/</link><description>Recent content in go on Go 中文档集</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 17 May 2023 11:11:20 +0800</lastBuildDate><atom:link href="https://before80.github.io/go_docs/stdLib/go/index.xml" rel="self" type="application/rss+xml"/><item><title>ast</title><link>https://before80.github.io/go_docs/stdLib/go/ast/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/go/ast/</guid><description>原文：https://pkg.go.dev/go/ast@go1.24.2 Package ast declares the types used to represent syntax trees for Go packages. ​ ast 包声明用于表示 Go 包的语法树的类型。 常</description></item><item><title>build</title><link>https://before80.github.io/go_docs/stdLib/go/build/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/go/build/</guid><description>原文：https://pkg.go.dev/go/build@go1.24.2 Package build gathers information about Go packages. ​ build 包收集了有关Go包的信息。 Go Path The Go path is a list of</description></item><item><title>build/contraint</title><link>https://before80.github.io/go_docs/stdLib/go/build_constraint/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/go/build_constraint/</guid><description>原文：https://pkg.go.dev/go/build/constraint@go1.24.2 Package constraint implements parsing and evaluation of build constraint lines. See https://golang.org/cmd/go/#hdr-Build_constraints for documentation about build constraints themselves. ​ Package</description></item><item><title>constant</title><link>https://before80.github.io/go_docs/stdLib/go/constant/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/go/constant/</guid><description>原文：https://pkg.go.dev/go/constant@go1.24.2 Package constant implements Values representing untyped Go constants and their corresponding operations. A special Unknown value may be used when a value is unknown due to an error.</description></item><item><title>doc</title><link>https://before80.github.io/go_docs/stdLib/go/doc/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/go/doc/</guid><description>原文：https://pkg.go.dev/go/doc@go1.24.2 Package doc extracts source code documentation from a Go AST. ​ doc 包从 Go AST 中提取源代码文档。 常量 This section is empty. 变量</description></item><item><title>doc/comment</title><link>https://before80.github.io/go_docs/stdLib/go/doc_comment/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/go/doc_comment/</guid><description>原文：https://pkg.go.dev/go/doc/comment@go1.24.2 Package comment implements parsing and reformatting of Go doc comments, (documentation comments), which are comments that immediately precede a top-level declaration of a package, const,</description></item><item><title>format</title><link>https://before80.github.io/go_docs/stdLib/go/format/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/go/format/</guid><description>原文：https://pkg.go.dev/go/format@go1.24.2 Package format implements standard formatting of Go source. ​ format 包实现 Go 源代码的标准格式化。 Note that formatting of Go source</description></item><item><title>importer</title><link>https://before80.github.io/go_docs/stdLib/go/importer/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/go/importer/</guid><description>原文：https://pkg.go.dev/go/importer@go1.24.2 Package importer provides access to export data importers. ​ importer 包提供对导出数据导入器的访问。 常量 This</description></item><item><title>parser</title><link>https://before80.github.io/go_docs/stdLib/go/parser/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/go/parser/</guid><description>原文：https://pkg.go.dev/go/parser@go1.24.2 Package parser implements a parser for Go source files. Input may be provided in a variety of forms (see the various Parse* functions); the output is an abstract syntax tree</description></item><item><title>printer</title><link>https://before80.github.io/go_docs/stdLib/go/printer/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/go/printer/</guid><description>原文：https://pkg.go.dev/go/printer@go1.24.2 Package printer implements printing of AST nodes. ​ Package printer 实现 AST 节点的打印。 常量 This section is empty. 变量 This section</description></item><item><title>scanner</title><link>https://before80.github.io/go_docs/stdLib/go/scanner/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/go/scanner/</guid><description>原文：https://pkg.go.dev/go/scanner@go1.24.2 Package scanner implements a scanner for Go source text. It takes a []byte as source which can then be tokenized through repeated calls to the Scan method. ​ scanner</description></item><item><title>token</title><link>https://before80.github.io/go_docs/stdLib/go/token/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/go/token/</guid><description>原文：https://pkg.go.dev/go/token@go1.24.2 Package token defines constants representing the lexical tokens of the Go programming language and basic operations on tokens (printing, predicates). ​ token 包定义表示 Go 编程语</description></item><item><title>types</title><link>https://before80.github.io/go_docs/stdLib/go/types/</link><pubDate>Wed, 17 May 2023 11:11:20 +0800</pubDate><guid>https://before80.github.io/go_docs/stdLib/go/types/</guid><description>原文：https://pkg.go.dev/go/types@go1.24.2 Package types declares the data types and implements the algorithms for type-checking of Go packages. Use Config.Check to invoke the type checker for a package. Alternatively, create a new type checker</description></item></channel></rss>